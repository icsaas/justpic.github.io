<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>桑河一榆</title><link>https://justpic.org/</link><description>Recent content on 桑河一榆</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>matrix.orz@gmail.com (justpic)</managingEditor><webMaster>matrix.orz@gmail.com (justpic)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://justpic.org/index.xml" rel="self" type="application/rss+xml"/><item><title>口罩和安全帽识别</title><link>https://justpic.org/post/2020/04/06/mask-helmet-recognition/</link><pubDate>Mon, 06 Apr 2020 01:00:32 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/04/06/mask-helmet-recognition/</guid><description><p>2019年以来，图像识别类竞赛也开始集中到口罩和安全帽这两类与健康安全息息相关的场景中，下面主要从这两类场景的一些竞赛资料和比赛流程进行一个简短的介绍，</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" type="button" value="点击验证" onclick="_click_handler(this)"/></div><div class="hugo-encryptor-cipher-text" data-password="cvmart2333" style="display: none;"><span style="display: none;">--- DON'T MODIFY THIS LINE ---</span><p>最开始，是通过极市小助手公众号得知极市组织了第一届图像识别类的比赛，比赛内容主要分为口罩识别和安全帽识别，我主要参与的是安全帽识别，在参加极市组织的安全帽比赛过程中，就比赛体验来说，
主要存在以下亮点：</p><ol><li>具有代码示例，极大的降低了入门门槛</li><li>使用jupyterlab环境进行远程命令操作，继承了较好的用户交互体验</li><li>认识了算法交易的一种新的商业模式，极市平台很好的连接了算法生产者和算法消费者，通过商城和开发平台两个不同的模块整合了算法资源，并持续运营。</li><li>认识了牛人，知道了Intel Openvino新技术以及常用的目标识别算法，ROI等概念。</li></ol><p>但同时感觉可能存在以下改进点：</p><ol><li>比赛过程中，参赛人员是不可以接触训练模型的，只能通过网页看到一些数据分析图片，模型调优较为困难，极大地消弱了参与比赛的积极性。</li><li>jupyterlab使用时长会消耗积分，关闭实例的同时会连带关闭jupyterlab，感觉jupyterlab本身并不消耗GPU资源，没有必要在关闭训练或者测试实例的时候同时关闭jupyterlab实例。</li><li>整个训练测试过程不够直观，需要经过线下编码、线上训练、线上转换模型、线上测试一系列的步骤才能最终得到结果，但中间过程仅通过查询日志才能进行排错，根据官方教程，我本地也建立了一套线下环境，总体感觉数据分析平台还只是一个demo，不能称之为产品，与阿里DOPS或者其他数析平台还有差距，相信极市内部应该还有一套更为成熟的数析平台。建议是否能够研发或者引进算法引擎、类工作流引擎来简化编写代码操作，记得2015年的时候阿里大数据比赛最开始的时候环境也是类似的，后面优化的力度和进度还是挺快的，不光建立了算法资源库，也产生了比较优秀的数析平台。</li></ol></div></div><hr><p><em>参考</em></p><ul><li><a href="http://www.python88.com/topic/49712" target="_blank" rel="noopener noreffer">深度学习实现安全帽的检测</a></li><li><a href="https://www.lizenghai.com/archives/32586.html" target="_blank" rel="noopener noreffer">基于YOLOV3进行安全帽检测</a></li><li><a href="https://www.yanxishe.com/blogDetail/14905" target="_blank" rel="noopener noreffer">ai研习社</a></li><li><a href="https://www.cnblogs.com/supersayajin/p/11445401.html" target="_blank" rel="noopener noreffer">安全帽检测数据集与与训练模型</a></li><li><a href="https://github.com/njvisionpower/Safety-Helmet-Wearing-Dataset" target="_blank" rel="noopener noreffer">安全帽检测数据集</a></li><li><a href="https://github.com/MinhNKB/helmet-safety-vest-detection" target="_blank" rel="noopener noreffer">安全帽检测github</a></li><li><a href="https://github.com/QinWinner/MFC-darknet-yolo" target="_blank" rel="noopener noreffer">mfc检测安全帽</a></li><li><a href="cvmart.net" rel="noopener noreffer">cvmart</a></li></ul></description></item><item><title>ubuntu 18.04系统安装OpenCV 4.2.0</title><link>https://justpic.org/post/2020/03/27/ubuntu-18.04-install-opencv-4.2.0/</link><pubDate>Fri, 27 Mar 2020 11:47:38 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/27/ubuntu-18.04-install-opencv-4.2.0/</guid><description><p>主要介绍ubuntu 18.04安装OpenCV 4.2.0</p><h2 id="更新系统">更新系统</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt update
$ sudo apt upgrade</code></pre></td></tr></table></div></div><h2 id="安装前置依赖包">安装前置依赖包</h2><ul><li>通用工具</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"> $ sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall</code></pre></td></tr></table></div></div><ul><li>图像I/O库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libjpeg-dev libpng-dev libtiff-dev</code></pre></td></tr></table></div></div><ul><li>视频/音频库-FFMPEG,GSTREAMER,x264等等</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
$ sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
$ sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev
$ sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev</code></pre></td></tr></table></div></div><ul><li>OpenCore-</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev</code></pre></td></tr></table></div></div><ul><li>照相编程接口库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
$<span class="nb">cd</span> /usr/include/linux
$ sudo ln -s -f ../libv4l1-videodev.h videodev.h
$<span class="nb">cd</span> ~</code></pre></td></tr></table></div></div><ul><li>GTK库－图形用户界面</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libgtk-3-dev</code></pre></td></tr></table></div></div><ul><li>python3所使用的库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install python3-dev python3-pip
$ sudo -H pip3 install -U pip numpy
$ sudo apt install python3-testresources</code></pre></td></tr></table></div></div><ul><li>用于CPU的C++并行库</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libtbb-dev</code></pre></td></tr></table></div></div><ul><li>用于OpenCV的优化库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt-get install libatlas-base-dev gfortran</code></pre></td></tr></table></div></div><ul><li>可选安装　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libprotobuf-dev protobuf-compiler
$ sudo apt-get install libgoogle-glog-dev libgflags-dev
$ sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen</code></pre></td></tr></table></div></div><h2 id="正式安装opencv-420步骤">正式安装Opencv 4.2.0步骤</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$<span class="nb">cd</span> ~
$ mkdir -p installcv1
$<span class="nb">cd</span> installcv1
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.1.zip
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.1.zip
$ unzip opencv.zip
$ unzip opencv_contrib.zip
$<span class="nb">echo</span><span class="s2">"Create a virtual environtment for the python binding module"</span>
$ sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip
$<span class="nb">echo</span><span class="s2">"Edit ~/.bashrc"</span>
$<span class="nb">export</span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
$<span class="nb">export</span><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python3
$<span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv cv -p python3
$ pip install numpy
$<span class="nb">echo</span><span class="s2">"Procced with the installation"</span>
$<span class="nb">cd</span> opencv-4.2.0
$ mkdir build
$<span class="nb">cd</span> build
$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE
-D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc
-D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv
-D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON
-D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF
-D<span class="nv">WITH_TBB</span><span class="o">=</span>ON
-D<span class="nv">WITH_CUDA</span><span class="o">=</span>ON
-D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF
-D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">WITH_V4L</span><span class="o">=</span>ON
-D<span class="nv">WITH_QT</span><span class="o">=</span>OFF
-D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON
-D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc
-D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages
-D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/installcv/opencv_contrib-4.2.0/modules
-D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python
-D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON　-D<span class="nv">WITH_CUDNN</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_DNN_CUDA</span><span class="o">=</span>ON
-D<span class="nv">CUDA_ARCH_BIN</span><span class="o">=</span>6.1
-D<span class="nv">WITH_INF_ENGINE</span><span class="o">=</span>ON
-D<span class="nv">ENABLE_CXX11</span><span class="o">=</span>ON
-D<span class="nv">INTEL_CVSDK_DIR</span><span class="o">=</span>/home/sn0w/intel/openvino_2020.1.023/deployment_tools
-D<span class="nv">IE_PLUGINS_PATH</span><span class="o">=</span>/home/sn0w/intel/openvino_2020.1.023/deployment_tools/inference_engine/lib/intel64/
-D<span class="nv">INF_ENGINE_RELEASE</span><span class="o">=</span><span class="m">2020010000</span>
-D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON
-D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..</code></pre></td></tr></table></div></div><p><strong>如果你只是想编译静态库，只需要在Cmake时附加<code> -D BUILD_SHARED_LIBS=OFF</code></strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc -D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/usr/local -D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF -D<span class="nv">WITH_TBB</span><span class="o">=</span>ON -D<span class="nv">WITH_CUDA</span><span class="o">=</span>ON -D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF -D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_V4L</span><span class="o">=</span>ON -D<span class="nv">WITH_QT</span><span class="o">=</span>OFF -D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON -D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON -D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc -D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages -D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~／installcv/opencv_contrib-4.2.0/modules -D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python -D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">BUILD_SHARED_LIBS</span><span class="o">=</span>OFF ..</code></pre></td></tr></table></div></div><p><strong>如果你不想包括CUDA，只需要设置<code>-D WITH_CUDA=OFF</code></strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc-6 -D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv -D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF -D<span class="nv">WITH_TBB</span><span class="o">=</span>ON -D<span class="nv">WITH_CUDA</span><span class="o">=</span>OFF -D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF -D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_V4L</span><span class="o">=</span>ON -D<span class="nv">WITH_QT</span><span class="o">=</span>OFF -D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON -D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON -D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc -D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages -D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/installcv1/opencv_contrib-4.2.0/modules -D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python -D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..</code></pre></td></tr></table></div></div><p><strong>如果你想使用CUDNN，你必须在Cmake时包含这些标记（正确的设置CUDA_ARCH_BIN的值)</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">-D<span class="nv">WITH_CUDNN</span><span class="o">=</span>ON<span class="se">\</span><span class="se"/>-D<span class="nv">OPENCV_DNN_CUDA</span><span class="o">=</span>ON<span class="se">\</span><span class="se"/>-D<span class="nv">CUDA_ARCH_BIN</span><span class="o">=</span>6.1<span class="se">\</span></code></pre></td></tr></table></div></div><p>在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener noreffer">https://developer.nvidia.com/cuda-gpus</a>
网站上可以看到自己网卡可兼容的CUDA版本情况．</p><p><strong>正式编译前，你必须检查CUDA在Cmake输出时是否启用</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">-- NVIDIA CUDA: YES (ver 10.0, CUFFT CUBLAS NVCUVID FAST_MATH)
-- NVIDIA GPU arch: 30 35 37 50 52 60 61 70 75
-- NVIDIA PTX archs:</code></pre></td></tr></table></div></div><p><strong>正式编译和安装</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ nproc
$ make -j8<span class="c1">#！ubuntu 18.04编译过程中出现错误：sudo ln -s /usr/include/eigen3/Eigen /usr/include/Eigen</span>
$ sudo make install</code></pre></td></tr></table></div></div><p><strong>配置环境变量</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo /bin/bash -c<span class="s1">'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'</span>
$ sudo ldconfig
$</code></pre></td></tr></table></div></div><p><strong>如果你想让python的cv包能够在系统环境下使用，必须要下面的复制工作</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo cp -r ~/.virtualenvs/cv/lib/python3.6/site-packages/cv2 /usr/local/lib/python3.6/dist-packages
$<span class="nb">export</span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/ev_sdk/lib:/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv/lib:/usr/local/lib:/usr/local/cuda-10.0/lib64<span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="p">:+:</span><span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="si">}}</span>
$<span class="nb">export</span><span class="nv">OpenCV_DIR</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv
$<span class="nb">echo</span><span class="s2">"Modify config-3.6.py to point to the target directory"</span>
$ sudo nano /usr/local/lib/python3.6/dist-packages/cv2/config-3.6.py<span class="sb">```</span><span class="nv">PYTHON_EXTENSIONS_PATHS</span><span class="o">=</span><span class="o">[</span>
os.path.join<span class="o">(</span><span class="s1">'/usr/local/lib/python3.6/dist-packages/cv2'</span>,<span class="s1">'python-3.6'</span><span class="o">)</span><span class="o">]</span> + PYTHON_EXTENSIONS_PATHS<span class="sb">```</span></code></pre></td></tr></table></div></div><h2 id="测试安装">测试安装　　</h2><p>案例程序</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//test.cpp</span><span class="c1"/><span class="cp">#include</span><span class="cpf">&lt;iostream></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;ctime></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;cmath></span><span class="cp"/><span class="cp">#include</span><span class="cpf">"bits/time.h"</span><span class="cp"/><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/core.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/highgui.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/imgproc.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/imgcodecs.hpp></span><span class="cp"/><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/core/cuda.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/cudaarithm.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/cudaimgproc.hpp></span><span class="cp"/><span class="cp"/><span class="cp">#define TestCUDA true</span><span class="cp"/><span class="kt">int</span><span class="nf">main</span><span class="p">()</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">clock_t</span><span class="n">begin</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span><span class="k">try</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">String</span><span class="n">filename</span><span class="o">=</span><span class="s">"/home/raul/Pictures/Screenshot_20170317_105454.png"</span><span class="p">;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">srcHost</span><span class="o">=</span><span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="n">cv</span><span class="o">::</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="n">TestCUDA</span><span class="p">)</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">cuda</span><span class="o">::</span><span class="n">GpuMat</span><span class="n">dst</span><span class="p">,</span><span class="n">src</span><span class="p">;</span><span class="n">src</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="n">srcHost</span><span class="p">);</span><span class="c1">//cv::cuda::threshold(src,dst,128.0,255.0, CV_THRESH_BINARY);</span><span class="c1"/><span class="n">cv</span><span class="o">::</span><span class="n">cuda</span><span class="o">::</span><span class="n">bilateralFilter</span><span class="p">(</span><span class="n">src</span><span class="p">,</span><span class="n">dst</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">resultHost</span><span class="p">;</span><span class="n">dst</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="n">resultHost</span><span class="p">);</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">dst</span><span class="p">;</span><span class="n">cv</span><span class="o">::</span><span class="n">bilateralFilter</span><span class="p">(</span><span class="n">srcHost</span><span class="p">,</span><span class="n">dst</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="p">}</span><span class="p">}</span><span class="c1">//cv::imshow("Result",resultHost);</span><span class="c1"/><span class="c1">//cv::waitKey();</span><span class="c1"/><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="k">const</span><span class="n">cv</span><span class="o">::</span><span class="n">Exception</span><span class="o">&amp;</span><span class="n">ex</span><span class="p">)</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Error: "</span><span class="o">&lt;&lt;</span><span class="n">ex</span><span class="p">.</span><span class="n">what</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="p">}</span><span class="n">std</span><span class="o">::</span><span class="n">clock_t</span><span class="n">end</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="kt">double</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">begin</span><span class="p">)</span><span class="o">/</span><span class="n">CLOCKS_PER_SEC</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="p">}</span></code></pre></td></tr></table></div></div><p><strong>编译和执行</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ g++ -o test test.cpp `pkg-config opencv --cflags --libs`
$ ./test</code></pre></td></tr></table></div></div><h2 id="faq">FAQ</h2><p>编译过程中如果出现如下错误，说明显卡不支持CUDA的最低要求</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">CUDA backend for DNN module requires CC 5.3 or higher. Please remove unsupported architectures from CUDA_ARCH_BIN option.</code></pre></td></tr></table></div></div><h2 id="安装或者编译错误">安装或者编译错误　　</h2><p>opencv_contrib-4.1.1/modules/cudaimgproc/src/cuda/bilateral_filter.cu:140: error: (-217:Gpu API call) invalid configuration argument in function &lsquo;bilateral_caller&rsquo;</p><p>cmake项目编译出现undefined reference to `cv::freetype::createFreeType2()　　</p><p><strong>参考</strong><br><a href="https://medium.com/repro-repo/install-cuda-10-1-and-cudnn-7-5-0-for-pytorch-on-ubuntu-18-04-lts-9b6124c44cc" target="_blank" rel="noopener noreffer">https://medium.com/repro-repo/install-cuda-10-1-and-cudnn-7-5-0-for-pytorch-on-ubuntu-18-04-lts-9b6124c44cc</a><br><a href="https://gist.github.com/raulqf/f42c718a658cddc16f9df07ecc627be7" target="_blank" rel="noopener noreffer">https://gist.github.com/raulqf/f42c718a658cddc16f9df07ecc627be7</a></p></description></item><item><title>requests库中的那些高级用法</title><link>https://justpic.org/post/2020/03/12/requsts-advance-usage/</link><pubDate>Thu, 12 Mar 2020 22:21:33 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/12/requsts-advance-usage/</guid><description><p>作为python中最通用的http工具库之一——requests，具有简洁、直观和全面的特点，一般来说，requests与python中的内置模块urllib3已经逐渐成为程序员处理HTTP请求的首选工具。</p><p>得益于requests简洁的API接口，在生产环境下得到了非常普遍的应用，即使在复杂的应用场景下，request的扩展性也非常好。如果你正在写一个API客户端或者网络爬虫，同时对断网情况比较棘手，那么下面所介绍的requests高级技巧可能会帮助你更好的进行程序调试。</p><h2 id="请求钩子">请求钩子</h2><p>应用第三方API时，需要验证应答内容是否合法，requests提供了raise_for_status()方法来判断应答内容的HTTP状态码是不是4xx或者5xx，表明请求产生了客户端或者服务器错误。</p><p>例如：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.github.com/user/repos?page=1'</span><span class="p">)</span><span class="c1"># 判断是否有无错误</span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span></code></pre></td></tr></table></div></div><p>每一次请求都调用raise_for_status会非常繁琐，requests非常贴心的提供了一个&rsquo;钩子(hook)&lsquo;接口（通过在请求过程的特定部分指定回调函数）。
下面请看案例代码，通过使用hook来确保每次服务应答后，raise_for_status能被调用。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">assert_status_hook</span><span class="o">=</span><span class="k">lambda</span><span class="n">response</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">:</span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">hooks</span><span class="p">[</span><span class="s1">'response'</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">assert_status_hook</span><span class="p">]</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.github.com/user/repos?page=1")</span><span class="o">></span><span class="n">HTTPError</span><span class="p">:</span><span class="mi">401</span><span class="n">Client</span><span class="n">Error</span><span class="p">:</span><span class="n">Unauthorized</span><span class="k">for</span><span class="n">url</span><span class="p">:</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">repos</span><span class="err">?</span><span class="n">page</span><span class="o">=</span><span class="mi">1</span></code></pre></td></tr></table></div></div><h2 id="设置基链接">设置基链接</h2><p>假设你只使用api.org上的一个api，你可能在每次调用时都要重复编写http协议和域名。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.org/list'</span><span class="p">)</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.org/list/3/item'</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>使用BaseUrlSession可以避免敲下这些重复的内容。
下面看案例代码，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">form</span><span class="n">requests_toolbelt</span><span class="kn">import</span><span class="nn">sessions</span><span class="n">http</span><span class="o">=</span><span class="n">sessions</span><span class="o">.</span><span class="n">BaseUrlSession</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="s2">"https://api.org"</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"/list"</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"/list/item"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p><strong>！注意requests_toolbelt没有默认包含在requests中的，使用时是需要额外安装的</strong></p><h2 id="设置默认超时">设置默认超时</h2><p>requests文档中推荐在生产环境下设置超时，如果你忘记设置超时，应用程序可能会当掉，尤其是在同步环境下，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://github.com/'</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>但是每次设置超时时间会非常繁琐，偶尔忘记设置超时会非常恼火。<img class="lazyload" src="/svg/loading.small.min.svg" data-sizes="auto" data-srcset="/images/posts/giphy.gif,  1.5x,  2x" data-src="" alt="giphy" title="giphy"/></p><p>使用Transport Adapters可以为所有的HTTP调用设置默认超时时间，当然使用后也是可以通过再定义覆盖默认配置，
下面看案例代码，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">requests.adapters</span><span class="kn">import</span><span class="n">HTTPAdapter</span><span class="n">DEFAULT_TIMEOUT</span><span class="o">=</span><span class="mi">5</span><span class="k">class</span><span class="nc">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">HTTPAdapter</span><span class="p">):</span><span class="k">def</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="o">=</span><span class="n">DEFAULT_TIMEOUT</span><span class="k">if</span><span class="s2">"timeout"</span><span class="ow">in</span><span class="n">kwargs</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="o">=</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="k">del</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="k">def</span><span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="n">timeout</span><span class="o">=</span><span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"timeout"</span><span class="p">)</span><span class="k">if</span><span class="n">timeout</span><span class="ow">is</span><span class="bp">None</span><span class="p">:</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="k">return</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="c1">#使用</span><span class="kn">import</span><span class="nn">requests</span><span class="n">http</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">adapter</span><span class="o">=</span><span class="n">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">2.5</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"http://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="c1">#使用默认配置</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.weibo.com'</span><span class="p">)</span><span class="c1">#覆盖默认配置</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.weibo.com'</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span></code></pre></td></tr></table></div></div><h2 id="失败后的重试">失败后的重试</h2><p>服务器当掉后，网络连接会变得拥塞或者有损，如果想要建立更具鲁棒性的系统，那么必须考虑网络连接失败，以及建立重试策略。
在Http客户端上添加重试策略是非常直接的，我们来创建一个HTTPAdapter，然后在adapter上添加策略</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">requests.adapter</span><span class="kn">import</span><span class="n">HTTPAdapter</span><span class="kn">from</span><span class="nn">requests.packages.urllib3.util.retry</span><span class="kn">import</span><span class="n">Retry</span><span class="n">retry_strategy</span><span class="o">=</span><span class="n">Retry</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">429</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">502</span><span class="p">,</span><span class="mi">503</span><span class="p">,</span><span class="mi">504</span><span class="p">],</span><span class="n">method_whitelist</span><span class="o">=</span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="s2">"GET"</span><span class="p">,</span><span class="s2">"OPTIONS"</span><span class="p">]</span><span class="p">)</span><span class="n">adapter</span><span class="o">=</span><span class="n">HTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retry_strategy</span><span class="p">)</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"http://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://en.wikipedia.org/w/api.php"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>默认的 Retry 类提供了健全的默认值，但是是高度可配置的，所以这里是我使用的最常见参数的纲要。
其中</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">total</span><span class="o">=</span><span class="mi">3</span></code></pre></td></tr></table></div></div><p>total代表重试的总次数，如果失败的请求或者重定向的次数超过这个数字，客户端将抛出 urllib3.exceptions.Maxretryerror 异常。通常3次重试就足够了。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">413</span><span class="p">,</span><span class="mi">429</span><span class="p">,</span><span class="mi">503</span><span class="p">]</span></code></pre></td></tr></table></div></div><p>要重试的 HTTP 响应代码。 您可能希望对常见的服务器错误(500、502、503、504)进行重试，因为服务器和反向代理并不总是遵循 HTTP 规范。 总是在超出429速率限制的情况下重试，因为默认情况下，urllib 库应该在失败请求时增量地退出。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">method_whitelist</span><span class="o">=</span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="s2">"GET"</span><span class="p">,</span><span class="s2">"PUT"</span><span class="p">,</span><span class="s2">"DELETE"</span><span class="p">,</span><span class="s2">"OPTIONS"</span><span class="p">,</span><span class="s2">"TRACE"</span><span class="p">]</span></code></pre></td></tr></table></div></div><p>要重试的 HTTP 方法。 默认情况下，这包括除 POST 以外的所有 HTTP 方法，因为 POST 可能导致新的插入。 修改此参数以包含 POST，因为大多数 i 处理的 API 不返回错误代码并在同一调用中执行插入操作。 如果他们这样做了，您可能应该发布一个 bug 报告。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">backoff_factor</span><span class="o">=</span><span class="mi">0</span></code></pre></td></tr></table></div></div><p>backoff_factor(退避因子)与失败的请求之间休眠的时间有关，其算法如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span><span class="n">backoff</span><span class="n">factor</span><span class="p">}</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="p">({</span><span class="n">number</span><span class="n">of</span><span class="n">total</span><span class="n">retries</span><span class="p">}</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span></code></pre></td></tr></table></div></div><p>例如，如果退避因子设置为:
1：连续睡眠：0.5，1，2，4，8，16，32，64，128，256
2：连续睡眠：1，2，4，8，16，32，64，128，256，512
10：连续睡眠：5，10，20，40，80，160，320，640，1280，2560
作为重试策略的合理默认实现，连续睡眠值是呈指数增长的，通过设置退避因子，可以决定每个睡眠乘以多少。这个值默认为0，表示不会设置截断二进制指数退避算法，重试将立即执行。</p><h3 id="结合超时和重试">结合超时和重试</h3><p>由于 HTTPAdapter 具有类比的特性，我们可以像下面这样将重试和超时结合起来:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">retries</span><span class="o">=</span><span class="n">Retry</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">backoff_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">429</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">502</span><span class="p">,</span><span class="mi">503</span><span class="p">,</span><span class="mi">504</span><span class="p">])</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retries</span><span class="p">))</span></code></pre></td></tr></table></div></div><h2 id="调试http请求">调试HTTP请求</h2><p>有时候请求会失败，而你却不知道为什么。 记录请求和响应可以帮助您了解故障。 有两种方法可以做到这一点——要么使用内置的调试日志记录设置，要么使用请求钩子。</p><h3 id="打印http头文件">打印HTTP头文件</h3><p>更改大于0的日志记录调试级别将记录响应 HTTP 报头。 这是最简单的选项，但它不允许您查看 HTTP 请求或响应体。 如果您处理的 API 返回一个不适合日志记录或包含二进制内容的大体有效负载，那么它是有用的。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="kn">import</span><span class="nn">http</span><span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="o">.</span><span class="n">debuglevel</span><span class="o">=</span><span class="mi">1</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://www.google.com/"</span><span class="p">)</span><span class="c1"># Output</span><span class="n">send</span><span class="p">:</span><span class="sa">b</span><span class="s1">'GET / HTTP/1.1</span><span class="se">\r\n</span><span class="s1">Host: www.google.com</span><span class="se">\r\n</span><span class="s1">User-Agent: python-requests/2.22.0</span><span class="se">\r\n</span><span class="s1">Accept-Encoding: gzip, deflate</span><span class="se">\r\n</span><span class="s1">Accept: */*</span><span class="se">\r\n</span><span class="s1">Connection: keep-alive</span><span class="se">\r\n\r\n</span><span class="s1">'</span><span class="n">reply</span><span class="p">:</span><span class="s1">'HTTP/1.1 200 OK</span><span class="se">\r\n</span><span class="s1">'</span><span class="n">header</span><span class="p">:</span><span class="n">Date</span><span class="p">:</span><span class="n">Fri</span><span class="p">,</span><span class="mi">28</span><span class="n">Feb</span><span class="mi">2020</span><span class="mi">12</span><span class="p">:</span><span class="mi">13</span><span class="p">:</span><span class="mi">26</span><span class="n">GMT</span><span class="n">header</span><span class="p">:</span><span class="n">Expires</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="n">header</span><span class="p">:</span><span class="n">Cache</span><span class="o">-</span><span class="n">Control</span><span class="p">:</span><span class="n">private</span><span class="p">,</span><span class="nb">max</span><span class="o">-</span><span class="n">age</span><span class="o">=</span><span class="mi">0</span></code></pre></td></tr></table></div></div><h3 id="打印所有">打印所有</h3><p>如果您想记录整个 HTTP 生命周期，包括请求和响应的文本表示，那么您可以使用请求钩子和请求工具自带的转储组件。
在处理基于 REST 的 API 时，我更喜欢这个选项，因为它不会返回非常大的响应。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="kn">from</span><span class="nn">requests_toolbelt.utils</span><span class="kn">import</span><span class="n">dump</span><span class="k">def</span><span class="nf">logging_hook</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="n">data</span><span class="o">=</span><span class="n">dump</span><span class="o">.</span><span class="n">dump_all</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">'utf-8'</span><span class="p">))</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">hooks</span><span class="p">[</span><span class="s2">"response"</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">logging_hook</span><span class="p">]</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://api.openaq.org/v1/cities"</span><span class="p">,</span><span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"BA"</span><span class="p">})</span><span class="c1"># Output</span><span class="o">&lt;</span><span class="n">GET</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">cities</span><span class="err">?</span><span class="n">country</span><span class="o">=</span><span class="n">BA</span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span><span class="o">&lt;</span><span class="n">Host</span><span class="p">:</span><span class="n">api</span><span class="o">.</span><span class="n">openaq</span><span class="o">.</span><span class="n">org</span><span class="o">></span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span><span class="mi">200</span><span class="n">OK</span><span class="o">></span><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span><span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="p">;</span><span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">></span><span class="n">Transfer</span><span class="o">-</span><span class="n">Encoding</span><span class="p">:</span><span class="n">chunked</span><span class="o">></span><span class="n">Connection</span><span class="p">:</span><span class="n">keep</span><span class="o">-</span><span class="n">alive</span><span class="o">></span><span class="p">{</span><span class="s2">"meta"</span><span class="p">:{</span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"openaq-api"</span><span class="p">,</span><span class="s2">"license"</span><span class="p">:</span><span class="s2">"CC BY 4.0"</span><span class="p">,</span><span class="s2">"website"</span><span class="p">:</span><span class="s2">"https://docs.openaq.org/"</span><span class="p">,</span><span class="s2">"page"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s2">"limit"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="s2">"found"</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span><span class="s2">"results"</span><span class="p">:[</span><span class="p">{</span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"BA"</span><span class="p">,</span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Goražde"</span><span class="p">,</span><span class="s2">"city"</span><span class="p">:</span><span class="s2">"Goražde"</span><span class="p">,</span><span class="s2">"count"</span><span class="p">:</span><span class="mi">70797</span><span class="p">,</span><span class="s2">"locations"</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span><span class="p">]</span><span class="p">}</span></code></pre></td></tr></table></div></div><h2 id="测试和模拟请求">测试和模拟请求</h2><p>在开发中使用第三方 API 会引入一个痛点——很难进行单元测试。 为减轻这种痛苦，Sentry 的工程师在开发过程中编写了一个模拟请求的库。</p><blockquote><p>不是将 HTTP 响应发送给服务器 getsentry / responses，而是截取 HTTP 请求，在应答时，测试过程中添加预定义的响应内容。</p></blockquote><p>下面请看案例代码</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">unittest</span><span class="kn">import</span><span class="nn">requests</span><span class="kn">import</span><span class="nn">responses</span><span class="k">class</span><span class="nc">TestAPI</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="nd">@responses.activate</span><span class="c1"># intercept HTTP calls within this method</span><span class="k">def</span><span class="nf">test_simple</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">response_data</span><span class="o">=</span><span class="p">{</span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"ch_1GH8so2eZvKYlo2CSMeAfRqt"</span><span class="p">,</span><span class="s2">"object"</span><span class="p">:</span><span class="s2">"charge"</span><span class="p">,</span><span class="s2">"customer"</span><span class="p">:</span><span class="p">{</span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"cu_1GGwoc2eZvKYlo2CL2m31GRn"</span><span class="p">,</span><span class="s2">"object"</span><span class="p">:</span><span class="s2">"customer"</span><span class="p">},</span><span class="p">}</span><span class="c1"># mock the Stripe API</span><span class="n">responses</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">responses</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">,</span><span class="n">json</span><span class="o">=</span><span class="n">response_data</span><span class="p">,</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">)</span><span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">(),</span><span class="n">response_data</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>如果发出的 HTTP 请求与模拟响应不匹配，则会抛出 ConnectionError。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">TestAPI</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="nd">@responses.activate</span><span class="k">def</span><span class="nf">test_simple</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">responses</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">responses</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://invalid-request.com"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>输出：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">ConnectionError</span><span class="p">:</span><span class="n">Connection</span><span class="n">refused</span><span class="n">by</span><span class="n">Responses</span><span class="o">-</span><span class="n">the</span><span class="n">call</span><span class="n">doesn</span><span class="s1">'t match any registered mock.</span><span class="n">Request</span><span class="p">:</span><span class="o">-</span><span class="n">GET</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">invalid</span><span class="o">-</span><span class="n">request</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">Available</span><span class="n">matches</span><span class="p">:</span><span class="o">-</span><span class="n">GET</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">stripe</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">charges</span></code></pre></td></tr></table></div></div><h2 id="模仿浏览器行为">模仿浏览器行为</h2><p>如果你已经写了足够多的网络爬虫代码，你将会注意到某些网站会根据浏览器或者请求方式返回不同的 HTML内容。 有时这是一种反抓取措施，但通常服务器会进行用户代理嗅探，以找出最适合设备的内容(例如桌面或移动设备)。
如果你想返回与浏览器显示的内容相同的内容，你可以使用 Firefox 或 Chrome 发送的内容覆盖默认的 User-Agent 头请求集。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"User-Agent"</span><span class="p">:</span><span class="s2">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0"</span><span class="p">})</span></code></pre></td></tr></table></div></div><hr><p>参考：</p><ul><li><a href="https://hodovi.ch/blog/advanced-usage-python-requests-timeouts-retries-hooks/" target="_blank" rel="noopener noreffer">Advanced usage of Python requests - timeouts, retries, hooks</a></li></ul></description></item><item><title>Jupyter最佳实践</title><link>https://justpic.org/post/2020/03/09/jupyter-best-practice/</link><pubDate>Mon, 09 Mar 2020 23:30:29 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/09/jupyter-best-practice/</guid><description><p>广受各大企业赞助的<a href="https://jupyter.org/about" target="_blank" rel="noopener noreffer">jupyter团队</a>
所开发的jupyter系列产品(主要包括jupyter notebook、jupyterlab和jupyterhub)，在数据科学领域变得越来越火热，依托python强大的语言生态，得益于其良好的扩展性和友好的用户交互，jupyter逐渐成为数据分析可视化的首选开源工具之一，下面将对数据分析实践过程中针对jupyter的调研分析进行小结.如果你正在使用python语言进行相关数据分析，本文所记录的jupyter相关实践可能对你会有所帮助。</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" type="button" value="点击验证" onclick="_click_handler(this)"/></div><div class="hugo-encryptor-cipher-text" data-password="123345" style="display: none;"><span style="display: none;">--- DON'T MODIFY THIS LINE ---</span></div></div><hr><blockquote><p>本文将主要从jupyter产品介绍、产品（jupyter notebook、jupyter lab和jupyterhub）的安装试用、jupyter 扩展优化、以及jupyter竞品分析等四大方面对jupyter的实践进行一个简短的介绍和回顾：</p></blockquote><h2 id="jupyter产品介绍">jupyter产品介绍：</h2><p>根据jupyter官方网站，jupyter产品主要包括jupyter notebook、jupyter lab和jupyterhub三款产品，根据文章<code>jupyter notebook、jupyterlab与jupyterhub的区别与联系</code><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>,三者的联系和区别如下：</p><ol><li>jupyter notebook提供了一个交互友好的类webIDE环境，但Jupyter Notebook 是传统的单体服务架构模式, 缺少多用户管理和访问认证等方面的功能, 无法直接部署于计算集群上, 难以充分利用和调度计算中心的计算资源 。</li><li>jupyter lab提供了单用户管理和认证，没有提供独立的工作空间，与jupyter notebook相比，功能更为丰富。</li><li>jupyter hub提供了多用户管理和认证，支持OAuth协议，为用户提供了独立的工作空间，工作内容可以私有不共享。</li></ol><p>在了解了jupyter系列产品后，就可以进行产品的安装和使用了。当然你也可以参考这些文章2<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>和3<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>、4<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>、5<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>来快速入门jupyter的使用.</p><h2 id="产品安装使用">产品安装使用</h2><h3 id="安装">安装</h3><blockquote><p>根据以上的产品介绍，可以根据自己的需求选择安装jupyter notebook、jupyter lab还是jupyterhub。具体参考建议如下：</p><ol><li>个人本地使用，安装快速方便&ndash;jupyter notebook</li><li>个人使用，可能会远程操作，需要额外的安装工作&ndash;jupyter lab</li><li>小型团队使用，可能需要额外的运维工作&ndash; jupyter hub</li></ol></blockquote><p><strong>安装jupyter notebook</strong><br>
jupyter notebook目前已经包含在Anaconda安装包中，随Anaconda将一同安装，不需要额外的安装操作，如果你想了解更多jupyter notebook安装细节，可以参考文章<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>和文章<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>。</p><p><strong>安装jupyter lab</strong><br>
jupyter lab可以通过pip，conda命令(Anaconda环境)作为jupyter notebook的扩展进行选装。
安装命令如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">pip install jupyterlab<span class="c1">#或者</span>
conda install -c conda-forge jupyterlab</code></pre></td></tr></table></div></div><p>使用过程中，jupyterlab的作用更像一个功能强大的webshell，除支持文件上传，命令行等操作外，能够更直观地管理jupyter notebook的其他扩展。</p><p><strong>安装jupyterhub</strong><br>
jupyterhub的docker化安装步骤如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#step1.创建共享目录</span><span class="nv">$mkdir</span> -p<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/jupyterhub<span class="nv">$mkdir</span> -p<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/home<span class="c1">#step2.启动镜像</span><span class="c1">#docker run -p 8000:8000 -d --name jupyterhub -v /opt/jupyterhub/jupyterhub:/srv/jupyterhub -v /opt/jupyterhub/home:/home --restart=always jupyterhub/jupyterhub jupyterhub</span>
docker run -p 8000:8000 -d --name jupyterhub -v<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/jupyterhub:/srv/jupyterhub -v<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/home:/home jupyterhub/jupyterhub jupyterhub<span class="c1">#step3.进入到容器内操作</span>
docker<span class="nb">exec</span> -it jupyterhub bash
chmod -R<span class="m">777</span> /home<span class="c1">#step4.添加用户和设置密码</span>
useradd jupyterhub
passwd jupyterhub<span class="c1">#step5.浏览器访问测试</span>
http://<span class="o">{</span>yourip<span class="o">}</span>:8000
!替换yourip为本机ip地址</code></pre></td></tr></table></div></div><h3 id="使用">使用</h3><p><strong>启动jupyter</strong></p><ol><li>启动jupyter notebook<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">jupyter notebook<span class="c1"># 更多命令可额外输入--help进行查看</span></code></pre></td></tr></table></div></div></li><li>启动jupyter lab<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">jupyter lab<span class="c1"># 更多命令可额外输入--help进行查看</span></code></pre></td></tr></table></div></div></li></ol><p><strong>excel表格处理</strong><br>
jupyternotebook中使用pandas可以方便的处理excel文件，简单的差集、并集、交集运算使用几句简单的代码即可完成。<br><strong>数据可视化分析</strong><br>
结合pandas工具包可以非常方便的进行数据的基础分析，使用plot工具包可以完成交互性比较友好的动态数据分析图表。</p><h2 id="jupyter扩展">jupyter扩展</h2><p>为了提升jupyter的使用体验，目前已经有非常多的jupyter扩展可供使用，其范围除了优化其本身可视化交互体验之外，还涵盖了排版、多语言支持等功能。<br>
文章8<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup>介绍了常用的99种jupyter扩展，
文章9<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup>中所介绍的扩展主要围绕人工智能（AI）进行展开，
文章10<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup>介绍了提升jupyter使用环境体验的相关实践，
文章11<sup id="fnref:11"><a href="#fn:11" class="footnote-ref" role="doc-noteref">11</a></sup>介绍了扩展jupyter的99种方法，
文章12<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup>介绍了生成pages的方法，
文章13<sup id="fnref:13"><a href="#fn:13" class="footnote-ref" role="doc-noteref">13</a></sup>中通过低代码方式使用jupyter notebook，进一步降低了jupyter的难度、提高了jupyter的交互友好度。
文章14<sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup>主要介绍了jupyter notebook的基础架构，如果需要进行进一步应用开发集成，对其基础架构了解是必须的。</p><p><strong>pyspark集成</strong><br>
大数据相关技术的发展，jupyter支持与spark进行相关集成</p><h3 id="技术架构分析">技术架构分析</h3><p>jupyter 使用了较新的web技术（Websocket等）来保证用户交互的友好性，提供了一种混合的编辑方式, 将程序
代码运行、文字图表编辑等功能糅合在同一电子笔记中, 打破了两者之间的隔离界限.fastpage<sup id="fnref:12"><a href="#fn:12" class="footnote-ref" role="doc-noteref">12</a></sup>介绍了将jupyternotebook内容导出为page，可以直接应用于博客或者出版，进一步提高了jupyter的可扩展性。为了集成和二次开发jupyter，通过文章<code>技术架构分析</code><sup id="fnref:14"><a href="#fn:14" class="footnote-ref" role="doc-noteref">14</a></sup>中对jupyter的技术架构进行简单的了解，得出如下jupyter架构图，<br><img class="lazyload" src="/svg/loading.small.min.svg" data-sizes="auto" data-srcset="/images/posts/jupyter-arch.jpg,  1.5x,  2x" data-src="" alt="架构图" title="架构图"/></p><h2 id="jupyter竞品分析">jupyter竞品分析</h2><p>通过搜索，Netflix发布的Polynote<sup id="fnref:15"><a href="#fn:15" class="footnote-ref" role="doc-noteref">15</a></sup>有可能成为jupyter的竞品，除此之外，阿里巴巴、kaggle以及大多数据竞赛平台也开始提供类似jupyter的数据分析平台以方便开发者快速使用。</p><p>如果你有更好的想法和建议，欢迎留言。</p><hr><p><strong>参考</strong></p><section class="footnotes" role="doc-endnotes"><hr><ol><li id="fn:1" role="doc-endnote"><p><a href="https://www.imooc.com/article/300868" target="_blank" rel="noopener noreffer">jupyter notebook、jupyterlab与jupyterhub的区别与联系</a><a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:2" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/O3vXXaqG9-E7mRT-_wARWw" target="_blank" rel="noopener noreffer">数据科学和机器学习，jupyternotebook入门指南</a><a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:3" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/aJRVh7BWOMq4KCoBMtLGGw" target="_blank" rel="noopener noreffer">快速学习jupyternotebook</a><a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:4" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/24B1TSmMPYphXI-0ij3fJQ" target="_blank" rel="noopener noreffer">jupyter notebook数据格式解析</a><a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:5" role="doc-endnote"><p><a href="https://justpic.org/post/latex-math-symbol/" target="_blank" rel="noopener noreffer">latex数学符号</a><a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:6" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/PJmVJ-pESb6bkLf9Nq-A1Q" target="_blank" rel="noopener noreffer">十分钟搭建你的jupyternotebook服务器</a><a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:7" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/1nTP7uLAJuOYW-WXVE_-cg" target="_blank" rel="noopener noreffer">使用jupyternotebook进行远程炼丹</a><a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:8" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/BSim0lMo0T0JiunnKqHzNg" target="_blank" rel="noopener noreffer">让jupyter更强大的99中武器</a><a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:9" role="doc-endnote"><p><a href="https://github.com/elyra-ai/elyra" target="_blank" rel="noopener noreffer">Elyra：基于AI技术的JupyterLab实用扩展集</a><a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:10" role="doc-endnote"><p><a href="https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Felevate-your-jupyter-notebook-environment-experience-9bdd1101aa54" target="_blank" rel="noopener noreffer">Elevate Your Jupyter Notebook Environment Experience</a><a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:11" role="doc-endnote"><p><a href="https://python.freelycode.com/contribution/detail/1632" target="_blank" rel="noopener noreffer">扩展Jupyter生态系统的99种方法</a><a href="#fnref:11" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:12" role="doc-endnote"><p><a href="https://fastpages.fast.ai/fastpages/jupyter/2020/02/21/introducing-fastpages.html" target="_blank" rel="noopener noreffer">jupyter生成pages</a><a href="#fnref:12" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:13" role="doc-endnote"><p><a href="https://github.com/herqooly/herqooly" target="_blank" rel="noopener noreffer">低代码方式使用jupyter</a><a href="#fnref:13" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:14" role="doc-endnote"><p><a href="https://blog.just4fun.site/post/%E6%9E%B6%E6%9E%84/jupyter-notebook-architecture/" target="_blank" rel="noopener noreffer">jupyter notebook架构分析</a><a href="#fnref:14" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li><li id="fn:15" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/bwtENwhO7EFQqW5XJduJ-A" target="_blank" rel="noopener noreffer">还有比 Jupyter 更好用的工具</a><a href="#fnref:15" class="footnote-backref" role="doc-backlink">&#8617;&#xfe0e;</a></p></li></ol></section></description></item><item><title>什么是好的软件工程原则</title><link>https://justpic.org/post/2020/03/08/software-engineering-best-rules/</link><pubDate>Sun, 08 Mar 2020 15:23:56 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/08/software-engineering-best-rules/</guid><description><p>软件开发原则是一组具体的规则和建议，如果工程师想要编写工整、清晰和可维护的代码，那么他们需要在程序实现过程中应该遵循一些规则和建议。 没有魔杖可以把变量、类和函数的混合物变成完美的代码，但是有一些技巧和提示可以帮助工程师评判是否在做正确的事情。</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" type="button" value="点击验证" onclick="_click_handler(this)"/></div><div class="hugo-encryptor-cipher-text" data-password="123345" style="display: none;"><span style="display: none;">--- DON'T MODIFY THIS LINE ---</span><p><a href="http://www.gaoxiaojob.com/" target="_blank" rel="noopener noreffer">高校人才网</a><br><a href="http://www.gaoxiaojob.com/zhaopin/diqu/sichuan/" target="_blank" rel="noopener noreffer">四川的</a><br><a href="http://www.hbggzp.cn/JobWork/PubjobSearch?znid=010000&amp;key=" target="_blank" rel="noopener noreffer">湖北的</a></p></div></div><blockquote><p>让我们来看看这些基本的建议。 下面的一些原则是特定于 python 的，但大多数不是。</p></blockquote><h2 id="量两次切一次measure-twice-and-cut-once">量两次，切一次(Measure twice and cut once)</h2><p>如果你只能从这篇文章中学到一个原则且最重要的一个，那么就是这个。 开发人员，架构师和经理人经常因为个人情绪、以及其他问题而难以集中注意力。 就工程师来说，这个原则意味着选择正确的解决方案，选择正确的方法来解决问题，选择正确的工具来解决问题，对建立的解决方案必须充满信心。 选择这里意味着投入一些思考，找到必要的资源，组建合适的团队，思考设计，思考方法，设定任务，控制结果，并为此承担责任。 这就是“活在当下”。 我认为我自己还没有准备好用正确的词汇来描述它。</p><h2 id="不要重复自己dont-repeat-yourself">不要重复自己(Don&rsquo;t Repeat Yourself)</h2><p>这是一个相当简单但非常有用的原则，它说在不同的地方重复同样的事情是非常糟糕的。 首先，它涉及到进一步支持和修改代码的必要性。 如果某个代码片段在程序中的几个地方被复制，那么很有可能出现两种灾难性的情况:</p><ol><li>当对源代码进行哪怕是很小的改动时，您需要在几个地方更改相同的代码。 这需要额外的时间、精力和注意力，而这件事件通常也非常不容易。</li><li>第一项紧随第二项。 团队中的其他开发人员可能会意外地错过其中一个更改(只合并了控制系统中的分支) ，并将面对应用程序中随后出现的一系列错误。 这些 bug 可能会让您感到沮丧，因为您已经听说这样的 bug 似乎已经被修复了。</li></ol><p>在这方面，有一个建议ーー如果在清单中发现任何代码超过两次，则应以单独的方式来处置。 这是通用做法。 事实上，即使再次遇到重复的bug，您也应该考虑创建一个单独的方法。</p><h2 id="奥卡姆剃刀occams-razor">奥卡姆剃刀(Occam’s Razor)</h2><p>这是一个非常普遍的想法，它来自于哲学编程。 这个原则得名于奥克姆的英国修道士威廉。 这一原则表明: ”没有必要，不得增加实体”。 在工程学中，这一原则被解释为: 没有必要创建不必要的实体。 因此，首先考虑添加另一个方法 / 类 / 工具 / 流程等的好处不见得总是一个好主意。 毕竟，如果您添加了另一个方法 / 类 / 工具 / 流程等等，除了增加复杂性之外，您没有得到任何其他好处，那还有什么意义呢？</p><h2 id="保持足够简单keep-it-simple-stupid-">保持足够简单(Keep It Simple Stupid )</h2><p>这是一个与上面非常类似的原则，但它的含义略有不同。 这个原则要求代码必须尽可能简单，不能有复杂的结构，否则会使代码的调试和维护复杂化。 此外，对于另一个程序员来说，理解代码的逻辑将会更加困难，这反过来也将需要额外的时间和精力。 这就是为什么您应该始终尝试使用简单的构造来尽可能多地解决问题，而不需要使用大量的分支、深层嵌套和过度重载的类结构。 通过这样做，你将使自己和同事的生活更加轻松，因为复杂性会产生错误。 记住 Peter Hintiens 说过的话: “简单永远比功能好”。</p><h2 id="你不会需要它you-arent-gonna-need-it-">你不会需要它（You Aren’t Gonna Need It ）</h2><p>这是许多程序员都会遇到的问题。 从项目一开始就希望立即实现所有必要的(有时甚至是不必要的)功能。 也就是说，当开发人员从一开始就将所有可能的方法添加到类中并实现它们时，甚至可能在未来永远不会使用它们。 因此，根据这个建议，首先，只实现您需要的东西，然后，如果必要的话，再扩展相应功能。 这样，您就可以节省调试代码的工作量、时间以及精力，而实际上这些代码却并不需要。</p><h2 id="前期大设计big-design-up-front">前期大设计(Big Design Up Front)</h2><p>在开始开发功能之前，您应该首先考虑应用程序架构，并将整个系统设计为足够小的细节，然后才按照预定义的计划进行实现。 原则是有存在的权利的，但是最近，它受到了相当多的批评。 这首先与设计和制定过程中的方案陈旧有关。 在这方面，仍然有必要进行后续的修改。 但它也具有不可否认的优点，在正确的设计中，可以大大降低进一步调试和纠错的成本。 此外，这样的信息系统，作为一个规则，更简洁的架构是正确的。</p><h2 id="避免过早优化avoid-premature-optimization">避免过早优化(Avoid Premature Optimization)</h2><blockquote><p>“过早的优化是编程中所有问题(或者至少是大部分问题)的根源” &ndash; Donald Knuth</p></blockquote><p>优化是加快程序运行速度，降低系统资源消耗的一个非常正确和必要的过程。 但是每件事都有它自己的时机。 如果在开发的早期阶段进行优化，可能弊大于利。 首先，它与这样一个事实相关，即优化代码的开发需要更多的时间和精力用于开发和支持。 在这种情况下，您通常必须首先检查所选择的开发方法的正确性。 这就是为什么一开始使用一个简单但不是最优的方法更有利可图。 稍后，在估计这种方法会降低应用程序的工作速度时，可以使用一种更快或更少资源密集型的算法。 此外，只要你最初实现了最优的算法，需求就可能改变，代码就会变成垃圾。 因此，没有必要在过早的优化上浪费时间。</p><h2 id="最小惊奇原则principle-of-least-astonishment">最小惊奇原则(Principle Of Least Astonishment)</h2><p>这个原则意味着您的代码应该是直观和明显的，并且在检查代码时不会让其他开发人员感到惊讶。 例如，如果这个方法被称为“ making cookies” ，但是结果是得到了土豆，那么这段代码就是不好的(很明显)。 此外，如果无法避免副作用，应尽量避免副作用，并将副作用记录在案。</p><h2 id="solid">S.O.L.I.D.</h2><p>“SOLID”实际上是一组面向对象设计原则。 “ SOLID”中的每个字母代表一个原则，它们是:</p><ol><li><u>单一责任（Single responsibility）:</u><br>
声明每个模块或类应该对软件提供的功能的一个部分负责，并且这个责任应该完全由类封装;</li><li><u>开闭原则（Open-closed):</u><br>
声明软件实体(类、模块、功能等)应该对扩展开放，但对修改关闭;</li><li><u>李斯科夫替换(Liskov substitution)</u><br>
声明继承的类应该补充而不是替换基类的行为;</li><li><u>界面隔离(Interface segregation)</u><br>
声明任何客户端都不应该被迫依赖于它不使用的方法;</li><li><u>依赖反转(Dependency inversion)</u><br>
程序员应该在接口层而不是在实现层工作</li></ol><p>当一起应用时，这些原则可以帮助开发人员创建易于维护和扩展的代码。</p><h2 id="demeter定律">Demeter定律</h2><p>该原则的基本思想是在类之间划分职责区域，并将逻辑封装在类、方法或结构中。 可以从这一原则中区分出若干建议:</p><ol><li>类或实体应该是独立的</li><li>你应该尝试减少不同类之间的连接数量(所谓的coupling 耦合)</li><li>关联的类必须在一个 module / package / 目录中(也称为cohesion 凝聚力.）</li></ol><p>遵循这些原则，应用程序变得更加灵活、易于理解和易于维护。</p><h2 id="总结">总结</h2><p>同胞们，让我们成为伟大的工程师吧！ 让我们考虑一下设计和构建健壮且实现良好的系统，而不是成长中的有机怪物。 列举的原则在本质上是高度相关和联系的。 当然，我没有创造它们，但是一个小小的提醒也不会伤害到我，至少我是健忘的。</p><hr><h3 id="参考">参考：</h3><ul><li><a href="https://luminousmen.com/post/what-are-the-best-engineering-principles" target="_blank" rel="noopener noreffer">What Are The Best Software Engineering Principles?</a></li><li><a href="https://mp.weixin.qq.com/s/2EJrdmOt_Of-o2IrtK9wlQ" target="_blank" rel="noopener noreffer">工程效能提升</a></li><li><a href="https://dev.tasubo.com/2020/02/how-my-software-development-has-changed-in-the-last-10-year-part-2.html" target="_blank" rel="noopener noreffer">我的十年</a></li></ul></description></item><item><title>Markdown写作指南</title><link>https://justpic.org/post/2020/03/04/markdown-writing-rules/</link><pubDate>Wed, 04 Mar 2020 22:18:02 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/04/markdown-writing-rules/</guid><description><p>Markdown是一种轻量级标记语言。你不需要关心标题多大字号，段前距多少，列表缩进几格，只要在纯文本前后增加一些标记符号（例如 # - * >)，就能轻松写出工整精美的文章。与富文本编辑器（例如Word）是通过点击图形化的功能按钮来实现排版，而Markdown则是通过标记字符去赋予文字不同格式。易读易写（easy-to-read and easy-to-write),让任何与文字打交道的人专注于写作，不用操心排版，这一点类似vi编辑器功能。</p><p>本文主要从Markdown主要特点、入门语法、写作结构大纲、应用场景四个方面对Markdown写作指南进行详细介绍。</p><h2 id="markdown-主要特点">Markdown 主要特点</h2><p>Markdown主要有以下三大特点：<br><strong>特点1. 格式统一</strong><br>
同一份Word文档，在</p><ul><li>不同的设备：Windows、macOS、Android、iOS</li><li>不同的版本：旧版Word、新版Word</li><li>不同的软件：Microsoft Office、WPS
可能显示不一样的效果。而Markdown可以Write once,export everywhere。不管在电脑上，还是手机上，用Markdwon写出来的文章都能带来舒适、统一、美好的阅读体验。</li></ul><p><strong>特点2. 向外兼容</strong><br>
可以导出PDF、Word、HTML、图片等格式分享给没有安装Markdown编辑器的人，强烈推荐使用pandoc工具进行markdown文档的转换。</p><p><strong>特点3. 直接支持html,css</strong><br>
Markdown是直接支持在markdown文档中使用html和css语言的：</p><ul><li>语法：</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;a href="#jump_1">来个页内跳转&lt;/a>，跳转到文未的：`&lt;a id="jump_1">我是页内跳转到的位置&lt;/a>` ,对应：`id="jump_1"`
&lt;span style="color: #5bdaed; ">先给点颜色你看看&lt;/span>
&lt;span style="color: #AE87FA; ">再给点颜色你看看&lt;/span>
&lt;span style="font-size:1.3em;">试试改变字体大小&lt;/span>
&lt;span style="font-size:1.3em;font-weight: bold;">改变字体大小，再来个粗体又如何？&lt;/span>
&lt;p style="text-align:center">
试试内容居中
&lt;/p>
&lt;p style="text-align:right">
那内容居右呢？
&lt;/p>
&lt;p style="text-align:center;color:#1e819e;font-size:1.3em;font-weight: bold;">
来个综合的试试
&lt;br/>
第二行
&lt;/p>
***
&lt;a id="jump_1">我是页内跳转到的位置&lt;/a></code></pre></td></tr></table></div></div><ul><li><p>预览效果：<br><a href="#jump_1">来个页内跳转</a>，跳转到文未的：<code>&lt;a id="jump_1">我是页内跳转到的位置&lt;/a></code> ,对应：<code>id="jump_1"</code><span style="color: #5bdaed; ">先给点颜色你看看</span><span style="color: #AE87FA; ">再给点颜色你看看</span><span style="font-size:1.3em;">试试改变字体大小</span><span style="font-size:1.3em;font-weight: bold;">改变字体大小，再来个粗体又如何？</span></p><p style="text-align:center">
试试内容居中</p><p style="text-align:right">
那内容居右呢？</p><p style="text-align:center;color:#1e819e;font-size:1.3em;font-weight: bold;">
来个综合的试试<br/>
第二行</p><hr><p><a id="jump_1">我是页内跳转到的位置</a></p></li></ul><h2 id="markdown入门语法">Markdown入门语法</h2><p><strong>1.标题、列表、引用</strong></p><table><thead><tr><th>标记符号</th><th>标记结果</th></tr></thead><tbody><tr><td><code># + 空格 + 文本</code></td><td>一级标题</td></tr><tr><td><code>##+空格+文本</code></td><td>二级标题</td></tr><tr><td><code>###+空格+文本</code></td><td>三级标题</td></tr><tr><td><code>-+空格+文本</code></td><td>无序列表</td></tr><tr><td><code>1+.+空格+文本</code></td><td>有序列表</td></tr><tr><td><code>>+空格+文本</code></td><td>引用</td></tr></tbody></table><ul><li><p>标题<br>
支持6种大小的标题，分别对应<code>#</code>,<code>##</code>,<code>###</code>,<code>####</code>,<code>#####</code>,<code>######</code>，和样式文件中的<code>h1,...,h6</code>如：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="err">#####</span><span class="nx">H5</span><span class="err">######</span><span class="nx">H6</span><span class="err">####</span><span class="nx">行内代码</span></code></pre></td></tr></table></div></div></li><li><p>列表</p><ul><li>无序列表<br>
建议使用-作为无须列表，型号*可能和加粗和斜体符号产生混淆，加号+不流行。</li><li>有序列表<br>
语法一（手动排序）：<code>1+.+空格+文本</code><br>
1. 斜月沉沉藏海雾，碣石潇湘无限路。
2. 不知乘月几人归，落月摇情满江树。
3. 春江潮水连海平，海上明月共潮生。<br>
语法二（自动排序）<br>
对于比较长的、可能会修改的列表（尤其是很长的嵌套列表），请使用<code>懒人编号法</code>。纵使有新的列表项<code>插队</code>,把序号弄乱了也没关系，Markdown编辑器自动会对序号进行纠错。<br>
语法说明：<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">1. Foo.
1. Bar.
1. Foofoo.
1. Barbar.
1. Gargar
1. Baz.</code></pre></td></tr></table></div></div><p>预览效果：</p><ol><li>Foo.</li><li>Bar.<ol><li>Foofoo.</li><li>Barbar.</li><li>Gargar</li></ol></li><li>Baz.</li></ol></li><li>嵌套列表<br>
缩进2~4个空格或一个Tab（推荐），可以嵌套列表<br>
示例一<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">1. 不知乘月几人归，落月摇情满江树。
- 与君吟弄风月，端不负平生。
- 对秋深，离恨苦，数夜满庭风雨。
- 五月畬田收火米，三更津吏报潮鸡。
2. 人姝丽，粉香吹下，夜寒风细。
- 弓弦抱汉月，马足践胡尘。
- 寒月悲笳，万里西风瀚海沙。
- 东堂坐见山，云风相吹嘘。</code></pre></td></tr></table></div></div><p>预览效果：</p><ol><li>不知乘月几人归，落月摇情满江树。<ul><li>与君吟弄风月，端不负平生。</li><li>对秋深，离恨苦，数夜满庭风雨。</li><li>五月畬田收火米，三更津吏报潮鸡。</li></ul></li><li>人姝丽，粉香吹下，夜寒风细。<ul><li>弓弦抱汉月，马足践胡尘。</li><li>寒月悲笳，万里西风瀚海沙。</li><li>东堂坐见山，云风相吹嘘。</li></ul></li></ol></li></ul></li><li><p>引用
在每一行使用<code>></code>符号，包括换行的句子</p></li></ul><p><strong>2.特殊说明的文字</strong></p><table><thead><tr><th>标记符号</th><th>标记结果</th></tr></thead><tbody><tr><td><code>**+加粗+**</code></td><td><strong>加粗</strong></td></tr><tr><td><code>*+斜体+*</code></td><td><em>斜体</em></td></tr><tr><td><code>~~+删除线+~~</code></td><td><del>删除线</del></td></tr></tbody></table><p><strong>3.任务列表</strong><br>
Markdown支持任务列表<br>
语法：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">- [ ] 纯牛奶
- [x] 西瓜
- [ ] 鸡蛋
- [ ] 保鲜膜
- [ ] 猪肉</code></pre></td></tr></table></div></div><p>预览效果：</p><ul><li><input disabled="" type="checkbox"> 纯牛奶</li><li><input checked="" disabled="" type="checkbox"> 西瓜</li><li><input disabled="" type="checkbox"> 鸡蛋</li><li><input disabled="" type="checkbox"> 保鲜膜</li><li><input disabled="" type="checkbox"> 猪肉</li></ul><p><strong>4.表格</strong></p><p>语法：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">|左对齐|居中对齐|右对齐|
|:---|:---:|----:|
|**加粗**|[插入连接]（https://)|5.7|
|`换行`&lt;br/>下一行|![插入图片](ht图片上：//）|10.4|</code></pre></td></tr></table></div></div><p>预览效果：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left"><strong>加粗</strong></td><td align="center">[插入连接]（https://)</td><td align="right">5.7</td></tr><tr><td align="left"><code>换行</code><br/>下一行</td><td align="center">![插入图片](ht图片上：//）</td><td align="right">10.4</td></tr></tbody></table><p><strong>5.代码</strong></p><ul><li><p>行内代码</p><ul><li>用两个重音符`（backtick，在Tab键上方)包裹</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sb">`Markdown`</span><span class="nx">是一种轻量级标记语言</span></code></pre></td></tr></table></div></div><ul><li>预览<br><code>Markdown</code>是一种轻量级标记语言</li><li>重音符前后空一格</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">-</span><span class="nx">推荐</span><span class="err">：</span><span class="nx">使用键盘快捷键</span><span class="sb">`Ctrl+D`</span><span class="nx">可以将当前网页保存为书签</span><span class="err">。</span><span class="o">-</span><span class="nx">反对</span><span class="err">：</span><span class="nx">使用键盘快捷键</span><span class="sb">`Ctrl+D`</span><span class="nx">可以将当前网页保存为书签</span><span class="err">。</span></code></pre></td></tr></table></div></div><pre><code>- 推荐：使用键盘快捷键 `Ctrl+D` 可以将当前网页保存为书签。
- 反对：使用键盘快捷键`Ctrl+D`可以将当前网页保存为书签。</code></pre></li><li><p>代码块<br>
将三个重音符`置于代码块的首行和末行</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">print</span><span class="s2">"Hello,python!"</span></code></pre></td></tr></table></div></div><p>注：markdown对代码块的语法是开始和结束行都要添加：```,其中 ` 为windows键盘左上角那个。<br>
如果要精确指定语言（如：<code>java,cpp,css,xml,javascript,python,php,go,kotlin,lua,objectivec</code>等等）时，在头部直接指定，如：```javascript，如下：</p><pre><code> ```javascript
function showSnackbar() {
var $snackbar = $('#snackbar');
$snackbar.addClass('show');
setTimeout(() => {
$snackbar.removeClass('show');
}, 3000);
}
```</code></pre></li></ul><p><strong>6.强制换行</strong><br>
在行末使用空格（两个以上）+换行(Enter)<br>
预览效果：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sb">`enticing`</span><span class="o">-</span><span class="nx">Her</span><span class="nx">neck</span><span class="nx">was</span><span class="kr">short</span><span class="nx">but</span><span class="nx">rounded</span><span class="nx">and</span><span class="nx">her</span><span class="nx">arms</span><span class="nx">plump</span><span class="nx">and</span><span class="nx">enticin</span><span class="nx">他的脖子短</span><span class="err">，</span><span class="nx">但浑圆可爱</span><span class="err">；</span><span class="nx">两臂丰腴</span><span class="err">，</span><span class="nx">也很动人</span><span class="err">。</span><span class="nx">by</span><span class="err">《</span><span class="nx">飘</span><span class="err">》</span><span class="o">-</span><span class="nx">This</span><span class="nx">was</span><span class="nx">enticing</span><span class="nx">to</span><span class="nx">Wozniak</span><span class="p">,</span><span class="nx">even</span><span class="nx">more</span><span class="nx">than</span><span class="nx">any</span><span class="nx">prospect</span><span class="k">of</span><span class="nx">getting</span><span class="nx">rich</span><span class="p">.</span><span class="nx">这句话对沃兹尼亚克的诱惑太大了</span><span class="err">，</span><span class="nx">比变成富人的诱惑还要大</span><span class="err">。</span><span class="nx">by</span><span class="err">《</span><span class="nx">乔布斯传</span><span class="err">》</span></code></pre></td></tr></table></div></div><p><strong>7.外链的超链接</strong>
试试外链的超链接：<a href="http://blog.qikqiak.com" target="_blank" rel="noopener noreffer">我是外链的超链接</a>
,markdown对链接的语法为：<code>\[\]()</code>,如：<code>\[我是外链的超链接\](http://blog.qikqiak.com)</code></p><p><strong>8.页内的超链接</strong>
试试页内的超链接：<a href="#jump_1" rel="noopener noreffer">我是页内的超链接</a>
，注：你先要在要跳转的到地方放置一个类似：<code>&lt;a id="jump_1">任意内容&lt;/a></code>的锚点。由<code>id="jump_1"</code>来匹配。</p><p><strong>9.分隔线</strong><br>
语法：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">***</span></code></pre></td></tr></table></div></div><p>预览效果：</p><hr><p><strong>10.符号说明</strong></p><p>Markdown针对特殊符号具有转义定义，具体解释如下表：</p><table><thead><tr><th align="right">符号</th><th align="right">说明</th><th>对应编码</th></tr></thead><tbody><tr><td align="right">&amp;</td><td align="right">AND 符号</td><td>&amp; amp;</td></tr><tr><td align="right">&lt;</td><td align="right">小于</td><td>&amp; lt;</td></tr><tr><td align="right"> </td><td align="right">空格</td><td>&amp; nbsp;</td></tr><tr><td align="right">¿</td><td align="right">倒问号</td><td>&amp; iquest;</td></tr><tr><td align="right">?</td><td align="right">问号</td><td>&amp; quest;</td></tr><tr><td align="right">«</td><td align="right">左书名号</td><td>&amp; laquo;</td></tr><tr><td align="right">»</td><td align="right">右书名号</td><td>&amp; raquo;</td></tr><tr><td align="right">“</td><td align="right">引号</td><td>&amp; quot;</td></tr><tr><td align="right">‘</td><td align="right">左单引号</td><td>&amp; lsquo;</td></tr><tr><td align="right">’</td><td align="right">右单引号</td><td>&amp; rsquo;</td></tr><tr><td align="right">“</td><td align="right">左双引号</td><td>&amp; ldquo;</td></tr><tr><td align="right">”</td><td align="right">右双引号</td><td>&amp; rdquo</td></tr><tr><td align="right">¶</td><td align="right">段落符号</td><td>&amp; para;</td></tr><tr><td align="right">§</td><td align="right">章节符</td><td>&amp; sect;</td></tr><tr><td align="right">×</td><td align="right">乘号</td><td>&amp; times;</td></tr><tr><td align="right">÷</td><td align="right">除号</td><td>&amp; divide;</td></tr><tr><td align="right">±</td><td align="right">加减号</td><td>&amp; plusmn;</td></tr><tr><td align="right">ƒ</td><td align="right">function</td><td>&amp; fnof;</td></tr><tr><td align="right">√</td><td align="right">根号</td><td>&amp; radic;</td></tr><tr><td align="right">∞</td><td align="right">无穷大</td><td>&amp; infin;</td></tr><tr><td align="right">°</td><td align="right">度</td><td>&amp; deg;</td></tr><tr><td align="right">≠</td><td align="right">不等号</td><td>&amp; ne;</td></tr><tr><td align="right">≡</td><td align="right">恒等于</td><td>&amp; equiv;</td></tr><tr><td align="right">≤</td><td align="right">小于等于</td><td>&amp; le;</td></tr><tr><td align="right">≥</td><td align="right">大于等于</td><td>&amp; ge;</td></tr><tr><td align="right">⊥</td><td align="right">垂直符号</td><td>&amp; perp;</td></tr><tr><td align="right">←</td><td align="right">左箭头</td><td>&amp; larr;</td></tr><tr><td align="right">→</td><td align="right">右箭头</td><td>&amp; rarr;</td></tr><tr><td align="right">↑</td><td align="right">上箭头</td><td>&amp; uarr;</td></tr><tr><td align="right">↓</td><td align="right">下箭头</td><td>&amp; darr;</td></tr><tr><td align="right">↔</td><td align="right">水平箭头</td><td>&amp; harr;</td></tr><tr><td align="right">↕</td><td align="right">竖直箭头</td><td>&amp; varr;</td></tr><tr><td align="right">⇐</td><td align="right">双线左箭头</td><td>&amp; lArr;</td></tr><tr><td align="right">⇒</td><td align="right">双线右箭头</td><td>&amp; rArr;</td></tr><tr><td align="right">⇑</td><td align="right">双线上箭头</td><td>&amp; uArr;</td></tr><tr><td align="right">⇓</td><td align="right">双线上箭头</td><td>&amp; dArr;</td></tr><tr><td align="right">⇔</td><td align="right">双线水平双箭头</td><td>&amp; hArr;</td></tr><tr><td align="right">⇕</td><td align="right">双线竖直箭头</td><td>&amp; vArr;</td></tr><tr><td align="right">♠</td><td align="right">黑桃</td><td>&amp; spades;</td></tr><tr><td align="right">♥</td><td align="right">红桃</td><td>&amp; hearts;</td></tr><tr><td align="right">♣</td><td align="right">梅花</td><td>&amp; clubs;</td></tr><tr><td align="right">♦</td><td align="right">方块</td><td>&amp; diams;</td></tr><tr><td align="right">©</td><td align="right">版权</td><td>&amp; copy;</td></tr><tr><td align="right">®</td><td align="right">注册商标</td><td>&amp; reg;</td></tr><tr><td align="right">™</td><td align="right">商标</td><td>&amp; trade;</td></tr><tr><td align="right">¥</td><td align="right">人民币</td><td>&amp; yen;</td></tr><tr><td align="right">€</td><td align="right">欧元</td><td>&amp; euro;</td></tr><tr><td align="right">¢</td><td align="right">美分</td><td>&amp; cent;</td></tr><tr><td align="right">£</td><td align="right">英磅</td><td>&amp; pound;</td></tr><tr><td align="right">⊕</td><td align="right"/><td>&amp; oplus;</td></tr><tr><td align="right">½</td><td align="right">二分之一</td><td>&amp; frac12;</td></tr><tr><td align="right">¼</td><td align="right">四分之一</td><td>&amp; frac14;</td></tr><tr><td align="right">‰</td><td align="right">千分符号</td><td>&amp; permil;</td></tr><tr><td align="right">∴</td><td align="right">所以</td><td>&amp; there4;</td></tr><tr><td align="right">π</td><td align="right">圆周率</td><td>&amp; pi;</td></tr><tr><td align="right">¹</td><td align="right">上标1</td><td>&amp; sup1;</td></tr><tr><td align="right">α</td><td align="right">alpha</td><td>&amp; alpha;</td></tr><tr><td align="right">β</td><td align="right">beta</td><td>&amp; beta;</td></tr><tr><td align="right">γ</td><td align="right">gamma</td><td>&amp; gamma;</td></tr><tr><td align="right">δ</td><td align="right">delta</td><td>&amp; delta;</td></tr><tr><td align="right">θ</td><td align="right">theta</td><td>&amp; theta;</td></tr><tr><td align="right">λ</td><td align="right">lambda</td><td>&amp; lambda;</td></tr><tr><td align="right">σ</td><td align="right">sigma</td><td>&amp; sigma;</td></tr><tr><td align="right">τ</td><td align="right">tau</td><td>&amp; tau;</td></tr></tbody></table><h2 id="写作结构大纲">写作结构大纲</h2><p>一般按照如下结构参照Word文档结构进行markdown文档的大纲编写。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">### 标题
#### 层级
# 一级标题：文章的标题
## 二级标题：文章主要部分的大标题
### 三级标题：二级标题下面一级的小标题</code></pre></td></tr></table></div></div><ul><li>虽然Markdown最大支持######六级标题，为了保持层级的简单，防止出现过于复杂的章节，请谨慎使用四级标题（除非是长文章）。如果三级标题下有并列性的内容，可以使用加粗、有序列表或无序列表代表末级标题。</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">### 三级标题
**四级标题A**
- 论据1（五级标题）
- 细分论据 1(六级标题)
- 细分论据 2（六级标题)
- 细分论据 3(六级标题)
- 论据2
- 论据3
**四级标题B**
1. 论据
2. 论据
3. 论据
**四级标题C**
- 论据1
- 论据2
- 论据3
----
### 三级标题（适用于长文章）
#### 四级标题A
#### 四级标题B
#### 四级标题C</code></pre></td></tr></table></div></div><p><strong>文档标题拟定要点</strong></p><ul><li>标题要简短，结尾不带标点符号。</li><li>（源码上）标题前后空一行（段前距和段后距）。</li><li>大标题和小标题之间要有内容过度（引出或概括下文）。<br>
示例：</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"># Title
开门见山地告诉读者这篇文章讲什么？
一级标题作为文章的（页面）标题（H），并且尽可能和文件名称保持一致。如果文章很长，使用[TOC]生成目录。
## what
先定义问题是什么?...
正文从二级标题开始
## Why
为什么会出现这样的问题?...
## How
下一步该怎么办?...
## See also
文末别忘了贴上参考连接。
* https://link-to-more-info</code></pre></td></tr></table></div></div><h2 id="markdown应用场景">Markdown应用场景</h2><blockquote><p>6大应用场景</p></blockquote><p><strong>1.公众号排版</strong></p><ul><li><a href="https://mdnice.com/" target="_blank" rel="noopener noreffer">Markdown Nice</a>
：让微信排版变 Nice，支持自定义主题 CSS。</li><li><a href="https://knb.im/mp/" target="_blank" rel="noopener noreffer">可能吧公众号 Style 一键转换器</a>
：老司机禅叔出品。</li><li><a href="https://justpic.org/md" target="_blank" rel="noopener noreffer">md</a>
:自用微信公众号排版</li></ul><p><strong>2.博客</strong></p><p><strong>3.知乎专栏</strong></p><p><strong>4.幻灯片</strong></p><p><strong>5.专业报告</strong></p><p><strong>6.笔记</strong></p><h2 id="markdown推荐编辑器">Markdown推荐编辑器</h2><table><thead><tr><th>操作系统</th><th>Markdown编辑器</th></tr></thead><tbody><tr><td>windows</td><td>typora</td></tr><tr><td>android</td><td>纯纯写作</td></tr><tr><td>macos/ios</td><td>Ulysses</td></tr></tbody></table><hr><p><strong>参考</strong></p><ul><li><a href="https://sspai.com/post/36610" target="_blank" rel="noopener noreffer">Markdown 完全入门（上）</a></li><li><a href="https://sspai.com/post/36682" target="_blank" rel="noopener noreffer">Markdown 完全入门（下）</a></li><li><a href="https://www.wiz.cn/feature-markdown.html" target="_blank" rel="noopener noreffer">为知笔记 Markdown 新手指南</a></li><li><a href="https://sspai.com/tag/Markdown" target="_blank" rel="noopener noreffer">Markdown 合集 - 少数派</a></li><li><a href="https://www.jianshu.com/p/3beac9fd6496" target="_blank" rel="noopener noreffer">Google Markdown 书写风格指南</a></li><li><a href="https://github.com/google/styleguide/blob/gh-pages/docguide/style.md" target="_blank" rel="noopener noreffer">Markdown Style Guide by Google</a></li><li><a href="https://sspai.com/post/54912" target="_blank" rel="noopener noreffer">Typora 完全使用详解 - liquid617</a></li><li><a href="https://www.bmpi.dev/dev/what-markdown-can-do/" target="_blank" rel="noopener noreffer">用markdown可以做什么</a></li><li><a href="https://github.com/mixu/markdown-styles" target="_blank" rel="noopener noreffer">markdown styles</a></li><li><a href="https://developers.google.com/tech-writing/overview" target="_blank" rel="noopener noreffer">tech-writing-course</a></li><li><a href="https://kuang.netlify.com/blog/hugo.html" target="_blank" rel="noopener noreffer">hugo使用</a></li></ul><p><strong>关联阅读</strong></p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzA4MjM2NDE3MQ==&amp;mid=2247483680&amp;idx=1&amp;sn=0c20215b5db870ca8e02f2644921ee04&amp;chksm=9f879344a8f01a52abd237ba20d6a2c745185340a926e5087eb4150733799eaf152cd04638f6&amp;token=690110981&amp;lang=zh_CN#rd" target="_blank" rel="noopener noreffer">markdown写作指南 - justpic</a></li></ul></description></item><item><title>浅谈低代码开发</title><link>https://justpic.org/post/2020/03/02/lowcode-thoughts/</link><pubDate>Mon, 02 Mar 2020 10:20:38 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/02/lowcode-thoughts/</guid><description><p>本文从低代码发展历史、 相关领域发展情况、以及具体的实现三个方面对低代码的前世今生进行探索。</p><h2 id="低代码发展历史">低代码发展历史</h2><blockquote><p>技术可能是一个革命自我的过程</p></blockquote><p>低代码开发平台的术语虽然2014年才被Forrester Research正式提出，但最早的产品雏形可追溯到2001年所建立的OutSystems中。</p><p><strong>低代码出现的时机和原因</strong></p><ol><li>软件定义概念的兴起（Software define anything）</li><li>高效协同工作的要求<br>
减低信息化活动的技术门槛，让更多的人参与到信息化活动中来，屏蔽复杂的软件设计、编码、测试等比较专业的软件工程过程，使编程工作更好承接业务本身，敏捷精益化。</li><li>政策推动的需要</li><li>软件产品的迭代进化</li><li>技术自我革命</li></ol><p><strong>低代码市场发展情况</strong><br>
根据2018年以来的投融资情况，低代码开发产品市场主要集中在<a href="" rel="noopener noreffer">OutSystems</a>
、<a href="" rel="noopener noreffer">Mendix</a>
、<a href="" rel="noopener noreffer">搭搭云</a>
、<a href="" rel="noopener noreffer">奥哲网络</a>
、<a href="" rel="noopener noreffer">轻流</a>
、<a href="" rel="noopener noreffer">magic</a>
、<a href="" rel="noopener noreffer">黑帕云</a>
、<a href="" rel="noopener noreffer">ClickPaas</a>
和<a href="" rel="noopener noreffer">数式科技</a>
，其中部分初创企业最高已获得亿级美元融资，成功跻身独角兽。</p><p><strong>低代码热度和趋势</strong></p><p>为了更直观地体会低代码的热度，运用百度指数、头条指数、Google Trends等工具查看低代码的热度和趋势。</p><ol><li><p>百度指数上对低代码的搜索情况如下：<br><img class="lazyload" src="/svg/loading.small.min.svg" data-sizes="auto" data-srcset="https://cdn.jsdelivr.net/gh/justpic/jscdn/post/bdindex_lowcode.png,  1.5x,  2x" data-src="" alt="低代码" title="低代码"/><br>
图中显示在今年3月份低代码一词热度最高，获得越来越多的关注。</p></li><li><p>Google Trends上对lowcode、DDD、DSL、BPM的搜索情况如图：<br><img class="lazyload" src="/svg/loading.small.min.svg" data-sizes="auto" data-srcset="https://cdn.jsdelivr.net/gh/justpic/jscdn/post/gindex_lowcode.PNG,  1.5x,  2x" data-src="" alt="google lowcode" title="google lowcode"/><br>
对于低代码（lowcode），google trends并没有显示其获得特别多的关注和热度，但其相关技术：cloud与DSL呈现强烈的负相关关系</p></li></ol><h2 id="相关领域发展情况">相关领域发展情况</h2><p>低代码概念作为高度集成的企业信息化解决方案和产品，其相关领域可大致分为OA协同办公、人工智能、中台技术、云开发四大部分。</p><ol><li>OA协同办公软件<ul><li>办公自动化（OA）软件发展历史可追溯到office办公软件，随着Web技术的发展，通过网络技术高度集成相关软件，提高了办公软件的自动化程度。</li><li>随着低代码技术的快速发展，OA协同办公软件将迎来重大升级，OA协同办公软件将集成业务建模和仿真这一特性，为业务信息化落地提速增效。</li></ul></li><li>人工智能<ul><li>人工智能的加持，快速为业务链赋能：人脸识别、自然语言技术作为末端替代人工操作进一步提高工作效率。</li><li>数据分析可以进一步分析流程相关时间序列相关数据，迭代优化相关业务。</li></ul></li><li>中台技术的发展<ul><li>中台技术提供更为灵活的API管理和应用。</li></ul></li><li>云开发环境。<ul><li>云原生技术的发展将灵活高效地承载低代码业务开发模式。</li></ul></li></ol><h2 id="具体实现">具体实现</h2><p>从低代码说开去,低代码、中台、RPA、人工智能这些概念词更像是为了迎合市场准备的营销素材，从技术实现角度，可能更为关注低代码实现的技术实现细节。<br><strong>技术实现要点</strong><br>
低代码的技术实现要点主要可以分为云原生、Devops、BPM、DSL、前端可视化等方面。</p><ol><li>云原生<ul><li>云原生为低代码提供基础的软件实施工具，软件云化不仅可以统一管理应用，也提高了基础资源的利用率。</li></ul></li><li>Devops<ul><li>Devops有效为低代码提供持续有效的软件产品构建流程，一方面是软件工程理论的实践，好的DevOps是一套有效运营流程规范。</li></ul></li><li>BPM<ul><li>BPM技术的发展与协同办公软件开发技术发展紧密，activiti、camunda、flowable技术作为开源工作流引擎可以作为业务建模的参考实现。</li><li>类BPM技术：数据分析/算法引擎</li></ul></li><li>DSL<ul><li>DSL不仅存在于后台开发技术，而且在前端技术领域也得到越来越多的应用，构建一个好的类型系统可以有效解决复杂业务建模。</li></ul></li><li>前端可视化<ul><li>前端可视化与用户交互紧密联系，友好的可视化交互操作对低代码的推广使用非常重要。</li></ul></li></ol><hr><p><strong>参考</strong><br>
DSL:</p><ul><li><a href="https://www.ituring.com.cn/book/miniarticle/4194" target="_blank" rel="noopener noreffer">选择DSL实现的方式</a></li><li><a href="https://medium.com/@dempfi/typescript-jsx-syntax-as-typed-dsl-97c052b825c8" target="_blank" rel="noopener noreffer">TypeScript JSX syntax as a typed DSL</a></li><li><a href="https://gist.github.com/ulve/26d6087bbab6d9a67c4b6f1a226807ed" target="_blank" rel="noopener noreffer">DSL.ts</a></li></ul><p>DDD:</p><ul><li><a href="https://github.com/madawei2699/ddd_parklot" target="_blank" rel="noopener noreffer">https://github.com/madawei2699/ddd_parklot</a></li></ul><p>低代码：</p><ul><li><a href="https://mp.weixin.qq.com/s/Y23pwX6JmYhME5u52FcLLQ" target="_blank" rel="noopener noreffer">探路中台、RPA、低代码引领企业级IT服务未来式</a></li><li><a href="https://github.com/phodal/lowcode.git" target="_blank" rel="noopener noreffer">https://github.com/phodal/lowcode.git</a></li><li><a href="https://zhuanlan.zhihu.com/p/88616149" target="_blank" rel="noopener noreffer">现代Web开发与未来</a></li><li><a href="https://github.com/phodal/cloud-dev" target="_blank" rel="noopener noreffer">云研发</a></li><li><a href="https://mp.weixin.qq.com/s/ytihMiH1LZ0gkjgKTE8RTA" target="_blank" rel="noopener noreffer">2020年边缘计算为什么会火</a></li><li><a href="https://mp.weixin.qq.com/s/Aq_uRdEbn7sZDSTifgiP9A" target="_blank" rel="noopener noreffer">麻省理工选出的全球十大突破性技术</a></li><li><a href="https://mp.weixin.qq.com/s/dQjViQ5N3hWApH40sfZAuA" target="_blank" rel="noopener noreffer">大中台模式下如何构建复杂业务核心状态机组件</a></li><li><a href="https://zhuanlan.zhihu.com/p/96046788" target="_blank" rel="noopener noreffer">深入typescript类型系统（二）：泛型和类型元编程</a></li><li><a href="https://blog.frankel.ch/builder-pattern-finite-state-machine/" target="_blank" rel="noopener noreffer">builder模式是一个有限状态机</a></li></ul><p>CI/CD:</p><ul><li><a href="https://www.stackbit.com/" target="_blank" rel="noopener noreffer">https://www.stackbit.com/</a></li><li><a href="https://wakatime.com/plugins/status?onboarding=true" target="_blank" rel="noopener noreffer">wakatime</a></li></ul></description></item><item><title>APIJSON实践</title><link>https://justpic.org/post/2019/10/27/apijson-exercise/</link><pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2019/10/27/apijson-exercise/</guid><description><p>APIJSON实践</p><h2 id="获取特定对象">获取特定对象</h2><h3 id="指定数据库服务器和schema进行查询">指定数据库服务器和schema进行查询：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"Test":{"ID_":5},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><h3 id="获取列表">获取列表：</h3><p>[返回特定字段]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"@column":"USER_ID,TM_ID"}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>[返回全部字段列表]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"@column":""}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>[分页]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"page":0,"Test":{"@column":""}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>[特定字段条件查询]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"Test":{"ID_":5},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>​<br>
[连续范围]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"Test":{"END_TIME%":"2018,2019"},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>！以上链接直接浏览器请求出错</p><p>[时间范围]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"END_TIME{}":"&lt;=2019,>=2018"}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>[模糊匹配]</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"END_TIME$":"%2019%"}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>详细的功能符号介绍：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">"key[]":{} // 查询数组
"key{}":[1,2,3] // 匹配选项范围
"key{}":"&lt;=10;length(key)>1..." // 匹配条件范围
"key()":"function(arg0,arg1...)" // 远程调用函数
"key@":"key0/key1.../targetKey" // 引用赋值
"key$":"%abc%" // 模糊搜索
"key~":"^[0-9]+$" // 正则匹配
"key%":"2018-01-01,2018-10-01" // 连续范围
"key+":[1] // 增加/扩展
"key-":888.88 // 减少/去除
"name:alias" // 新建别名
"@combine":"name~,tag~" // 条件组合
"@column":"id,sex,name" // 返回字段
"@group":"userId" // 分组方式
"@having":"max(id)>=100" // 聚合函数
"@order":"date-,name+" // 排序方式
"@schema":"sys" // 集合空间
"@database":"POSTGRESQL" // 跨数据库
"@explain":true // 性能分析
"@role":"LOGIN" // 访问角色</code></pre></td></tr></table></div></div><p>详细功能符说明可见<a href="https://github.com/TommyLemon/APIJSON/blob/master/Document.md#3.2" target="_blank" rel="noopener noreffer">通用文档</a></p></description></item><item><title>路由转发和反向代理的应用</title><link>https://justpic.org/post/2019/10/15/%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2019/10/15/%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description><p>路由转发和反向代理的应用</p><h3 id="简单实践">简单实践</h3><h4 id="1-路由转发">1. 路由转发：</h4><p>工业互联网环境下，很多上位机是双网卡或者多网卡，上位机通常处于多重网络环境下，就上位机本身而言，可以与这些网络进行通信，再缺少网络路由器的直接配置情况下，各个网络之间是不能直接进行通信的，极端网络环境下，直接使用PC网卡进行路由转发是可以快速解决跨网设备通信的，一般来说，路由转发是从IP层协议解决网络连通性问题，与一般的反向代理处于传输层的解决方案相比，能够更好的支持网络应用，但同时也增加了网络的路由跃点数，会对工业软件的认证授权产生影响。</p><p>下面主要从一个上位机多重网络联通性测试说明两个局域网环境下的路由转发应用：</p><p>假设局域网1中的PC1的IP地址为：172.11.100.25，对应的网卡编号为11，局域网2中的PC3的IP地址为:172.12.25.141，对应的网卡编号为15.上位机连接着局域网1和局域网2，对应的网络IP地址分别为172.11.100.249和172.12.25.130，对应的网卡编号分别为11和13。为了实现PC1和PC2互通（即相互可以ping通），需要做如下三步操作：</p><h4 id="2-配置pc1">2. 配置PC1</h4><p>PC1下cmd进入命令行，route print -4 查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.12.25.0 mask 255.255.255.0 172.11.100.249 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="3-配置pc2">3. 配置PC2</h4><p>PC2下注意，需要设置一个网卡的网关地址为空，然后进入到注册表下修改IPEnableRouter的值为1,IPEnableRouter的具体注册表路径为 “计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters”</p><p>!注意：IPEnableRouter修改后需要重启电脑才能生效。</p><h4 id="4-配置pc3">4. 配置PC3</h4><p>PC3下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.11.100.0 mask 255.255.255.0 172.12.25.130 metric<span class="m">8</span><span class="k">if</span><span class="m">15</span></code></pre></td></tr></table></div></div><p>至此，相关路由转发配置基本结束，PC1和PC3是可以相互ping通的。</p><blockquote><p>想象一下，如果要打通多个上位机的局域网，需要怎样做？</p></blockquote><h3 id="多个上位机网络通信">多个上位机网络通信</h3><p>下面主要从两个上位机的多重网络连通性测试说明三个局域网环境下的路由转发应用：</p><p>在上面的网络情景下，增加局域网3，局域网3下的PC5的IP地址为：192.168.0.201，对应的网卡编号为11，上位机PC4连接着局域网2和局域网3，对应的IP地址分别为172.12.15.142和192.168.0.202，对应的网卡编号分别为11和13，为了打通PC5和PC1的网络，需要做如下五步操作：</p><h4 id="1-配置pc1">1. 配置PC1</h4><p>PC1下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 192.168.0.0 mask 255.255.255.0 172.11.100.249 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="2-配置pc2">2. 配置PC2</h4><p>PC2下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 192.168.0.0 mask 255.255.255.0 172.12.15.142 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="3-配置pc4">3. 配置PC4</h4><p>PC4下注意，需要设置一个网卡的网关地址为空，然后进入到注册表下修改IPEnableRouter的值1，,IPEnableRouter的具体注册表路径为 “计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters”</p><p>！注意：IPEnableRouter修改后需要重启电脑才能生效。</p><h4 id="4-配置pc5">4. 配置PC5</h4><p>PC5下cmd进入命令行，route print -4查看路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.11.100.0 mask 255.255.255.0 192.168.0.202 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="5-查看pc4路由并配置">5. 查看PC4路由并配置</h4><p>PC4下cmd进入命令行，route print -4查看路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.11.100.0 mask 255.255.255.0 172.12.15.142<span class="k">if</span><span class="m">11</span>
route add 192.168.0.0 mask 255.255.255.0 192.168.0.202 metric<span class="m">8</span><span class="k">if</span><span class="m">13</span></code></pre></td></tr></table></div></div><p>至此，相关路由转发配置基本结束，PC1和PC5是可以相互ping通的。
会了三个局域网的路由转发，多个局域网的路由转发以此类推，就可以实现异构网络间的互通。</p><h3 id="反向代理">反向代理：</h3><p>反向代理的应用非常广泛，包括网站负载均衡、内网穿透、高可用等等。由于反向代理一般都软件化了，这里就不做过多介绍，可以推荐使用frp作为反向代理，支持tcp、udp等多种协议。
当然windows自带的netsh interface portproxy也是一个不错的选择，但是只支持tcp协议。</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/Bonker/p/4849295.html?from=singlemessage" target="_blank" rel="noopener noreffer">Win7中的路由转发配置实验</a></p></description></item><item><title>tornado异步网络编程实践</title><link>https://justpic.org/post/2016/09/08/tornado-async-web/</link><pubDate>Thu, 08 Sep 2016 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2016/09/08/tornado-async-web/</guid><description><p>tornado异步网络编程实践</p><p><strong>异步tornado请求</strong><br>
底层建立socket通讯，服务器采用epoll方案，即时返回请求，轮询到后台任务结束时，通过socket发送数据到客户端。<br>
理解异步过程：
http请求断了，tcp层面上的socket连接还在保持，客户端通过再次发送http请求，可以得到后台处理的结果，long pooling技术，socket套接字主要由ip地址、tcp/ip协议和端口号决定，利用epoll的套接字复用技术，能够保证任务请求能够发送到正确的客户端上，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
listen 80;
server_name yourdomain.tld;
location / {
try_files $uri @tornado;
}
location @tornado {
proxy_pass http://localhost:8888;
}
}
user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><hr><p>参考</p><ul><li><a href="http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html" target="_blank" rel="noopener noreffer">http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html</a></li><li><a href="http://zqdevres.qiniucdn.com/data/20100927213110/index.html" target="_blank" rel="noopener noreffer">http://zqdevres.qiniucdn.com/data/20100927213110/index.html</a></li><li><a href="http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/" target="_blank" rel="noopener noreffer">http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</a></li><li><a href="http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado" target="_blank" rel="noopener noreffer">http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado</a></li><li><a href="http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/" target="_blank" rel="noopener noreffer">http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/</a></li><li><a href="http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/" target="_blank" rel="noopener noreffer">http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/</a></li></ul></description></item></channel></rss>