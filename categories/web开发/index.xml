<html><body><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web开发 on 桑河一榆</title><link/>https://justpic.org/categories/web%E5%BC%80%E5%8F%91/<description>Recent content in Web开发 on 桑河一榆</description><generator>justpic</generator><language>zh-CN</language><managingeditor>matrix.orz@gmail.com (justpic)</managingeditor><webmaster>matrix.orz@gmail.com (justpic)</webmaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastbuilddate>Thu, 08 Sep 2016 00:00:00 +0000</lastbuilddate><atom:link href="https://justpic.org/categories/web%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"></atom:link><item><title>tornado异步网络编程实践</title><link/>https://justpic.org/post/2016/09/08/tornado-async-web/<pubdate>Thu, 08 Sep 2016 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2016/09/08/tornado-async-web/</guid><description><p>tornado异步网络编程实践</p><p><strong>异步tornado请求</strong><br/>
底层建立socket通讯，服务器采用epoll方案，即时返回请求，轮询到后台任务结束时，通过socket发送数据到客户端。<br/>
理解异步过程：
http请求断了，tcp层面上的socket连接还在保持，客户端通过再次发送http请求，可以得到后台处理的结果，long pooling技术，socket套接字主要由ip地址、tcp/ip协议和端口号决定，利用epoll的套接字复用技术，能够保证任务请求能够发送到正确的客户端上，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
listen 80;
server_name yourdomain.tld;
location / {
try_files $uri @tornado;
}
location @tornado {
proxy_pass http://localhost:8888;
}
}
user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><hr/><p>参考</p><ul><li><a href="http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html" rel="noopener noreffer" target="_blank">http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html</a></li><li><a href="http://zqdevres.qiniucdn.com/data/20100927213110/index.html" rel="noopener noreffer" target="_blank">http://zqdevres.qiniucdn.com/data/20100927213110/index.html</a></li><li><a href="http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/" rel="noopener noreffer" target="_blank">http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</a></li><li><a href="http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado" rel="noopener noreffer" target="_blank">http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado</a></li><li><a href="http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/" rel="noopener noreffer" target="_blank">http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/</a></li><li><a href="http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/" rel="noopener noreffer" target="_blank">http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/</a></li></ul></description></item><item><title>tornado 国际化实践</title><link/>https://justpic.org/post/2014/04/27/tornado-%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E8%B7%B5/<pubdate>Sun, 27 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/27/tornado-%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid><description><p>tornado i18n国际化</p><blockquote><p>i18n是国际化的简称（Internationalization,去掉开始的I和最后的N，中间一共18个字符）。
tornado中使用i18n,需要下面两个工具(pygettext,msgfmt)和两个相关文件（po文件和mo文件）</p></blockquote><h3 id="pygetext和msgfmt的使用方法">pygetext和msgfmt的使用方法</h3><ol><li><p>编写python代码文件 test.py</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">gettext</span><span class="kn">import</span><span class="n">gettext</span><span class="k">as</span><span class="n">_</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"well down"</span><span class="p">)</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"good"</span><span class="p">)</span></code></pre></td></tr></table></div></div></li><li><p>运行以下命令</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">pygetext test.py</code></pre></td></tr></table></div></div></li><li><p>生成messages.pot文件,更改文件后缀</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mv messages.pot messages.po</code></pre></td></tr></table></div></div></li><li><p>配置msgstr值<br/>
生成一个名为messages.mo文件：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">msgfmt messages.po<span class="c1">#建立目录locale/cn/LC_MESSAGES/</span>
mv messages.po locale/cn/LC_MESSAGES</code></pre></td></tr></table></div></div><p>cn目录是所对应的语言，LC_MESSAGES是gettext.py文件里要求的
mo文件必须和所定义的域同名
gettext.py中有
modfile=os.path.join(localedir,lang,‘LC_MESSAGES’,'%s.mo’ %domain)</p><p>测试：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$python</span>
&gt;&gt;&gt;gettext.install<span class="o">(</span><span class="s1">'messages'</span>,<span class="s1">'./locale'</span>,unicode<span class="o">=</span>True<span class="o">)</span></code></pre></td></tr></table></div></div><p>三个参数：</p><ul><li>作用域名:用于限定翻译文件的主名</li><li>路径:存放翻译文件的路径</li><li>unicode:是否使用unicode（如果应用程序是unicode的，此处应设为True)</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span><span class="n">gettext</span><span class="o">.</span><span class="n">translation</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span><span class="s1">'./locale'</span><span class="p">,</span><span class="n">languages</span><span class="o">=</span><span class="p">[</span><span class="s1">'cn'</span><span class="p">])</span><span class="o">.</span><span class="n">install</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span><span class="o">&gt;&gt;&gt;</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"good"</span><span class="p">)</span></code></pre></td></tr></table></div></div></li></ol><h3 id="tornado中的应用">tornado中的应用</h3><ol><li>运行以下命令<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$xgettext</span> -L python -k<span class="o">=</span>_ -o openquant.po<span class="k">$(</span>find . -name<span class="se">\*</span>.py<span class="k">)</span><span class="k">$(</span>find template/ -name<span class="se">\*</span>.html<span class="k">)</span></code></pre></td></tr></table></div></div></li><li>查找所有需要翻译的相关项生成 po 文件<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$msgfmt</span> openquant.po -o locale/zh_CN/LC_MESSAGES/openquant.mo</code></pre></td></tr></table></div></div></li></ol><p>完成mo文件的生成<br/>
4. 完成相关文件的生成后，需要在代码中加载:<code>tornado.locale.load_gettext_translations(options.I18N_PATH,"openquant")</code>
5. handler中自定义get_user_locale函数：
```
def get_user_locale(self):
#zh_CN or en_US
user_locale = self.get_cookie(“user_locale”)</p><pre><code> if user_locale:
return tornado.locale.get(user_locale)
return None
```</code></pre><hr/><p><em>参考</em></p><ul><li><a href="http://www.ylinux.org/imind/167" rel="noopener noreffer" target="_blank">iMind</a></li><li><a href="http://justbm.blogspot.com/2014/01/django.html" rel="noopener noreffer" target="_blank">django多国语言</a></li></ul></description></item><item><title>网站部署记录</title><link/>https://justpic.org/post/2013/10/27/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/<pubdate>Sun, 27 Oct 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/10/27/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</guid><description><p>网站部署记录</p><p>安装基础python环境</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install nginx
sudo apt-get install git
sudo apt-get install mysql-server
sudo apt-get install python-dev
install easy_install on ubuntu:
sudo apt-get install python-setuptools
sudo easy_install virtualenv
sudo easy_install pip
virtualenv ~/trade
source ~/trade/bin/activate
install numpy scipy pandas and ta-lib
sudo pip install Cython</code></pre></td></tr></table></div></div><p><strong>安装 blas libs</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install gfortran libopenblas-dev liblapack-dev g++
pip install numpy
pip install scipy</code></pre></td></tr></table></div></div><p><strong>安装 ta-lib</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">cd ~
wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
sudo apt-get install build-essential
tar -zxvf ta-lib-0.4.0-src.tar.gz
cd ta-lib-0.4.0
./configure --prefix=/usr
make
sudo make install</code></pre></td></tr></table></div></div><p><strong>安装 gevent</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
tar -zxvf
./configure
make
sudo make install
cd ~/www
git clone https://github.com/pydata/pandas.git
git clone https://github.com/mrjbq7/ta-lib.git</code></pre></td></tr></table></div></div><p><strong>update the nginx</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo apt-get install sotware-properties-common
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx</code></pre></td></tr></table></div></div><p><strong>mysql init</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install mysql-server libmysqld-dev
pip install MySQL-python
insert into mysql.user(Host,User,Password) values("localhost","username",password("password"));</code></pre></td></tr></table></div></div><p><strong>用户授权</strong><br/>
给本地用户mql分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123456。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt;grant all privileges on *.* to username@localhost identified by 'password';</code></pre></td></tr></table></div></div><p><strong>安装 redis</strong><br/>
具体参考<a href="http://rubyer.me/blog/638/redis.io" rel="noopener noreffer" target="_blank">install redis</a></p><p><strong>安装uwsgi 或者 gunicorn(可选)</strong></p></description></item></channel></rss></body></html>