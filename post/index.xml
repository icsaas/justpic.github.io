<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Post on 桑河一榆</title>
        <link>https://justpic.org/post/</link>
        <description>Recent content in Post on 桑河一榆</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 12 Mar 2020 22:21:33 +0800</lastBuildDate>
        
        <atom:link href="https://justpic.org/post/index.xml" rel="self" type="application/rss+xml" />
        
        
        <item>
            <title>requests库中的那些高级用法</title>
            <link>https://justpic.org/post/requsts-advance-usage/</link>
            <pubDate>Thu, 12 Mar 2020 22:21:33 +0800</pubDate>
            
            <guid>https://justpic.org/post/requsts-advance-usage/</guid>
            <description>&lt;p&gt;作为python中最通用的http工具库之一——requests，具有简洁、直观和全面的特点，一般来说，requests与python中的内置模块urllib3已经逐渐成为程序员处理HTTP请求的首选工具。&lt;/p&gt;
&lt;p&gt;得益于requests简洁的API接口，在生产环境下得到了非常普遍的应用，即使在复杂的应用场景下，request的扩展性也非常好。如果你正在写一个API客户端或者网络爬虫，同时对断网情况比较棘手，那么下面所介绍的requests高级技巧可能会帮助你更好的进行程序调试。&lt;/p&gt;
&lt;h2 id=&#34;请求钩子&#34;&gt;请求钩子&lt;/h2&gt;
&lt;p&gt;应用第三方API时，需要验证应答内容是否合法，requests提供了raise_for_status()方法来判断应答内容的HTTP状态码是不是4xx或者5xx，表明请求产生了客户端或者服务器错误。
例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.github.com/user/repos?page=1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#6272a4&#34;&gt;# 判断是否有无错误&lt;/span&gt;
response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;raise_for_status()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一次请求都调用raise_for_status会非常繁琐，requests非常贴心的提供了一个&#39;钩子(hook)&amp;lsquo;接口（通过在请求过程的特定部分指定回调函数）。
下面请看案例代码，通过使用hook来确保每次服务应答后，raise_for_status能被调用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Session()  
assert_status_hook &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;lambda&lt;/span&gt; response,&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args,&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs: response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;raise_for_status()  
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;hooks[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;response&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [assert_status_hook]  
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.github.com/user/repos?page=1&amp;#34;)&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; HTTPError: &lt;span style=&#34;color:#bd93f9&#34;&gt;401&lt;/span&gt; Client Error: Unauthorized &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; url: https:&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt;api&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;github&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;user&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;repos?page&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;设置基链接&#34;&gt;设置基链接&lt;/h2&gt;
&lt;p&gt;假设你只使用api.org上的一个api，你可能在每次调用时都要重复编写http协议和域名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.org/list&amp;#39;&lt;/span&gt;)  
requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.org/list/3/item&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用BaseUrlSession可以避免敲下这些重复的内容。
下面看案例代码，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;form requests_toolbelt &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; sessions 
http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sessions&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;BaseUrlSession(base_url &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.org&amp;#34;&lt;/span&gt;) 
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/list&amp;#34;&lt;/span&gt;)
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/list/item&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;！注意requests_toolbelt没有默认包含在requests中的，使用时是需要额外安装的&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;设置默认超时&#34;&gt;设置默认超时&lt;/h2&gt;
&lt;p&gt;requests文档中推荐在生产环境下设置超时，如果你忘记设置超时，应用程序可能会当掉，尤其是在同步环境下，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://github.com/&amp;#39;&lt;/span&gt;,timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0.001&lt;/span&gt;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是每次设置超时时间会非常繁琐，偶尔忘记设置超时会非常恼火。
&lt;img src=&#34;https://justpic.org/images/posts/giphy.gif&#34; alt=&#34;giphy&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用Transport Adapters可以为所有的HTTP调用设置默认超时时间，当然使用后也是可以通过再定义覆盖默认配置，
下面看案例代码，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; requests.adapters &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; HTTPAdapter 
DEFAULT_TIMEOUT &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; 
&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TimeoutHTTPAdapter&lt;/span&gt;(HTTPAdapter):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self,&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args,&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; DEFAULT_TIMEOUT 
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; kwargs:
            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; kwargs[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;]  
            &lt;span style=&#34;color:#ff79c6&#34;&gt;del&lt;/span&gt; kwargs[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;] 
        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args,&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs)
    
    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;send&lt;/span&gt;(self, request,&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
        timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; kwargs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;)  
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; timeout &lt;span style=&#34;color:#ff79c6&#34;&gt;is&lt;/span&gt; None:
            kwargs[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;timeout 
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;send(request,&lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs)

&lt;span style=&#34;color:#6272a4&#34;&gt;#使用&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; requests

http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Session()
adapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; TimeoutHTTPAdapter(timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2.5&lt;/span&gt;) 
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mount(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://&amp;#34;&lt;/span&gt;,adapter)
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mount(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt;,adapter) 

&lt;span style=&#34;color:#6272a4&#34;&gt;#使用默认配置&lt;/span&gt;
response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.weibo.com&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#6272a4&#34;&gt;#覆盖默认配置&lt;/span&gt;
response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.weibo.com&amp;#39;&lt;/span&gt;,timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;)
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;失败后的重试&#34;&gt;失败后的重试&lt;/h2&gt;
&lt;p&gt;服务器当掉后，网络连接会变得拥塞或者有损，如果想要建立更具鲁棒性的系统，那么必须考虑网络连接失败，以及建立重试策略。
在Http客户端上添加重试策略是非常直接的，我们来创建一个HTTPAdapter，然后在adapter上添加策略&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; requests.adapter &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; HTTPAdapter 
&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; requests.packages.urllib3.util.retry &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Retry 

retry_strategy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Retry(
    total &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;,
    status_forcelist &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;429&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;502&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;503&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;504&lt;/span&gt;],
    method_whitelist &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;] 
)
adapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; HTTPAdapter(max_retries &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; retry_strategy)
http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Session() 
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mount(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://&amp;#34;&lt;/span&gt;,adapter) 
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mount(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://&amp;#34;&lt;/span&gt;,adapter) 

response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://en.wikipedia.org/w/api.php&amp;#34;&lt;/span&gt;)
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--adsense-text--&gt;
&lt;p&gt;默认的 Retry 类提供了健全的默认值，但是是高度可配置的，所以这里是我使用的最常见参数的纲要。
其中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;total&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;total代表重试的总次数，如果失败的请求或者重定向的次数超过这个数字，客户端将抛出 urllib3.exceptions.Maxretryerror 异常。通常3次重试就足够了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;status_forcelist&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;413&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;429&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;503&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要重试的 HTTP 响应代码。 您可能希望对常见的服务器错误(500、502、503、504)进行重试，因为服务器和反向代理并不总是遵循 HTTP 规范。 总是在超出429速率限制的情况下重试，因为默认情况下，urllib 库应该在失败请求时增量地退出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;method_whitelist&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;HEAD&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TRACE&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要重试的 HTTP 方法。 默认情况下，这包括除 POST 以外的所有 HTTP 方法，因为 POST 可能导致新的插入。 修改此参数以包含 POST，因为大多数 i 处理的 API 不返回错误代码并在同一调用中执行插入操作。 如果他们这样做了，您可能应该发布一个 bug 报告。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;backoff_factor&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;backoff_factor(退避因子)与失败的请求之间休眠的时间有关，其算法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;{backoff factor} &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; ({number of total retries} &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如，如果退避因子设置为:
1：连续睡眠：0.5，1，2，4，8，16，32，64，128，256
2：连续睡眠：1，2，4，8，16，32，64，128，256，512
10：连续睡眠：5，10，20，40，80，160，320，640，1280，2560
作为重试策略的合理默认实现，连续睡眠值是呈指数增长的，通过设置退避因子，可以决定每个睡眠乘以多少。这个值默认为0，表示不会设置截断二进制指数退避算法，重试将立即执行。&lt;/p&gt;
&lt;h3 id=&#34;结合超时和重试&#34;&gt;结合超时和重试&lt;/h3&gt;
&lt;p&gt;由于 HTTPAdapter 具有类比的特性，我们可以像下面这样将重试和超时结合起来:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;retries &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Retry(total&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, backoff_factor&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, status_forcelist&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;429&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;502&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;503&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;504&lt;/span&gt;])
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mount(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://&amp;#34;&lt;/span&gt;, TimeoutHTTPAdapter(max_retries&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;retries))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;调试http请求&#34;&gt;调试HTTP请求&lt;/h2&gt;
&lt;p&gt;有时候请求会失败，而你却不知道为什么。 记录请求和响应可以帮助您了解故障。 有两种方法可以做到这一点——要么使用内置的调试日志记录设置，要么使用请求钩子。&lt;/p&gt;
&lt;h3 id=&#34;打印http头文件&#34;&gt;打印HTTP头文件&lt;/h3&gt;
&lt;p&gt;更改大于0的日志记录调试级别将记录响应 HTTP 报头。 这是最简单的选项，但它不允许您查看 HTTP 请求或响应体。 如果您处理的 API 返回一个不适合日志记录或包含二进制内容的大体有效负载，那么它是有用的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; http

http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;HTTPConnection&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;debuglevel &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;

requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.google.com/&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#6272a4&#34;&gt;# Output&lt;/span&gt;
send: &lt;span style=&#34;color:#f1fa8c&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GET / HTTP/1.1&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Host: www.google.com&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;User-Agent: python-requests/2.22.0&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Accept-Encoding: gzip, deflate&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Accept: */*&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Connection: keep-alive&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&lt;/span&gt;
reply: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;HTTP/1.1 200 OK&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&lt;/span&gt;
header: Date: Fri, &lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt; Feb &lt;span style=&#34;color:#bd93f9&#34;&gt;2020&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;13&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;26&lt;/span&gt; GMT
header: Expires: &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
header: Cache&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;Control: private, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;max&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;age&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;打印所有&#34;&gt;打印所有&lt;/h3&gt;
&lt;p&gt;如果您想记录整个 HTTP 生命周期，包括请求和响应的文本表示，那么您可以使用请求钩子和请求工具自带的转储组件。
在处理基于 REST 的 API 时，我更喜欢这个选项，因为它不会返回非常大的响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; requests_toolbelt.utils &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; dump

&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;logging_hook&lt;/span&gt;(response, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):
    data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; dump&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dump_all(response)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt;(data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))

http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Session()
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;hooks[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [logging_hook]

http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.openaq.org/v1/cities&amp;#34;&lt;/span&gt;, params&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;BA&amp;#34;&lt;/span&gt;})

&lt;span style=&#34;color:#6272a4&#34;&gt;# Output&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; GET &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;v1&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;cities?country&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;BA HTTP&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1.1&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; Host: api&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;openaq&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;org

&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; HTTP&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt; OK
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; Content&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;Type: application&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;json; charset&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;utf&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; Transfer&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;Encoding: chunked
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; Connection: keep&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;alive
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
{
   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;meta&amp;#34;&lt;/span&gt;:{
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;openaq-api&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CC BY 4.0&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;website&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://docs.openaq.org/&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;limit&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;,
      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;found&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
   },
   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;results&amp;#34;&lt;/span&gt;:[
      {
         &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;BA&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Goražde&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Goražde&amp;#34;&lt;/span&gt;,
         &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;count&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;70797&lt;/span&gt;,
         &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;locations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试和模拟请求&#34;&gt;测试和模拟请求&lt;/h2&gt;
&lt;p&gt;在开发中使用第三方 API 会引入一个痛点——很难进行单元测试。 为减轻这种痛苦，Sentry 的工程师在开发过程中编写了一个模拟请求的库。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是将 HTTP 响应发送给服务器 getsentry / responses，而是截取 HTTP 请求，在应答时，测试过程中添加预定义的响应内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--adsense-text--&gt;
&lt;p&gt;下面请看案例代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; unittest
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; requests
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; responses


&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestAPI&lt;/span&gt;(unittest&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TestCase):
    @responses.activate  &lt;span style=&#34;color:#6272a4&#34;&gt;# intercept HTTP calls within this method&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test_simple&lt;/span&gt;(self):
        response_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ch_1GH8so2eZvKYlo2CSMeAfRqt&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;charge&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;customer&amp;#34;&lt;/span&gt;: {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cu_1GGwoc2eZvKYlo2CL2m31GRn&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;customer&amp;#34;&lt;/span&gt;},
            }
        &lt;span style=&#34;color:#6272a4&#34;&gt;# mock the Stripe API&lt;/span&gt;
        responses&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(
            responses&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GET,
            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.stripe.com/v1/charges&amp;#34;&lt;/span&gt;,
            json&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;response_data,
        )

        response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.stripe.com/v1/charges&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assertEqual(response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;json(), response_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果发出的 HTTP 请求与模拟响应不匹配，则会抛出 ConnectionError。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestAPI&lt;/span&gt;(unittest&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;TestCase):
    @responses.activate
    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;test_simple&lt;/span&gt;(self):
        responses&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(responses&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;GET, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.stripe.com/v1/charges&amp;#34;&lt;/span&gt;)
        response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://invalid-request.com&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;exceptions&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ConnectionError: Connection refused by Responses &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; the call doesn&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;t match any registered mock.&lt;/span&gt;

Request:
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; GET https:&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt;invalid&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;request&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;

Available matches:
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; GET https:&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt;api&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;stripe&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;v1&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;charges
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模仿浏览器行为&#34;&gt;模仿浏览器行为&lt;/h2&gt;
&lt;p&gt;如果你已经写了足够多的网络爬虫代码，你将会注意到某些网站会根据浏览器或者请求方式返回不同的 HTML内容。 有时这是一种反抓取措施，但通常服务器会进行用户代理嗅探，以找出最适合设备的内容(例如桌面或移动设备)。
如果你想返回与浏览器显示的内容相同的内容，你可以使用 Firefox 或 Chrome 发送的内容覆盖默认的 User-Agent 头请求集。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; requests
http &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Session()
http&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;headers&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;update({
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0&amp;#34;&lt;/span&gt;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hodovi.ch/blog/advanced-usage-python-requests-timeouts-retries-hooks/&#34;&gt;Advanced usage of Python requests - timeouts, retries, hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>什么是好的软件工程原则</title>
            <link>https://justpic.org/post/software-engineering-best-rules/</link>
            <pubDate>Sun, 08 Mar 2020 15:23:56 +0800</pubDate>
            
            <guid>https://justpic.org/post/software-engineering-best-rules/</guid>
            <description>&lt;p&gt;软件开发原则是一组具体的规则和建议，如果工程师想要编写工整、清晰和可维护的代码，那么他们需要在程序实现过程中应该遵循一些规则和建议。 没有魔杖可以把变量、类和函数的混合物变成完美的代码，但是有一些技巧和提示可以帮助工程师评判是否在做正确的事情。&lt;/p&gt;




&lt;div class=&#34;hugo-encryptor-container&#34;&gt;
  &lt;div class=&#34;hugo-encryptor-prompt&#34;&gt;
    
      &lt;p&gt;文章的部分内容被密码保护：&lt;/p&gt;
    
  &lt;/div&gt;
  &lt;div class=&#34;hugo-encryptor-form&#34;&gt;
    &lt;input
      class=&#34;hugo-encryptor-input&#34;
      placeholder=&#39;请输入密码&#39;
    /&gt;
    &lt;input
      class=&#34;hugo-encryptor-button&#34;
      type=&#34;button&#34;
      value=&#39;点击验证&#39;
      onclick=&#34;_click_handler(this)&#34;
    /&gt;
  &lt;/div&gt;
  &lt;div
    class=&#34;hugo-encryptor-cipher-text&#34;
    data-password=&#34;123345&#34;
    style=&#34;display: none;&#34;
  &gt;
    &lt;span style=&#34;display: none;&#34;&gt;--- DON&#39;T MODIFY THIS LINE ---&lt;/span&gt;
    &lt;p&gt;&lt;a href=&#34;http://www.gaoxiaojob.com/&#34;&gt;高校人才网&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.gaoxiaojob.com/zhaopin/diqu/sichuan/&#34;&gt;四川的&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.hbggzp.cn/JobWork/PubjobSearch?znid=010000&amp;amp;key=&#34;&gt;湖北的&lt;/a&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;让我们来看看这些基本的建议。 下面的一些原则是特定于 python 的，但大多数不是。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;量两次切一次measure-twice-and-cut-once&#34;&gt;量两次，切一次(Measure twice and cut once)&lt;/h2&gt;
&lt;p&gt;如果你只能从这篇文章中学到一个原则且最重要的一个，那么就是这个。 开发人员，架构师和经理人经常因为个人情绪、以及其他问题而难以集中注意力。 就工程师来说，这个原则意味着选择正确的解决方案，选择正确的方法来解决问题，选择正确的工具来解决问题，对建立的解决方案必须充满信心。 选择这里意味着投入一些思考，找到必要的资源，组建合适的团队，思考设计，思考方法，设定任务，控制结果，并为此承担责任。 这就是“活在当下”。 我认为我自己还没有准备好用正确的词汇来描述它。&lt;/p&gt;
&lt;h2 id=&#34;不要重复自己dont-repeat-yourself&#34;&gt;不要重复自己(Don&amp;rsquo;t Repeat Yourself)&lt;/h2&gt;
&lt;p&gt;这是一个相当简单但非常有用的原则，它说在不同的地方重复同样的事情是非常糟糕的。 首先，它涉及到进一步支持和修改代码的必要性。 如果某个代码片段在程序中的几个地方被复制，那么很有可能出现两种灾难性的情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当对源代码进行哪怕是很小的改动时，您需要在几个地方更改相同的代码。 这需要额外的时间、精力和注意力，而这件事件通常也非常不容易。&lt;/li&gt;
&lt;li&gt;第一项紧随第二项。 团队中的其他开发人员可能会意外地错过其中一个更改(只合并了控制系统中的分支) ，并将面对应用程序中随后出现的一系列错误。 这些 bug 可能会让您感到沮丧，因为您已经听说这样的 bug 似乎已经被修复了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这方面，有一个建议ーー如果在清单中发现任何代码超过两次，则应以单独的方式来处置。 这是通用做法。 事实上，即使再次遇到重复的bug，您也应该考虑创建一个单独的方法。&lt;/p&gt;
&lt;h2 id=&#34;奥卡姆剃刀occams-razor&#34;&gt;奥卡姆剃刀(Occam’s Razor)&lt;/h2&gt;
&lt;p&gt;这是一个非常普遍的想法，它来自于哲学编程。 这个原则得名于奥克姆的英国修道士威廉。 这一原则表明: ”没有必要，不得增加实体”。 在工程学中，这一原则被解释为: 没有必要创建不必要的实体。 因此，首先考虑添加另一个方法 / 类 / 工具 / 流程等的好处不见得总是一个好主意。 毕竟，如果您添加了另一个方法 / 类 / 工具 / 流程等等，除了增加复杂性之外，您没有得到任何其他好处，那还有什么意义呢？&lt;/p&gt;
&lt;h2 id=&#34;保持足够简单keep-it-simple-stupid-&#34;&gt;保持足够简单(Keep It Simple Stupid )&lt;/h2&gt;
&lt;p&gt;这是一个与上面非常类似的原则，但它的含义略有不同。 这个原则要求代码必须尽可能简单，不能有复杂的结构，否则会使代码的调试和维护复杂化。 此外，对于另一个程序员来说，理解代码的逻辑将会更加困难，这反过来也将需要额外的时间和精力。 这就是为什么您应该始终尝试使用简单的构造来尽可能多地解决问题，而不需要使用大量的分支、深层嵌套和过度重载的类结构。 通过这样做，你将使自己和同事的生活更加轻松，因为复杂性会产生错误。 记住 Peter Hintiens 说过的话: “简单永远比功能好”。&lt;/p&gt;
&lt;h2 id=&#34;你不会需要它you-arent-gonna-need-it-&#34;&gt;你不会需要它（You Aren’t Gonna Need It ）&lt;/h2&gt;
&lt;p&gt;这是许多程序员都会遇到的问题。 从项目一开始就希望立即实现所有必要的(有时甚至是不必要的)功能。 也就是说，当开发人员从一开始就将所有可能的方法添加到类中并实现它们时，甚至可能在未来永远不会使用它们。 因此，根据这个建议，首先，只实现您需要的东西，然后，如果必要的话，再扩展相应功能。 这样，您就可以节省调试代码的工作量、时间以及精力，而实际上这些代码却并不需要。&lt;/p&gt;
&lt;h2 id=&#34;前期大设计big-design-up-front&#34;&gt;前期大设计(Big Design Up Front)&lt;/h2&gt;
&lt;p&gt;在开始开发功能之前，您应该首先考虑应用程序架构，并将整个系统设计为足够小的细节，然后才按照预定义的计划进行实现。 原则是有存在的权利的，但是最近，它受到了相当多的批评。 这首先与设计和制定过程中的方案陈旧有关。 在这方面，仍然有必要进行后续的修改。 但它也具有不可否认的优点，在正确的设计中，可以大大降低进一步调试和纠错的成本。 此外，这样的信息系统，作为一个规则，更简洁的架构是正确的。&lt;/p&gt;
&lt;h2 id=&#34;避免过早优化avoid-premature-optimization&#34;&gt;避免过早优化(Avoid Premature Optimization)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“过早的优化是编程中所有问题(或者至少是大部分问题)的根源” &amp;ndash; Donald Knuth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优化是加快程序运行速度，降低系统资源消耗的一个非常正确和必要的过程。 但是每件事都有它自己的时机。 如果在开发的早期阶段进行优化，可能弊大于利。 首先，它与这样一个事实相关，即优化代码的开发需要更多的时间和精力用于开发和支持。 在这种情况下，您通常必须首先检查所选择的开发方法的正确性。 这就是为什么一开始使用一个简单但不是最优的方法更有利可图。 稍后，在估计这种方法会降低应用程序的工作速度时，可以使用一种更快或更少资源密集型的算法。 此外，只要你最初实现了最优的算法，需求就可能改变，代码就会变成垃圾。 因此，没有必要在过早的优化上浪费时间。&lt;/p&gt;
&lt;h2 id=&#34;最小惊奇原则principle-of-least-astonishment&#34;&gt;最小惊奇原则(Principle Of Least Astonishment)&lt;/h2&gt;
&lt;p&gt;这个原则意味着您的代码应该是直观和明显的，并且在检查代码时不会让其他开发人员感到惊讶。 例如，如果这个方法被称为“ making cookies” ，但是结果是得到了土豆，那么这段代码就是不好的(很明显)。 此外，如果无法避免副作用，应尽量避免副作用，并将副作用记录在案。&lt;/p&gt;
&lt;h2 id=&#34;solid&#34;&gt;S.O.L.I.D.&lt;/h2&gt;
&lt;p&gt;“SOLID”实际上是一组面向对象设计原则。 “ SOLID”中的每个字母代表一个原则，它们是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;u&gt;单一责任（Single responsibility）:&lt;/u&gt; &lt;br&gt;
声明每个模块或类应该对软件提供的功能的一个部分负责，并且这个责任应该完全由类封装;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;开闭原则（Open-closed): &lt;/u&gt;&lt;br&gt;
声明软件实体(类、模块、功能等)应该对扩展开放，但对修改关闭;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;李斯科夫替换(Liskov substitution)&lt;/u&gt;&lt;br&gt;
声明继承的类应该补充而不是替换基类的行为;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;界面隔离(Interface segregation)&lt;/u&gt;&lt;br&gt;
声明任何客户端都不应该被迫依赖于它不使用的方法;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;依赖反转(Dependency inversion)&lt;/u&gt;&lt;br&gt;
程序员应该在接口层而不是在实现层工作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当一起应用时，这些原则可以帮助开发人员创建易于维护和扩展的代码。&lt;/p&gt;
&lt;h2 id=&#34;demeter定律&#34;&gt;Demeter定律&lt;/h2&gt;
&lt;p&gt;该原则的基本思想是在类之间划分职责区域，并将逻辑封装在类、方法或结构中。 可以从这一原则中区分出若干建议:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类或实体应该是独立的&lt;/li&gt;
&lt;li&gt;你应该尝试减少不同类之间的连接数量(所谓的coupling 耦合)&lt;/li&gt;
&lt;li&gt;关联的类必须在一个 module / package / 目录中(也称为cohesion 凝聚力.）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;遵循这些原则，应用程序变得更加灵活、易于理解和易于维护。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;同胞们，让我们成为伟大的工程师吧！ 让我们考虑一下设计和构建健壮且实现良好的系统，而不是成长中的有机怪物。 列举的原则在本质上是高度相关和联系的。 当然，我没有创造它们，但是一个小小的提醒也不会伤害到我，至少我是健忘的。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://luminousmen.com/post/what-are-the-best-engineering-principles&#34;&gt;What Are The Best Software Engineering Principles?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/2EJrdmOt_Of-o2IrtK9wlQ&#34;&gt;工程效能提升&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.tasubo.com/2020/02/how-my-software-development-has-changed-in-the-last-10-year-part-2.html&#34;&gt;我的十年&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Markdown写作指南</title>
            <link>https://justpic.org/post/markdown-writing-rules/</link>
            <pubDate>Wed, 04 Mar 2020 22:18:02 +0800</pubDate>
            
            <guid>https://justpic.org/post/markdown-writing-rules/</guid>
            <description>&lt;p&gt;Markdown是一种轻量级标记语言。你不需要关心标题多大字号，段前距多少，列表缩进几格，只要在纯文本前后增加一些标记符号（例如 # - * &amp;gt;)，就能轻松写出工整精美的文章。与富文本编辑器（例如Word）是通过点击图形化的功能按钮来实现排版，而Markdown则是通过标记字符去赋予文字不同格式。易读易写（easy-to-read and easy-to-write),让任何与文字打交道的人专注于写作，不用操心排版，这一点类似vi编辑器功能。&lt;/p&gt;
&lt;p&gt;本文主要从Markdown主要特点、入门语法、写作结构大纲、应用场景四个方面对Markdown写作指南进行详细介绍。&lt;/p&gt;
&lt;h3 id=&#34;markdown-主要特点&#34;&gt;Markdown 主要特点&lt;/h3&gt;
&lt;p&gt;Markdown主要有以下三大特点：&lt;br&gt;
&lt;strong&gt;特点1. 格式统一&lt;/strong&gt;&lt;br&gt;
同一份Word文档，在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的设备：Windows、macOS、Android、iOS&lt;/li&gt;
&lt;li&gt;不同的版本：旧版Word、新版Word&lt;/li&gt;
&lt;li&gt;不同的软件：Microsoft Office、WPS
可能显示不一样的效果。而Markdown可以Write once,export everywhere。不管在电脑上，还是手机上，用Markdwon写出来的文章都能带来舒适、统一、美好的阅读体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;特点2. 向外兼容&lt;/strong&gt;&lt;br&gt;
可以导出PDF、Word、HTML、图片等格式分享给没有安装Markdown编辑器的人，强烈推荐使用pandoc工具进行markdown文档的转换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点3. 直接支持html,css&lt;/strong&gt;&lt;br&gt;
Markdown是直接支持在markdown文档中使用html和css语言的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;lt;a href=&amp;#34;#jump_1&amp;#34;&amp;gt;来个页内跳转&amp;lt;/a&amp;gt;，跳转到文未的：`&amp;lt;a id=&amp;#34;jump_1&amp;#34;&amp;gt;我是页内跳转到的位置&amp;lt;/a&amp;gt;` ,对应：`id=&amp;#34;jump_1&amp;#34;`
&amp;lt;span  style=&amp;#34;color: #5bdaed; &amp;#34;&amp;gt;先给点颜色你看看&amp;lt;/span&amp;gt;
&amp;lt;span  style=&amp;#34;color: #AE87FA; &amp;#34;&amp;gt;再给点颜色你看看&amp;lt;/span&amp;gt;
&amp;lt;span  style=&amp;#34;font-size:1.3em;&amp;#34;&amp;gt;试试改变字体大小&amp;lt;/span&amp;gt;
&amp;lt;span  style=&amp;#34;font-size:1.3em;font-weight: bold;&amp;#34;&amp;gt;改变字体大小，再来个粗体又如何？&amp;lt;/span&amp;gt;

&amp;lt;p style=&amp;#34;text-align:center&amp;#34;&amp;gt;
试试内容居中

&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;#34;text-align:right&amp;#34;&amp;gt;
那内容居右呢？
&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;#34;text-align:center;color:#1e819e;font-size:1.3em;font-weight: bold;&amp;#34;&amp;gt;
来个综合的试试
&amp;lt;br/&amp;gt;
第二行
&amp;lt;/p&amp;gt;
***
&amp;lt;a id=&amp;#34;jump_1&amp;#34;&amp;gt;我是页内跳转到的位置&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预览效果：&lt;br&gt;
&lt;a href=&#34;#jump_1&#34;&gt;来个页内跳转&lt;/a&gt;，跳转到文未的：&lt;code&gt;&amp;lt;a id=&amp;quot;jump_1&amp;quot;&amp;gt;我是页内跳转到的位置&amp;lt;/a&amp;gt;&lt;/code&gt; ,对应：&lt;code&gt;id=&amp;quot;jump_1&amp;quot;&lt;/code&gt;
&lt;span  style=&#34;color: #5bdaed; &#34;&gt;先给点颜色你看看&lt;/span&gt;
&lt;span  style=&#34;color: #AE87FA; &#34;&gt;再给点颜色你看看&lt;/span&gt;
&lt;span  style=&#34;font-size:1.3em;&#34;&gt;试试改变字体大小&lt;/span&gt;
&lt;span  style=&#34;font-size:1.3em;font-weight: bold;&#34;&gt;改变字体大小，再来个粗体又如何？&lt;/span&gt;&lt;/p&gt;
  &lt;p style=&#34;text-align:center&#34;&gt;
  试试内容居中
  &lt;/p&gt;
  &lt;p style=&#34;text-align:right&#34;&gt;
  那内容居右呢？
  &lt;/p&gt;
  &lt;p style=&#34;text-align:center;color:#1e819e;font-size:1.3em;font-weight: bold;&#34;&gt;
  来个综合的试试
  &lt;br/&gt;
  第二行
  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a id=&#34;jump_1&#34;&gt;我是页内跳转到的位置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;markdown入门语法&#34;&gt;Markdown入门语法&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.标题、列表、引用&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标记符号&lt;/th&gt;
&lt;th&gt;标记结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;# + 空格 + 文本&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一级标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;##+空格+文本&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;二级标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;###+空格+文本&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三级标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-+空格+文本&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无序列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;1+.+空格+文本&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;有序列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;+空格+文本&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;引用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;标题&lt;br&gt;
支持6种大小的标题，分别对应&lt;code&gt;#&lt;/code&gt;,&lt;code&gt;##&lt;/code&gt;,&lt;code&gt;###&lt;/code&gt;,&lt;code&gt;####&lt;/code&gt;,&lt;code&gt;#####&lt;/code&gt;,&lt;code&gt;######&lt;/code&gt;，和样式文件中的&lt;code&gt;h1,...,h6&lt;/code&gt;如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;##### H5
###### H6
#### 行内代码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表&lt;br&gt;
建议使用-作为无须列表，型号*可能和加粗和斜体符号产生混淆，加号+不流行。&lt;/li&gt;
&lt;li&gt;有序列表&lt;br&gt;
语法一（手动排序）：&lt;code&gt;1+.+空格+文本&lt;/code&gt;    &lt;br&gt;
1. 斜月沉沉藏海雾，碣石潇湘无限路。
2. 不知乘月几人归，落月摇情满江树。
3. 春江潮水连海平，海上明月共潮生。        &lt;br&gt;
语法二（自动排序）&lt;br&gt;
对于比较长的、可能会修改的列表（尤其是很长的嵌套列表），请使用&lt;code&gt;懒人编号法&lt;/code&gt;。纵使有新的列表项&lt;code&gt;插队&lt;/code&gt;,把序号弄乱了也没关系，Markdown编辑器自动会对序号进行纠错。&lt;br&gt;
语法说明：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;1. Foo.
1. Bar.
    1. Foofoo.
    1. Barbar. 
    1. Gargar
1. Baz. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;预览效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Foo.&lt;/li&gt;
&lt;li&gt;Bar.
&lt;ol&gt;
&lt;li&gt;Foofoo.&lt;/li&gt;
&lt;li&gt;Barbar.&lt;/li&gt;
&lt;li&gt;Gargar&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Baz.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;嵌套列表&lt;br&gt;
缩进2~4个空格或一个Tab（推荐），可以嵌套列表&lt;br&gt;
示例一
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;1. 不知乘月几人归，落月摇情满江树。
    - 与君吟弄风月，端不负平生。
    - 对秋深，离恨苦，数夜满庭风雨。
    - 五月畬田收火米，三更津吏报潮鸡。
2. 人姝丽，粉香吹下，夜寒风细。
    - 弓弦抱汉月，马足践胡尘。
    - 寒月悲笳，万里西风瀚海沙。
    - 东堂坐见山，云风相吹嘘。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;预览效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不知乘月几人归，落月摇情满江树。
&lt;ul&gt;
&lt;li&gt;与君吟弄风月，端不负平生。&lt;/li&gt;
&lt;li&gt;对秋深，离恨苦，数夜满庭风雨。&lt;/li&gt;
&lt;li&gt;五月畬田收火米，三更津吏报潮鸡。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人姝丽，粉香吹下，夜寒风细。
&lt;ul&gt;
&lt;li&gt;弓弦抱汉月，马足践胡尘。&lt;/li&gt;
&lt;li&gt;寒月悲笳，万里西风瀚海沙。&lt;/li&gt;
&lt;li&gt;东堂坐见山，云风相吹嘘。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用
在每一行使用&lt;code&gt;&amp;gt;&lt;/code&gt;符号，包括换行的句子&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.特殊说明的文字&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标记符号&lt;/th&gt;
&lt;th&gt;标记结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;**+加粗+**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;加粗&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*+斜体+*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~~+删除线+~~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;del&gt;删除线&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3.任务列表&lt;/strong&gt;&lt;br&gt;
Markdown支持任务列表&lt;br&gt;
语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;- [ ] 纯牛奶
- [x] 西瓜
- [ ] 鸡蛋
- [ ] 保鲜膜
- [ ] 猪肉
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;预览效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;纯牛奶&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;西瓜&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;鸡蛋&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;保鲜膜&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;猪肉&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4.表格&lt;/strong&gt;&lt;/p&gt;
&lt;!--adsense--&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;|左对齐|居中对齐|右对齐|
|:---|:---:|----:|
|**加粗**|[插入连接]（https://)|5.7|
|`换行`&amp;lt;br/&amp;gt;下一行|![插入图片](ht图片上：//）|10.4|

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;预览效果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;左对齐&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;居中对齐&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;右对齐&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;加粗&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;[插入连接]（https://)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;换行&lt;/code&gt;&lt;br/&gt;下一行&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;![插入图片](ht图片上：//）&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;5.代码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;行内代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用两个重音符`（backtick，在Tab键上方)包裹&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;`Markdown`&lt;/span&gt;是一种轻量级标记语言
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;预览&lt;br&gt;
&lt;code&gt;Markdown&lt;/code&gt;是一种轻量级标记语言&lt;/li&gt;
&lt;li&gt;重音符前后空一格&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; 推荐：使用键盘快捷键 &lt;span style=&#34;color:#f1fa8c&#34;&gt;`Ctrl+D`&lt;/span&gt; 可以将当前网页保存为书签。
&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; 反对：使用键盘快捷键&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Ctrl+D`&lt;/span&gt;可以将当前网页保存为书签。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;- 推荐：使用键盘快捷键 `Ctrl+D` 可以将当前网页保存为书签。
- 反对：使用键盘快捷键`Ctrl+D`可以将当前网页保存为书签。
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码块&lt;br&gt;
将三个重音符`置于代码块的首行和末行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;  print &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello,python!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注：markdown对代码块的语法是开始和结束行都要添加：```,其中 ` 为windows键盘左上角那个。&lt;br&gt;
如果要精确指定语言（如：&lt;code&gt;java,cpp,css,xml,javascript,python,php,go,kotlin,lua,objectivec&lt;/code&gt;等等）时，在头部直接指定，如：```javascript，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ```javascript
  function showSnackbar() {
    var $snackbar = $(&#39;#snackbar&#39;);
    $snackbar.addClass(&#39;show&#39;);
    setTimeout(() =&amp;gt; {
      $snackbar.removeClass(&#39;show&#39;);
    }, 3000);
  }
  ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;6.强制换行&lt;/strong&gt; &lt;br&gt;
在行末使用空格（两个以上）+换行(Enter) &lt;br&gt;
预览效果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;   &lt;span style=&#34;color:#f1fa8c&#34;&gt;`enticing`&lt;/span&gt; 
   &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; Her neck was &lt;span style=&#34;color:#ff79c6&#34;&gt;short&lt;/span&gt; but rounded and her arms plump and enticin
     他的脖子短，但浑圆可爱；两臂丰腴，也很动人。by《飘》
   &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; This was enticing to Wozniak,even more than any prospect &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; getting rich.  
     这句话对沃兹尼亚克的诱惑太大了，比变成富人的诱惑还要大。by《乔布斯传》
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;7.外链的超链接&lt;/strong&gt;
试试外链的超链接：&lt;a href=&#34;http://blog.qikqiak.com&#34;&gt;我是外链的超链接&lt;/a&gt;,markdown对链接的语法为：&lt;code&gt;\[\]()&lt;/code&gt;,如：&lt;code&gt;\[我是外链的超链接\](http://blog.qikqiak.com)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.页内的超链接&lt;/strong&gt;
试试页内的超链接：&lt;a href=&#34;#jump_1&#34;&gt;我是页内的超链接&lt;/a&gt;，注：你先要在要跳转的到地方放置一个类似：&lt;code&gt;&amp;lt;a id=&amp;quot;jump_1&amp;quot;&amp;gt;任意内容&amp;lt;/a&amp;gt;&lt;/code&gt;的锚点。由&lt;code&gt;id=&amp;quot;jump_1&amp;quot; &lt;/code&gt;来匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9.分隔线&lt;/strong&gt;&lt;br&gt;
语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;***&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;预览效果：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;10.符号说明&lt;/strong&gt;&lt;/p&gt;
&lt;!--adsense--&gt;
&lt;p&gt;Markdown针对特殊符号具有转义定义，具体解释如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;符号&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;说明&lt;/th&gt;
&lt;th&gt;对应编码&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;AND 符号&lt;/td&gt;
&lt;td&gt;&amp;amp; amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小于&lt;/td&gt;
&lt;td&gt;&amp;amp; lt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt; &lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;空格&lt;/td&gt;
&lt;td&gt;&amp;amp; nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;¿&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;倒问号&lt;/td&gt;
&lt;td&gt;&amp;amp; iquest;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;?&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;问号&lt;/td&gt;
&lt;td&gt;&amp;amp; quest;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;«&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;左书名号&lt;/td&gt;
&lt;td&gt;&amp;amp; laquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;»&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;右书名号&lt;/td&gt;
&lt;td&gt;&amp;amp; raquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;“&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;引号&lt;/td&gt;
&lt;td&gt;&amp;amp; quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;‘&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;左单引号&lt;/td&gt;
&lt;td&gt;&amp;amp; lsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;’&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;右单引号&lt;/td&gt;
&lt;td&gt;&amp;amp; rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;“&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;左双引号&lt;/td&gt;
&lt;td&gt;&amp;amp; ldquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;”&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;右双引号&lt;/td&gt;
&lt;td&gt;&amp;amp; rdquo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;¶&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;段落符号&lt;/td&gt;
&lt;td&gt;&amp;amp; para;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;§&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;章节符&lt;/td&gt;
&lt;td&gt;&amp;amp; sect;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;乘号&lt;/td&gt;
&lt;td&gt;&amp;amp; times;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;÷&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;除号&lt;/td&gt;
&lt;td&gt;&amp;amp; divide;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;±&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;加减号&lt;/td&gt;
&lt;td&gt;&amp;amp; plusmn;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;ƒ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;function&lt;/td&gt;
&lt;td&gt;&amp;amp; fnof;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;根号&lt;/td&gt;
&lt;td&gt;&amp;amp; radic;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;∞&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;无穷大&lt;/td&gt;
&lt;td&gt;&amp;amp; infin;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;°&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;度&lt;/td&gt;
&lt;td&gt;&amp;amp; deg;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;≠&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;不等号&lt;/td&gt;
&lt;td&gt;&amp;amp; ne;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;≡&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;恒等于&lt;/td&gt;
&lt;td&gt;&amp;amp; equiv;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;≤&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;小于等于&lt;/td&gt;
&lt;td&gt;&amp;amp; le;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;≥&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;大于等于&lt;/td&gt;
&lt;td&gt;&amp;amp; ge;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⊥&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;垂直符号&lt;/td&gt;
&lt;td&gt;&amp;amp; perp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;←&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;左箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; larr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;→&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;右箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; rarr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;↑&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;上箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; uarr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;↓&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;下箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; darr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;↔&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;水平箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; harr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;↕&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;竖直箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; varr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⇐&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双线左箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; lArr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⇒&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双线右箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; rArr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⇑&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双线上箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; uArr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⇓&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双线上箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; dArr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⇔&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双线水平双箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; hArr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⇕&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;双线竖直箭头&lt;/td&gt;
&lt;td&gt;&amp;amp; vArr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;♠&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;黑桃&lt;/td&gt;
&lt;td&gt;&amp;amp; spades;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;♥&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;红桃&lt;/td&gt;
&lt;td&gt;&amp;amp; hearts;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;♣&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;梅花&lt;/td&gt;
&lt;td&gt;&amp;amp; clubs;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;♦&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;方块&lt;/td&gt;
&lt;td&gt;&amp;amp; diams;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;©&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;版权&lt;/td&gt;
&lt;td&gt;&amp;amp; copy;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;®&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;注册商标&lt;/td&gt;
&lt;td&gt;&amp;amp; reg;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;™&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;商标&lt;/td&gt;
&lt;td&gt;&amp;amp; trade;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;¥&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;人民币&lt;/td&gt;
&lt;td&gt;&amp;amp; yen;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;€&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;欧元&lt;/td&gt;
&lt;td&gt;&amp;amp; euro;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;¢&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;美分&lt;/td&gt;
&lt;td&gt;&amp;amp; cent;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;£&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;英磅&lt;/td&gt;
&lt;td&gt;&amp;amp; pound;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;⊕&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;/td&gt;
&lt;td&gt;&amp;amp; oplus;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;½&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;二分之一&lt;/td&gt;
&lt;td&gt;&amp;amp; frac12;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;¼&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;四分之一&lt;/td&gt;
&lt;td&gt;&amp;amp; frac14;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;‰&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;千分符号&lt;/td&gt;
&lt;td&gt;&amp;amp; permil;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;∴&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;所以&lt;/td&gt;
&lt;td&gt;&amp;amp; there4;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;π&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;圆周率&lt;/td&gt;
&lt;td&gt;&amp;amp; pi;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;¹&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;上标1&lt;/td&gt;
&lt;td&gt;&amp;amp; sup1;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;α&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;alpha&lt;/td&gt;
&lt;td&gt;&amp;amp; alpha;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;β&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;beta&lt;/td&gt;
&lt;td&gt;&amp;amp; beta;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;γ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;gamma&lt;/td&gt;
&lt;td&gt;&amp;amp; gamma;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;δ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;delta&lt;/td&gt;
&lt;td&gt;&amp;amp; delta;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;θ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;theta&lt;/td&gt;
&lt;td&gt;&amp;amp; theta;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;λ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;lambda&lt;/td&gt;
&lt;td&gt;&amp;amp; lambda;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;σ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;sigma&lt;/td&gt;
&lt;td&gt;&amp;amp; sigma;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;τ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;tau&lt;/td&gt;
&lt;td&gt;&amp;amp; tau;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;写作结构大纲&#34;&gt;写作结构大纲&lt;/h3&gt;
&lt;p&gt;一般按照如下结构参照Word文档结构进行markdown文档的大纲编写。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;### 标题
#### 层级
# 一级标题：文章的标题  
## 二级标题：文章主要部分的大标题  
### 三级标题：二级标题下面一级的小标题  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;虽然Markdown最大支持######六级标题，为了保持层级的简单，防止出现过于复杂的章节，请谨慎使用四级标题（除非是长文章）。如果三级标题下有并列性的内容，可以使用加粗、有序列表或无序列表代表末级标题。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;### 三级标题
**四级标题A**
- 论据1（五级标题）
    - 细分论据 1(六级标题)
    - 细分论据 2（六级标题)
    - 细分论据 3(六级标题)
- 论据2
- 论据3

**四级标题B** 
1. 论据
2. 论据
3. 论据

**四级标题C**
- 论据1
- 论据2 
- 论据3

----
### 三级标题（适用于长文章）
#### 四级标题A
#### 四级标题B
#### 四级标题C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;文档标题拟定要点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标题要简短，结尾不带标点符号。&lt;/li&gt;
&lt;li&gt;（源码上）标题前后空一行（段前距和段后距）。&lt;/li&gt;
&lt;li&gt;大标题和小标题之间要有内容过度（引出或概括下文）。&lt;br&gt;
示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;# Title
开门见山地告诉读者这篇文章讲什么？
一级标题作为文章的（页面）标题（H），并且尽可能和文件名称保持一致。如果文章很长，使用[TOC]生成目录。
## what
先定义问题是什么?...
正文从二级标题开始
## Why
为什么会出现这样的问题?...
## How
下一步该怎么办?...
## See also
文末别忘了贴上参考连接。
* https://link-to-more-info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!--adsense-text--&gt;
&lt;h3 id=&#34;markdown应用场景&#34;&gt;Markdown应用场景&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;6大应用场景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.公众号排版&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mdnice.com/&#34;&gt;Markdown Nice&lt;/a&gt;：让微信排版变 Nice，支持自定义主题 CSS。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knb.im/mp/&#34;&gt;可能吧公众号 Style 一键转换器&lt;/a&gt;：老司机禅叔出品。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://justpic.org/md&#34;&gt;md&lt;/a&gt;:自用微信公众号排版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.博客&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.知乎专栏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.幻灯片&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.专业报告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.笔记&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;markdown推荐编辑器&#34;&gt;Markdown推荐编辑器&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作系统&lt;/th&gt;
&lt;th&gt;Markdown编辑器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;windows&lt;/td&gt;
&lt;td&gt;typora&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;android&lt;/td&gt;
&lt;td&gt;纯纯写作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macos/ios&lt;/td&gt;
&lt;td&gt;Ulysses&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/36610&#34;&gt;Markdown 完全入门（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/36682&#34;&gt;Markdown 完全入门（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wiz.cn/feature-markdown.html&#34;&gt;为知笔记 Markdown 新手指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/tag/Markdown&#34;&gt;Markdown 合集 - 少数派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/3beac9fd6496&#34;&gt;Google Markdown 书写风格指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/styleguide/blob/gh-pages/docguide/style.md&#34;&gt;Markdown Style Guide by Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/54912&#34;&gt;Typora 完全使用详解 - liquid617&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bmpi.dev/dev/what-markdown-can-do/&#34;&gt;用markdown可以做什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mixu/markdown-styles&#34;&gt;markdown styles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/tech-writing/overview&#34;&gt;tech-writing-course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kuang.netlify.com/blog/hugo.html&#34;&gt;hugo使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关联阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA4MjM2NDE3MQ==&amp;amp;mid=2247483680&amp;amp;idx=1&amp;amp;sn=0c20215b5db870ca8e02f2644921ee04&amp;amp;chksm=9f879344a8f01a52abd237ba20d6a2c745185340a926e5087eb4150733799eaf152cd04638f6&amp;amp;token=690110981&amp;amp;lang=zh_CN#rd&#34;&gt;markdown写作指南 - justpic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>浅谈低代码开发</title>
            <link>https://justpic.org/post/lowcode-thoughts/</link>
            <pubDate>Mon, 02 Mar 2020 10:20:38 +0800</pubDate>
            
            <guid>https://justpic.org/post/lowcode-thoughts/</guid>
            <description>&lt;p&gt;本文从低代码发展历史、 相关领域发展情况、以及具体的实现三个方面对低代码的前世今生进行探索。&lt;/p&gt;
&lt;h2 id=&#34;低代码发展历史&#34;&gt;低代码发展历史&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;技术可能是一个革命自我的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;低代码开发平台的术语虽然2014年才被Forrester Research正式提出，但最早的产品雏形可追溯到2001年所建立的OutSystems中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;低代码出现的时机和原因&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件定义概念的兴起（Software define anything）&lt;/li&gt;
&lt;li&gt;高效协同工作的要求&lt;br&gt;
减低信息化活动的技术门槛，让更多的人参与到信息化活动中来，屏蔽复杂的软件设计、编码、测试等比较专业的软件工程过程，使编程工作更好承接业务本身，敏捷精益化。&lt;/li&gt;
&lt;li&gt;政策推动的需要&lt;/li&gt;
&lt;li&gt;软件产品的迭代进化&lt;/li&gt;
&lt;li&gt;技术自我革命&lt;/li&gt;
&lt;/ol&gt;
&lt;!--adsense--&gt;
&lt;p&gt;&lt;strong&gt;低代码市场发展情况&lt;/strong&gt; &lt;br&gt;
根据2018年以来的投融资情况，低代码开发产品市场主要集中在&lt;a href=&#34;&#34;&gt;OutSystems&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;Mendix&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;搭搭云&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;奥哲网络&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;轻流&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;magic&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;黑帕云&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;ClickPaas&lt;/a&gt;和&lt;a href=&#34;&#34;&gt;数式科技&lt;/a&gt;，其中部分初创企业最高已获得亿级美元融资，成功跻身独角兽。&lt;/p&gt;
&lt;!--
1. 2018年Q1  
   - 搭搭云获千万级人民币A轮融资（低代码）
   - 奇点云获晨兴资本凌涛2400万元Pre-A轮融资（中台）
   - UiPath获Accel领投1.53亿美元B轮融资，跻身独角兽。（RPA）  
2. 2018年Q2   
   - OutSystems获KKR和高盛共同筹集的3.6亿欸元收购“大量”少数股权，跻身独角兽企业。（低代码）
   - 奥哲网络获阿里巴巴5000万元A+轮战略投资（低代码）
   - 数澜科技获云锋基金领投1.45亿元A轮融资（中台）
3. 2018年Q3  
   - 西门子6亿欧元收购Mendix（低代码）
   - 云徙科技获红衫资本中国基金领投1.5亿元A+轮融资（中台）
   - AntWorks获SBI AI&amp;Blockchain基金1500万美元A轮融资（RPA）
   - Automation Anywhere获思颐投资和高盛成长基金领投2.5亿美元A轮融资，跻身独角兽。（RPA）
4. 2018年Q4
   - 轻流获新进创投、紫竹小苗近千万元Pre-A轮融资（低代码）
   - 熵筒科技获小米领投的近亿元A轮融资（中台）
   - 滴普科技获IDG资本领投1500万元天使轮融资（中台）
   - 奇点云获晨兴资本领投今6000万元A轮粽子（中台)
   - 达观数据获晨山资本领投1.6亿人民币B轮融资(RPA)
   - UiPath获CapitalG和红衫资本2.65亿美元C轮融资(RPA)
5. 2019年Q1 
   - 奥哲网络获高榕资本亿元B轮融资(低代码)
   - 数澜科技获天堂硅谷资本领投1亿人民币A+轮融资(中台)
   - 滴普科技获高瓴资本领投Pre-A轮融资(中台)
   - Automation Anywhere获Workday资本战略投资（RPA）
6. 2019年Q2 
   - Magic获PowPow Inc.（低代码）
   - 维妥科技获英诺天使基金数百万元种子轮融资（中台）
   - 数列科技获深创投领投千万级人民币Pre-A轮融资（中台）
   - UiPath获Coatue领投5.68亿美元D轮融资（RPA）
   - 来也科技宣布与奥森科技合并，同时“新来也”获凯辉创新基金领投3500万美元B+轮融资（RPA）
   - 弘玑Cyclone获DCM中国，源码资本千万美元A轮融资（RPA）
   - 云扩科技获金沙江创投，明势资本领投千万美元A轮融资（RPA）
7. 2019年Q3
   - 黑帕云获天使轮融资（低代码）
   - ClickPaas获晨兴资本数百万美元A轮融资（低代码）
   - 数式科技获盈动资本数千万元天使轮融资（低代码）
   - 维妥科技获梅花创投领投近千万元天使轮融资（中台）
   - 滴普科技获晨兴资本、高瓴资本、IDG资本联合领投3500万美元A轮融资（中台）
   - 熵筒科技获高榕资本领投数千万美元级B轮融资（中台）
   - ElectroNeek获Softline领投50万美元种子轮融资（RPA）
   - 云扩科技获红衫资本中国基金数千万元A+轮融资（RPA）
8. 2019年Q4
   - 云徙科技获3.5亿元B轮融资，成为业内第一家突破B轮的中台服务商（中台）
   - 极睿科技获红衫资本中国基金领投亿元级A轮融资（RPA）
   - Automation Anywhere获Saleforce领投2.9亿美元B轮融资（RPA）
 --&gt;  
&lt;p&gt;&lt;strong&gt;低代码热度和趋势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了更直观地体会低代码的热度，运用百度指数、头条指数、Google Trends等工具查看低代码的热度和趋势。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;百度指数上对低代码的搜索情况如下：&lt;br&gt;
&lt;img src=&#34;https://justpic.org/images/post/bdindex_lowcode.png&#34; alt=&#34;低代码&#34;&gt;&lt;br&gt;
图中显示在今年3月份低代码一词热度最高，获得越来越多的关注。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Trends上对lowcode、DDD、DSL、BPM的搜索情况如图：&lt;br&gt;
&lt;img src=&#34;https://justpic.org/images/post/gindex_lowcode.PNG&#34; alt=&#34;google lowcode&#34;&gt;&lt;br&gt;
对于低代码（lowcode），google trends并没有显示其获得特别多的关注和热度，但其相关技术：cloud与DSL呈现强烈的负相关关系&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;相关领域发展情况&#34;&gt;相关领域发展情况&lt;/h2&gt;
&lt;p&gt;低代码概念作为高度集成产品作为企业信息化解决方案，其相关领域可大致分为OA协同办公、人工智能、中台技术、云开发四大部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OA协同办公软件
&lt;ul&gt;
&lt;li&gt;办公自动化（OA）软件发展历史可追溯到office办公软件，随着Web技术的发展，通过网络技术高度集成相关软件，提高了办公软件的自动化程度。&lt;/li&gt;
&lt;li&gt;随着低代码技术的快速发展，OA协同办公软件将迎来重大升级，OA协同办公软件将集成业务建模和仿真这一特性，为业务信息化落地提速增效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人工智能
&lt;ul&gt;
&lt;li&gt;人工智能的加持，快速为业务链赋能：人脸识别、自然语言技术作为末端替代人工操作进一步提高工作效率。&lt;/li&gt;
&lt;li&gt;数据分析可以进一步分析流程相关时间序列相关数据，迭代优化相关业务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中台技术的发展
&lt;ul&gt;
&lt;li&gt;中台技术提供更为灵活的API管理和应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;云开发环境。
&lt;ul&gt;
&lt;li&gt;云原生技术的发展将灵活高效地承载低代码业务开发模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;具体实现&lt;/h2&gt;
&lt;p&gt;从低代码说开去,低代码、中台、RPA、人工智能这些概念词更像是为了迎合市场准备的营销素材，从技术实现角度，可能更为关注低代码实现的技术实现细节。&lt;br&gt;
&lt;strong&gt;技术实现要点&lt;/strong&gt;&lt;br&gt;
低代码的技术实现要点主要可以分为云原生、Devops、BPM、DSL、前端可视化等方面。&lt;/p&gt;
&lt;!--adsense-text--&gt;
&lt;ol&gt;
&lt;li&gt;云原生
&lt;ul&gt;
&lt;li&gt;云原生为低代码提供基础的软件实施工具，软件云化不仅可以统一管理应用，也提高了基础资源的利用率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Devops
&lt;ul&gt;
&lt;li&gt;Devops有效为低代码提供持续有效的软件产品构建流程，一方面是软件工程理论的实践，好的DevOps是一套有效运营流程规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BPM
&lt;ul&gt;
&lt;li&gt;BPM技术的发展与协同办公软件开发技术发展紧密，activiti、camunda、flowable技术作为开源工作流引擎可以作为业务建模的参考实现。&lt;/li&gt;
&lt;li&gt;类BPM技术：数据分析/算法引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DSL
&lt;ul&gt;
&lt;li&gt;DSL不仅存在于后台开发技术，而且在前端技术领域也得到越来越多的应用，构建一个好的类型系统可以有效解决复杂业务建模。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前端可视化
&lt;ul&gt;
&lt;li&gt;前端可视化与用户交互紧密联系，友好的可视化交互操作对低代码的推广使用非常重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考：&lt;/h2&gt;
&lt;p&gt;DSL:&lt;br&gt;
&lt;a href=&#34;https://www.ituring.com.cn/book/miniarticle/4194&#34;&gt;选择DSL实现的方式&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://medium.com/@dempfi/typescript-jsx-syntax-as-typed-dsl-97c052b825c8&#34;&gt;TypeScript JSX syntax as a typed DSL&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://gist.github.com/ulve/26d6087bbab6d9a67c4b6f1a226807ed&#34;&gt;DSL.ts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;DDD:   &lt;br&gt;
&lt;a href=&#34;https://github.com/madawei2699/ddd_parklot&#34;&gt;https://github.com/madawei2699/ddd_parklot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;低代码：&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/Y23pwX6JmYhME5u52FcLLQ&#34;&gt;探路中台、RPA、低代码引领企业级IT服务未来式&lt;/a&gt;   &lt;br&gt;
&lt;a href=&#34;https://github.com/phodal/lowcode.git&#34;&gt;https://github.com/phodal/lowcode.git&lt;/a&gt;  &lt;br&gt;
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/88616149&#34;&gt;现代Web开发与未来&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/phodal/cloud-dev&#34;&gt;云研发&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/ytihMiH1LZ0gkjgKTE8RTA&#34;&gt;2020年边缘计算为什么会火&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/Aq_uRdEbn7sZDSTifgiP9A&#34;&gt;麻省理工选出的全球十大突破性技术&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://mp.weixin.qq.com/s/dQjViQ5N3hWApH40sfZAuA&#34;&gt;大中台模式下如何构建复杂业务核心状态机组件&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/96046788&#34;&gt;深入typescript类型系统（二）：泛型和类型元编程&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://blog.frankel.ch/builder-pattern-finite-state-machine/&#34;&gt;builder模式是一个有限状态机&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CI/CD:&lt;br&gt;
&lt;a href=&#34;https://www.stackbit.com/&#34;&gt;https://www.stackbit.com/&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://wakatime.com/plugins/status?onboarding=true&#34;&gt;wakatime&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>APIJSON实践</title>
            <link>https://justpic.org/post/apijson-exercise/</link>
            <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/apijson-exercise/</guid>
            <description>&lt;p&gt;APIJSON实践&lt;/p&gt;
&lt;h2 id=&#34;获取特定对象&#34;&gt;获取特定对象&lt;/h2&gt;
&lt;h3 id=&#34;指定数据库服务器和schema进行查询&#34;&gt;指定数据库服务器和schema进行查询：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;Test&amp;#34;:{&amp;#34;ID_&amp;#34;:5},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;获取列表&#34;&gt;获取列表：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:8088/get/%7B%22%5B%5D%22:%7B%22count%22:100,%22Test%22:%7B%22@column%22:%22USER_ID,TM_ID%22%7D%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;返回特定字段&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;[]&amp;#34;:{&amp;#34;count&amp;#34;:100,&amp;#34;Test&amp;#34;:{&amp;#34;@column&amp;#34;:&amp;#34;USER_ID,TM_ID&amp;#34;}},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:8088/get/%7B%22%5B%5D%22:%7B%22count%22:100,%22Test%22:%7B%22@column%22:%22%22%7D%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;返回全部字段列表&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;[]&amp;#34;:{&amp;#34;count&amp;#34;:100,&amp;#34;Test&amp;#34;:{&amp;#34;@column&amp;#34;:&amp;#34;&amp;#34;}},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:8088/get/%7B%22%5B%5D%22:%7B%22count%22:100,%22page%22:0,%22Test%22:%7B%22@column%22:%22%22%7D%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;分页&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;[]&amp;#34;:{&amp;#34;count&amp;#34;:100,&amp;#34;page&amp;#34;:0,&amp;#34;Test&amp;#34;:{&amp;#34;@column&amp;#34;:&amp;#34;&amp;#34;}},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;}   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:8088/get/%7B%22Test%22:%7B%22ID_%22:5%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;特定字段条件查询&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;Test&amp;#34;:{&amp;#34;ID_&amp;#34;:5},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;​&lt;br&gt;
&lt;a href=&#34;http://localhost:8088/get/%7B%22Test%22:%7B%22END_TIME%25%22:%222018,2019%22%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;连续范围&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;Test&amp;#34;:{&amp;#34;END_TIME%&amp;#34;:&amp;#34;2018,2019&amp;#34;},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;！以上链接直接浏览器请求出错&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:8088/get/%7B%22%5B%5D%22:%7B%22count%22:100,%22Test%22:%7B%22END_TIME%7B%7D%22:%22%3C=2019,%3E=2018%22%7D%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;时间范围&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;[]&amp;#34;:{&amp;#34;count&amp;#34;:100,&amp;#34;Test&amp;#34;:{&amp;#34;END_TIME{}&amp;#34;:&amp;#34;&amp;lt;=2019,&amp;gt;=2018&amp;#34;}},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://localhost:8088/get/%7B%22%5B%5D%22:%7B%22count%22:100,%22Test%22:%7B%22END_TIME$%22:%22%2019%25%22%7D%7D,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7D&#34;&gt;模糊匹配&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;http://localhost:8088/get/{&amp;#34;[]&amp;#34;:{&amp;#34;count&amp;#34;:100,&amp;#34;Test&amp;#34;:{&amp;#34;END_TIME$&amp;#34;:&amp;#34;%2019%&amp;#34;}},&amp;#34;@schema&amp;#34;:&amp;#34;sxb&amp;#34;,&amp;#34;@database&amp;#34;:&amp;#34;MYSQL&amp;#34;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;详细的功能符号介绍：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;#34;key[]&amp;#34;:{}                                         // 查询数组

&amp;#34;key{}&amp;#34;:[1,2,3]                                    // 匹配选项范围

&amp;#34;key{}&amp;#34;:&amp;#34;&amp;lt;=10;length(key)&amp;gt;1...&amp;#34;                    // 匹配条件范围

&amp;#34;key()&amp;#34;:&amp;#34;function(arg0,arg1...)&amp;#34;                   // 远程调用函数

&amp;#34;key@&amp;#34;:&amp;#34;key0/key1.../targetKey&amp;#34;                    // 引用赋值

&amp;#34;key$&amp;#34;:&amp;#34;%abc%&amp;#34;                                     // 模糊搜索

&amp;#34;key~&amp;#34;:&amp;#34;^[0-9]+$&amp;#34;                                  // 正则匹配

&amp;#34;key%&amp;#34;:&amp;#34;2018-01-01,2018-10-01&amp;#34;                     // 连续范围

&amp;#34;key+&amp;#34;:[1]                                         // 增加/扩展

&amp;#34;key-&amp;#34;:888.88                                      // 减少/去除 

&amp;#34;name:alias&amp;#34;                                       // 新建别名

&amp;#34;@combine&amp;#34;:&amp;#34;name~,tag~&amp;#34;                            // 条件组合

&amp;#34;@column&amp;#34;:&amp;#34;id,sex,name&amp;#34;                            // 返回字段

&amp;#34;@group&amp;#34;:&amp;#34;userId&amp;#34;                                  // 分组方式

&amp;#34;@having&amp;#34;:&amp;#34;max(id)&amp;gt;=100&amp;#34;                           // 聚合函数

&amp;#34;@order&amp;#34;:&amp;#34;date-,name+&amp;#34;                             // 排序方式

&amp;#34;@schema&amp;#34;:&amp;#34;sys&amp;#34;                                    // 集合空间

&amp;#34;@database&amp;#34;:&amp;#34;POSTGRESQL&amp;#34;                           // 跨数据库

&amp;#34;@explain&amp;#34;:true                                    // 性能分析

&amp;#34;@role&amp;#34;:&amp;#34;LOGIN&amp;#34;                                    // 访问角色
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;详细功能符说明可见&lt;a href=&#34;https://github.com/TommyLemon/APIJSON/blob/master/Document.md#3.2&#34;&gt;通用文档&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>路由转发和反向代理的应用</title>
            <link>https://justpic.org/post/2019-10-15-lu-you-zhuan-fa-he-fan-xiang-dai-li-de-ying-yong/</link>
            <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2019-10-15-lu-you-zhuan-fa-he-fan-xiang-dai-li-de-ying-yong/</guid>
            <description>&lt;p&gt;路由转发和反向代理的应用&lt;/p&gt;
&lt;p&gt;1.路由转发：&lt;/p&gt;
&lt;p&gt;工业互联网环境下，很多上位机是双网卡或者多网卡，上位机通常处于多重网络环境下，就上位机本身而言，可以与这些网络进行通信，但各个网络之间却不能直接进行通信，这个时候，路由转发的作用就出现了，路由转发是从IP层协议解决网络连通性问题，与反向代理处于传输层的解决方案相比，能够更好的支持网络应用，但同时也增加了网络的路由跃点数。&lt;/p&gt;
&lt;p&gt;下面主要从一个上位机多重网络联通性测试说明两个局域网环境下的路由转发应用：&lt;/p&gt;
&lt;p&gt;假设局域网1中的PC1的IP地址为：172.11.100.25，对应的网卡编号为11，局域网2中的PC3的IP地址为:172.12.25.141，对应的网卡编号为15.上位机连接着局域网1和局域网2，对应的网络IP地址分别为172.11.100.249和172.12.25.130，对应的网卡编号分别为11和13。为了实现PC1和PC2互通（即相互可以ping通），需要做如下三步操作：&lt;/p&gt;
&lt;p&gt;1.PC1下cmd进入命令行，route print -4 查看当前路由，添加以下路由信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route add 172.12.25.0 mask 255.255.255.0 172.11.100.249 metric 8 if 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.PC2下注意，需要设置一个网卡的网关地址为空，然后进入到注册表下修改IPEnableRouter的值为1,IPEnableRouter的具体注册表路径为 “计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters”&lt;/p&gt;
&lt;p&gt;注意：IPEnableRouter修改后需要重启电脑才能生效。&lt;/p&gt;
&lt;p&gt;3.PC3下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route add 172.11.100.0 mask 255.255.255.0 172.12.25.130 metric 8 if 15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，相关路由转发配置基本结束，PC1和PC3是可以相互ping通的。&lt;/p&gt;
&lt;p&gt;想象一下，如果要打通多个上位机的局域网，需要怎样做？&lt;/p&gt;
&lt;p&gt;下面主要从两个上位机的多重网络连通性测试说明三个局域网环境下的路由转发应用：&lt;/p&gt;
&lt;p&gt;在上面的网络情景下，增加局域网3，局域网3下的PC5的IP地址为：192.168.0.201，对应的网卡编号为11，上位机PC4连接着局域网2和局域网3，对应的IP地址分别为172.12.15.142和192.168.0.202，对应的网卡编号分别为11和13，为了打通PC5和PC1的网络，需要做如下五步操作：&lt;/p&gt;
&lt;p&gt;1.PC1下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route add 192.168.0.0 mask 255.255.255.0 172.11.100.249 metric 8 if 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.PC2下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route add 192.168.0.0 mask 255.255.255.0 172.12.15.142 metric 8 if 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.PC4下注意，需要设置一个网卡的网关地址为空，然后进入到注册表下修改IPEnableRouter的值1，,IPEnableRouter的具体注册表路径为 “计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters”&lt;/p&gt;
&lt;p&gt;注意：IPEnableRouter修改后需要重启电脑才能生效。&lt;/p&gt;
&lt;p&gt;4.PC5下cmd进入命令行，route print -4查看路由，添加以下路由信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route add 172.11.100.0 mask 255.255.255.0 192.168.0.202 metric 8 if 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.PC4下cmd进入命令行，route print -4查看路由，添加以下路由信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;route add 172.11.100.0 mask 255.255.255.0 172.12.15.142 if 11

route add  192.168.0.0 mask 255.255.255.0 192.168.0.202 metric 8 if 13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此，相关路由转发配置基本结束，PC1和PC5是可以相互ping通的。&lt;/p&gt;
&lt;p&gt;会了三个局域网的路由转发，多个局域网的路由转发以此类推，就可以实现异构网络间的互通。&lt;/p&gt;
&lt;p&gt;2.反向代理：&lt;/p&gt;
&lt;p&gt;反向代理的应用非常广泛，包括网站负载均衡、内网穿透、高可用等等。由于反向代理一般都软件化了，这里就不做过多介绍，可以推荐使用frp作为反向代理，支持tcp、udp等多种协议。
当然windows自带的netsh interface portproxy也是一个不错的选择，但是只支持tcp协议。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/Bonker/p/4849295.html?from=singlemessage&#34;&gt;Win7中的路由转发配置实验&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>windows系统使用python环境</title>
            <link>https://justpic.org/post/2015-03-14-use-python-in-windows/</link>
            <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2015-03-14-use-python-in-windows/</guid>
            <description>&lt;p&gt;windows系统使用python环境&lt;/p&gt;
&lt;h3 id=&#34;windows-64安装libxml2dom小记&#34;&gt;windows 64安装libxml2dom小记&lt;/h3&gt;
&lt;h4 id=&#34;用于解决no-module-named-libxmlmods等错误&#34;&gt;用于解决no module named libxmlmods等错误&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;此&lt;a href=&#34;http://www.lfd.uci.edu/~gohlke/pythonlibs/&#34;&gt;网站&lt;/a&gt;上面有编译好了的各种python windows包.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们首先下载&lt;a href=&#34;http://www.lfd.uci.edu/~gohlke/pythonlibs/z94jfosk/libxml2_python-2.9.2-cp27-none-win_amd64.whl&#34;&gt;libxml2-python&lt;/a&gt;&lt;br&gt;
然后使用pip wheel安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pip wheeel libxml2_python-2.9.2-cp27-none-win_amd64.whl  
pip install --use-wheel --no-index --find-links=wheelhouse libxml2-python
easy_install libxml2dom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此安装libxml2dom完毕&lt;/p&gt;
&lt;h3 id=&#34;windows-64安装pycurl小记&#34;&gt;windows 64安装pycurl小记&lt;/h3&gt;
&lt;p&gt;首先下载&lt;a href=&#34;http://curl.haxx.se/gknw.net/7.40.0/dist-w64/curl-7.40.0-devel-mingw64.7z&#34;&gt;curl 64bit mingw&lt;/a&gt;&lt;br&gt;
然后git clone &lt;a href=&#34;https://github.com/pycurl/pycurl.git&#34;&gt;https://github.com/pycurl/pycurl.git&lt;/a&gt;，进入到pycurl目录，修改setup.py&lt;br&gt;
CURL_DIR=$CURL_PATH
编译，安装，完毕。
以上方法还是没有安装成功，还是使用上面网站里的编译好的安装包进行安装，下载&lt;a href=&#34;http://www.lfd.uci.edu/~gohlke/pythonlibs/z94jfosk/pycurl-7.19.5.1-cp27-none-win_amd64.whl&#34;&gt;pycurl-7.19.5.1-cp27-none-win_amd64.whl&lt;/a&gt; &lt;br&gt;
使用以下命令进行安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt; pip wheel pycurl-7.19.5.1-cp27-none-win_amd64.whl
 pip install --
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;windows上的python环境搭建&#34;&gt;windows上的python环境搭建：&lt;/h3&gt;
&lt;p&gt;安装Anaconda。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>latex数学符号</title>
            <link>https://justpic.org/post/latex-math-symbol/</link>
            <pubDate>Wed, 10 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/latex-math-symbol/</guid>
            <description>&lt;p&gt;latex数学符号&lt;/p&gt;
&lt;h2 id=&#34;latex数学符号&#34;&gt;latex数学符号&lt;/h2&gt;
&lt;h3 id=&#34;数学模式重音符&#34;&gt;数学模式重音符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(\hat{a}\\)  \\hat{a}   \\(\check{a}\\)  \\check{a}  \\(\tilde{a}\\) \\tilde{a}  \\(\acute{a}\\) \\acute{a}  
\\(\grave{a}\\)  \\grave{a}  \\(\dot{a}\\)  \\dot{a}  \\(\ddot{a}\\) \\ddot{a}  \\(\breve{a}\\)  \\breve{a}  
\\(\bar{a}\\)   \\bar{a}   \\(\vec{a}\\)   \\vec{a}  \\(\widehat{A}\\) \\widehat{A} \\(\widetilde{A}\\) \\widetilde{A}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;小写希腊字母表&#34;&gt;小写希腊字母表&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(\alpha\\) \\alpha  \\(\theta\\) \\theta \\(o\\) o  \\(\upsilon\\) \\upsilon  
\\(\beta\\) \\beta \\(\vartheta\\) \\vartheta  \\(\pi\\) \\pi \\(\phi\\) \\phi
\\(\gamma\\) \\gamma \\(\iota\\) \\iota \\(\varpi\\) \\varpi \\(\varphi\\) \\varphi  
\\(\delta\\) \\delta \\(\kappa\\) \\kappa \\(\rho\\) \\rho \\(\chi\\) \\chi 
\\(\epsilon\\) \\epsilon \\(\lambda\\) \\lambda \\(\varrho\\) \\varrho \\(\psi\\) \\psi  
\\(\varepsilon\\) \\varepsilon \\(\mu\\) \\mu \\(\sigma\\) \\sigma \\(\omega\\) \\omega  
\\(\zeta\\) \\zeta \\(\nu\\) \\nu \\(\varsigma\\) \\varsigma \\(\eta\\) \\eta 
\\(\xi\\) \\xi \\(\tau\\) \\tau  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;大写希腊字母&#34;&gt;大写希腊字母&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(\Gamma\\) \\Gamma \\(\Lambda\\) \\Lambda \\(\Sigma\\) \\Sigma \\(\Psi\\) \\Psi
\\(\Delta\\) \\Delta \\(\Xi\\) \\Xi \\(\Upsilon\\) \\Upsilon  \\(\Omega\\) \\Omega  
\\(\Theta\\) \\Theta \\(\Pi\\) \\Pi \\(\Phi\\) \\Phi  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二元关系符&#34;&gt;二元关系符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(&amp;lt;\\) &amp;lt; \\(&amp;gt;\\) &amp;gt; \\(=\\)  =  
\\(\leq or \le\\) \\leq or \\le   
\\(\geq or \ge\\) \\geq or \\g 
\\(\equiv\\)  \\equiv
\\(\ll\\) \\ll  
\\(\gg\\) \\gg  
\\(\doteq\\) \\doteq  
\\(\prec\\) \\prec  
\\(\succ\\) \\succ  
\\(\sim\\)  \\sim
\\(\preceq\\) \\preceq  
\\(\succeq\\) \\succeq  
\\(\simeq\\) \\simeq  
\\(\subset\\) \\subset  
\\(\supset\\) \\supset  
\\(\approx\\) \\approx  
\\(\subseteq\\) \\subseteq  
\\(\supseteq\\) \\supseteq  
\\(\cong\\) \\cong  
\\(\sqsubset\\) \\sqsubset
\\(\sqsupset\\) \\sqsupset  
\\(\Join\\) \\Join  
\\(\in\\) \\in  
\\(\ni\\) \\ni,\\owns  
\\(\propto\\) \\propto  
\\(\vdash\\) \\vdash  
\\(\dashv\\) \\dashv  
\\(\models\\) \\models 
\\(\mid\\) \\mid  
\\(\parallel\\) \\parallel  
\\(\perp\\) \\perp  
\\(\smile\\) \\smile  
\\(\frown\\) \\frown  
\\(\asymp\\) \\asymp  
\\(:\\)  :  
\\(\notin\\) \\notin  
\\(\neq\\) \\neq or \\ne 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二元运算符号&#34;&gt;二元运算符号&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(+\\) +    \\(-\\) - \\(\triangleleft\\) \\triangleleft  
\\(\pm\\) \\pm \\(\mp\\) \\mp \\(\triangleright\\) \\triangleright  
\\(\cdot\\) \\cdot \\(\div\\) \\div    
\\(\times\\) \\times   \\(\setminus\\) \\setminus \\(\star\\) \\star   
\\(\cup\\) \\cup \\(\cap\\) \\cap \\(\ast\\) \\ast  
\\(\sqcup\\) \\sqcup \\(\circ\\) \\circ  
\\(\vee\\) \\vee,\\lor \\(\wedge\\) \\wedge,\\land  \\(\bullet\\) \\bullet  
\\(\oplus\\) \\oplus \\(\ominus\\)  \\ominus \\(\diamond\\)  \\diamond  
\\(\odot\\) \\odot \\(\oslash\\) \\oslash \\(\uplus\\) \\uplus  
\\(\otimes\\) \\otimes \\(\bigcirc\\) \\bigcirc \\(\amalg\\)  
\\(\bigtriangleup\\) \\(\bigtriangledown\\) \\(\dagger\\)  \\dagger  
\\(\lhd\\) \\lhd \\(\rhd\\) \\rhd \\(\ddagger\\) \\ddagger  
\\(\unlhd\\) \\unlhd \\(\unrhd\\) \\unrhd \\(\wr\\) \\wr  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;大尺寸运算符&#34;&gt;大尺寸运算符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(\sum\\) \\sum \\(\bigcup\\) \\bigcup \\(\bigvee\\) \\bigvee   \\(\bigoplus\\) \\bigoplus  
\\(\prod\\) \\prod \\(\bigcap\\) \\bigcap \\(\bigwedge\\) \\bigwedge  \\(\bigotimes\\) \\bigotimes 
\\(\coprod\\) \\coprod \\(\bigsqcup\\) \\bigsqcup \\(\bigodot\\) \\bigodot \\(\int\\) \\int 
\\(\oint\\) \\oint \\(\biguplus\\) \\biguplus  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;箭头&#34;&gt;箭头&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;\\(\leftarrow\\) \\leftarrow or \\gets \\(\longleftarrow\\)  \\longleftarrow  
\\(\uparrow\\) \\uparrow  \\(\rightarrow\\) \\rightarrow or \\to   
\\(\longrightarrow\\) \\longrightarrow   \\(\downarrow\\) \\downarrow  
\\(\leftrightarrow\\) \\leftrightarrow \\(\longleftrightarrow\\) \\longleftrightarrow 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;参考&lt;br&gt;
&lt;a href=&#34;http://math.ecnu.edu.cn/~latex/docs/others/mathsymb.pdf&#34;&gt;mathsymb.pdf&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://mohu.org/info/symbols/symbols.htm&#34;&gt;常用数学符号的LaTex表示方法&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>ScatNet散射卷积网络</title>
            <link>https://justpic.org/post/scatter/</link>
            <pubDate>Sat, 09 Aug 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/scatter/</guid>
            <description>&lt;p&gt;ScatNet散射卷积网络&lt;/p&gt;
&lt;p&gt;散射卷积网络(ScatNet)通过卷积网络对图像的小波系数做级联运算，运用深度学习的思想，生成树状结构的散射系数，使用散射系数作为特征进行学习。
理解和分析scatnet就暂且从下面这幅图入手&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://justpic.org/images/post/st.jpg&#34; alt=&#34;scat transform&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里，\(f\)为输入的图像矩阵数据、\(\phi\)代表一个小波函数、m代表变换的阶数、J代表尺度,\(\lambda\)代表路径对应于m定义的各个阶，左上箭头代表计算出的散射系数、U代表的是各个小波系数的模结果。散射算子对U变换将会计算出该层散射系数S和下一层的U。
若散射变换的方向数为C，总阶数为m，则第q阶散射变换沿频率递减的路径数为\(C^{q}(^J_q)\)，假设图像的橡树大小为N，采样值为\(\omega 2^{J}\),则每条散射路径有\(N\omega^{-2}2^{-2J}\)个系数，则所有的系数个数为&lt;br&gt;
$$N\omega^{-2}2^{-2J} \sum_{q=0}^m C^{q}(^J_q)$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;散射卷积网络、小波变换、分形、自然常数之间的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考文章与资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://arxiv.org/abs/1203.1513&#34;&gt;Invariant Scattering Convolution Networks&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.itsoc.org/resources/media/isit-2013-istanbul/MallatISIT2013.pdf&#34;&gt;High Dimensional Classification with Invariant Deep Networks&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.di.ens.fr/data/software/scatnet/&#34;&gt;ScatNet&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.dailymotion.com/video/x10r1zw_stephane-mallat-mathematicien_tech&#34;&gt;S.Mallat的一个访谈&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://techtalks.tv/talks/plenary-talk-are-deepnetworks-a-soluSon-to-curse-of-dimensionality/60315/&#34;&gt;Plenary Talk:Are Deep Networks a Solution to Curse of Dimensionality&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://staff.fnwi.uva.nl/t.e.j.mensink/rdg/slides/2scatnets.pdf&#34;&gt;2scatnet&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>linux添加用户操作</title>
            <link>https://justpic.org/post/2014-06-06-vps-initialization/</link>
            <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2014-06-06-vps-initialization/</guid>
            <description>&lt;p&gt;linux添加用户操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加用户：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;useradd options &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;添加用户组:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;groupadd options &amp;lt;groupname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;配置权限:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;echo &amp;#39;&amp;lt;username&amp;gt; all=(all:all) all&amp;#39; /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ssh登陆禁用密码操作:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#本机：  
ssh-keygen  #生成公钥、密钥对
ssh-copy-id -i ~/.ssh/id_rsa.pub username@remote-host    #将公钥复制到远程服务器的authorized_keys中（server端authorized_keys指定公钥，客户端 -i参数指定私钥）  
#服务器：
#登陆服务器后，修改/etc/ssh/sshd_config保存  
PasswordAuthentication no    #（经用密码登陆）
#重启ssh  
sudo service ssh restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>配置反向代理</title>
            <link>https://justpic.org/post/reverse-proxy-setup/</link>
            <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/reverse-proxy-setup/</guid>
            <description>&lt;p&gt;配置反向代理&lt;/p&gt;
&lt;h2 id=&#34;建立一个简单的反向http代理&#34;&gt;建立一个简单的反向http代理&lt;/h2&gt;
&lt;p&gt;nginx 配置情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;upstream tunnel{
   server 127.0.0.1:8080;
}
server {
   listen 80;
   server_name &amp;lt;url&amp;gt;;
   
   location /{
   proxy_set_header Host $http_host;
   proxy_pass tunnel;
   }
}
#ssh reverse 
ssh -R 8080:localhost:&amp;lt;port&amp;gt; &amp;lt;user_name&amp;gt;@&amp;lt;server&amp;gt;
#port is your local application used ,and url is the url you will to visit public 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>Java调用matlab</title>
            <link>https://justpic.org/post/2014-06-02-java-call-matlab/</link>
            <pubDate>Mon, 02 Jun 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2014-06-02-java-call-matlab/</guid>
            <description>&lt;p&gt;Java调用matlab&lt;/p&gt;
&lt;p&gt;与C++/C调用matlab不同的是，C++是&lt;a href=&#34;http://blog.segmentfault.com/simbest/1190000000417000&#34;&gt;调用matlab的生成动态库&lt;/a&gt;或者使用matlab引擎，而java是调用matlab代码打包成的jar包。&lt;/p&gt;
&lt;p&gt;使用deploytool命令打开matlab打包工具
打包完成后在eclipse除导入该包外，还要导入目录 toolbox/javabuilder/jar/javabuilder.jar包
在相关代码中完成导入语句和定义完成java调用matlab代码的调用。&lt;br&gt;
具体相关代码和事例可见&lt;a href=&#34;https://github.com/bpmbank/writer_identification/blob/master/Writer/writerui/writer.java&#34;&gt;example&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Matlab C混合编程</title>
            <link>https://justpic.org/post/matlab-mixed-c/</link>
            <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/matlab-mixed-c/</guid>
            <description>&lt;p&gt;Matalb与C语言混合编程&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用C++（或者C）语言操作MATLAB，有三种途径：MEX、MAT、引擎应用程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1mex文件&#34;&gt;1.MEX文件&lt;/h4&gt;
&lt;p&gt;在MATLAB中可调用的C或Fortran语言程序称为MEX文件。MATLAB可以直接把MEX文件视为它的内建函数进行调用。MEX文件是动态链接的子例程，MATLAB解释器可以自动载入并执行它。MEX文件主要有以下用途：&lt;br&gt;
对于大量现有的C或者Fortran程序可以无须改写成MATLAB专用的M文件格式而在MATLAB中执行。&lt;br&gt;
对于那些MATLAB运算速度过慢的算法，可以用C或者Frotran语言编写以提高效率。&lt;/p&gt;
&lt;h4 id=&#34;2mat文件应用程序&#34;&gt;2.MAT文件应用程序&lt;/h4&gt;
&lt;p&gt;MAT文件是MATLAB专用的用于保存数据至磁盘和向MATLAB导入、从MATLAB导出数据的数据文件格式。MAT文件提供了一种简便的机制，它允许你在两个平台之间以灵活的方式移动数据。而且，它还提供了一种途径来向其它单机MATLAB应用导入或者导出数据。&lt;br&gt;
为了简化在MATLAB环境之外对MAT文件的使用，MATLAB给出了一个操作例程库，通过它，我们可以使用C/C++或者Fortran程序读写MAT文件。&lt;/p&gt;
&lt;h4 id=&#34;3引擎应用程序&#34;&gt;3.引擎应用程序&lt;/h4&gt;
&lt;p&gt;MATLAB提供了一系列的例程使得别的程序可以调用MATLAB，从而把MATLAB用作一个计算引擎。MATLAB引擎程序指的是那些通过管道（在UNIX系统中）或者ActiveX（在Windows系统中）与独立MATLAB进程进行通信的C/C++或者Fortran程序。  &lt;br&gt;
MEX文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;#include “mex.h”  
/*
*timestwo.c-example found in API guide  
*  
*Computational function that takes a scalar and doubles it  
*  
*This is a MEX-File for MATLAB.  
*Copyright(c)  
*/  
void timestwo(double y[],double x[]); 
void timestwo(double y[],double x[]) 
{ 
y[0]=2.0*x[0]; 
} 
void mexFunction(int nlhs,mxArray* plhs[],int nrhs,const mxArray *prhs[])
/*nlhs是MATLAB命令行方式下输出参数的个数 
*plhs是MATLAB命令行方式下的输出参数; 
*nrhs是MATLAB命令行方式下输入参数的个数； 
*prhs[]是MATLAB命令行方式下的输入参数； 
*/ 
{ 
double *x,*y; 
int mrows,ncols; 
/*Check for proper number of arguments.*/ 
if (nrhs!=1){ 
mexErrMsgTxt(“One input required”); 
}
else if(nlhs&amp;gt;=1) 
{ 
mexErrMsgTxt(“Too many output arguments”); 
} 
/*在MATLAB命令行方式下，本MEX文件的调用格式是y=timestwo(x)
输入参数（x）个数=1，输出参数（y）个数=1，所以在程序一开始就检查
nrhs时候==1以及nlhs是否&amp;gt;=1（因为MATLAB有一个缺省的输出参数ans，所以nlhs可以==0*/
/*The input must be a non comlex scalar double.*/
mrows=mxGetM(prhs[0]);//矩阵行数&amp;lt;br&amp;gt;
ncols=mxGetN(prhs[0]);//矩阵列数&amp;lt;br&amp;gt;
if (!mxIsDouble(prhs[0])|| mxIsComplex(prhs[0])||!(mrows==1&amp;amp;amp;ncols==1))
{
mexErrMsgTxt(“Input must be a noncomplex scalar double”);
}
//判断输入举证是否是double类，以及它是否只包含单个元素无嵌套
//为输出创建一个矩阵，显然这个矩阵也应该是1*1的
plhs[0]=mxCreateDoubleMatrix(mrows,ncols,mxREAL);
x=mxGetPr(prhs[0]);
y=mxGetPr(plhs[0]);
timestwo(y,x);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;matlab命令行上输入以下语句：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mex testmex.cpp;
x=2;
y=testmex(x);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;MAT文件：&lt;br&gt;
libmat.dll:用于操作mat文件 &lt;br&gt;
libmx.dll:用于操作mat文件中的矩阵 &lt;br&gt;
MATLAB中常用的矩阵类型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(复)双精度矩阵：&lt;br&gt;
MATLAB中最常用的数据类型便是（复）双精度、非稀疏矩阵，这些矩阵的元素都是双精度（double）的，矩阵的尺寸为m×n，其中m是总行数，m是总列数。矩阵数据实际存放在两个双精度向量中——一个向量存放的是数据的实部，另一个向量存放的是数据的虚部。指向这两个向量的指针一般被写做“pr” （pointer to real data，指向实数据的指针）和“pi” （pointer to imaginary data，指向虚数据的指针）”。如果一个矩阵的pi为空的话，说明它是实双精度矩阵。&lt;br&gt;
稀疏矩阵（Sparse Matrices）&lt;br&gt;
MATLAB中稀疏矩阵的存储格式与众不同。如同双精度矩阵一样，它拥有参数pr和pi，同时它还具用三个附加的参数：nzmax，ir以及jc。&lt;br&gt;
nzmax是个整型数，其值为向量ir及pr、pi（如果存在的话）可能的最大长度。它是稀疏矩阵中不为零的元素的个数。
ir指向一个长度为nzmax的整型数阵列，阵列包含的是pr和pi中对应元素的行号。&lt;br&gt;
jc指向一个长度为N+1的整型数阵列（N为矩阵的列数），其中包含的是列号信息。对于任意的j，如果0≤j≥N-1，jc[j]是第j列中第一个非零项在ir、pr（以及pi）中的序号，jc[j+1]-1是第j列最后一个非零项的序号。因此jc[N]总等于nnz——矩阵中非零项的总个数。如果nnz小于nzmax，可以继续向矩阵中添加非零项而无需分配额外的存储空间&amp;lt;&lt;/p&gt;
&lt;p&gt;主要函数举例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;·MATFile *matOpen(const char *filename, const char * mode)——打开/创建
·MATFile *matOpen(const char *filename, const char * mode)——打开/创建一个MAT文件；
·int matClose(MATFile *pMF)——关闭一个MAT文件；
·mxArray *mxCreateDoubleMatrix(int m, int n, mxComplexity flag)
   #创建一个（复）双精度矩阵；
·mxArray *mxCreateSparse(int m, int n, int nzmax, mxComplexity flag)
   #创建一个稀疏矩阵；
·mxArray *matGetNextArray(MATFile *pMF)——获得MAT文件里面下一个矩阵；
·const char *mxGetName(const mxArray *pa)——获得矩阵pa的名称；
·void mxSetName(mxArray *pa,const char *s)——为矩阵pa设置一个名称；
·int mxGetM(const mxArray *pa)——获得矩阵pa的总行数；
·int mxGetN(const mxArray *pa)——获得矩阵pa的总列数；
·double *mxGetPr(const mxArray *pa)——获得矩阵pa的pr指针；
·int *mxGetIr(const mxArray *pa)——获得稀疏矩阵pa的ir指针；
·int *mxGetJc(const mxArray *pa)——获得稀疏矩阵pa的jc指针；
·int matPutArray(MATFile * pMF, const mxArray * pA)
 #把矩阵pA存储入MAT文件pMAF；  
·void mxDestroyArray(mxArray *pa)——释放矩阵pa（把它从内存中撤销）；
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>tornado 国际化实践</title>
            <link>https://justpic.org/post/2014-04-27-tornado-with-i18n/</link>
            <pubDate>Sun, 27 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2014-04-27-tornado-with-i18n/</guid>
            <description>&lt;p&gt;tornado i18n国际化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i18n是国际化的简称（Internationalization,去掉开始的I和最后的N，中间一共18个字符）。
tornado中使用i18n需要下面两个工具
两个工具:pygettext,msgfmt，两个相关文件:po文件和mo文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pygetext和msgfmt的使用方法&#34;&gt;pygetext和msgfmt的使用方法&lt;/h3&gt;
&lt;p&gt;1.编写python代码文件 test.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;from gettext import gettext as _
print _(&amp;#34;well down&amp;#34;)
print _(&amp;#34;good&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.运行以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;pygetext test.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.生成messages.pot文件,更改文件后缀&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mv messages.pot messages.po
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.配置msgstr值&lt;/p&gt;
&lt;p&gt;生成一个名为messages.mo文件：
msgfmt messages.po&lt;/p&gt;
&lt;p&gt;建立目录locale/cn/LC_MESSAGES/&lt;/p&gt;
&lt;p&gt;mv messages.po locale/cn/LC_MESSAGES&lt;/p&gt;
&lt;p&gt;cn目录是所对应的语言，LC_MESSAGES是gettext.py文件里要求的
mo文件必须和所定义的域同名
gettext.py中有
modfile=os.path.join(localedir,lang,&amp;lsquo;LC_MESSAGES&amp;rsquo;,&#39;%s.mo&amp;rsquo; %domain)&lt;/p&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$python
&amp;gt;&amp;gt;&amp;gt;gettext.install(&amp;#39;messages&amp;#39;,&amp;#39;./locale&amp;#39;,unicode=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三个参数：
作用域名，用于限定翻译文件的主名
路径，存放翻译文件的路径
unicode，是否使用unicode（如果应用程序是unicode的，此处应设为True)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&amp;gt;&amp;gt;&amp;gt;gettext.translation(&amp;#39;messages&amp;#39;,&amp;#39;./locale&amp;#39;,languages=[&amp;#39;cn&amp;#39;]).install(True)
&amp;gt;&amp;gt;&amp;gt;print _(&amp;#34;good&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tornado中的应用&#34;&gt;tornado中的应用&lt;/h3&gt;
&lt;p&gt;1.运行以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$xgettext -L python -k=_ -o openquant.po $(find . -name \*.py) $(find template/ -name \*.html)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.查找所有需要翻译的相关项生成 po 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$msgfmt openquant.po -o locale/zh_CN/LC_MESSAGES/openquant.mo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成mo文件的生成&lt;/p&gt;
&lt;p&gt;4.完成相关文件的生成后，需要在代码中加载:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;tornado.locale.load_gettext_translations(options.I18N_PATH,&amp;#34;openquant&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5.handler中自定义get_user_locale函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;def get_user_locale(self):
    #zh_CN or en_US
    user_locale = self.get_cookie(&amp;#34;user_locale&amp;#34;)

    if user_locale:
        return tornado.locale.get(user_locale)

    return None
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;参考:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ylinux.org/imind/167&#34;&gt;iMind&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://justbm.blogspot.com/2014/01/django.html&#34;&gt;django多国语言&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>ubuntu上构建ios交叉编译环境</title>
            <link>https://justpic.org/post/ubuntu-install-ios-llvm-chain/</link>
            <pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/ubuntu-install-ios-llvm-chain/</guid>
            <description>&lt;p&gt;ubuntu上构建ios交叉编译环境&lt;/p&gt;
&lt;h3 id=&#34;ubuntu-1204-安装llvm34ios-lang交叉编译环境&#34;&gt;ubuntu 12.04 安装llvm3.4、ios-lang交叉编译环境&lt;/h3&gt;
&lt;p&gt;在ubuntu 12.04上先安装gcc-4.8，然后安装llvm,clang,libcxx,libcxxabi.由于libcxx和libcxxabi相互依赖，需要两次安装libcxx。最后安装theos等开放的ios开发工具链&lt;br&gt;
安装gcc-4.8如前文所述&lt;a href=&#34;https://justpic.org/2014/04/02/gcc-48-on-ubuntu/&#34;&gt;install gcc4.8 on ubuntu 12.04&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装llvmclang&#34;&gt;安装llvm,clang&lt;/h3&gt;
&lt;p&gt;/etc/apt/sources.list中添加如下两行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main
deb-src http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;检索签名&#34;&gt;检索签名：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装与llvm-34clang-34相关的所有包&#34;&gt;安装与llvm-3.4,clang-3.4相关的所有包：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;apt-get install clang-3.4 clang-3.4-doc libclang-common-3.4-dev libclang-3.4-dev libclang1-3.4 libclang1-3.4-dbg libllvm-3.4-ocaml-dev libllvm3.4 libllvm3.4-dbg lldb-3.4 llvm-3.4 llvm-3.4-dev llvm-3.4-doc llvm-3.4-examples llvm-3.4-runtime clang-modernize-3.4 clang-format-3.4 python-clang-3.4 lldb-3.4-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装libcxx&#34;&gt;安装libcxx：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看g使用的头文件&#34;&gt;查看g++使用的头文件:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;echo | g++ -Wp,-v -x c++ - -fsyntax-only
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将会输出类似如下结果&#34;&gt;将会输出类似如下结果：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;ignoring nonexistent directory &amp;#34;/usr/local/include/x86_64-linux-gnu&amp;#34;
ignoring nonexistent directory &amp;#34;/usr/lib/gcc/x86_64-linux- gnu/4.8/../../../../x86_64-linux-gnu/include&amp;#34;
### #include &amp;#34;...&amp;#34; search starts here:
### include &amp;lt;...&amp;gt; search starts here:
/usr/include/c++/4.8
/usr/include/c++/4.8/x86_64-linux-gnu
/usr/include/c++/4.8/backward
/usr/lib/gcc/x86_64-linux-gnu/4.8/include
/usr/local/include
/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed
/usr/include/x86_64-linux-gnu
/usr/include
End of search list.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译安装libcxx&#34;&gt;编译安装libcxx：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;CC=clang CXX=clang++ cmake -G &amp;#34;Unix Makefiles&amp;#34; -DLIBCXX_CXX_ABI=libsupc++ - DLIBCXX_LIBSUPCXX_INCLUDE_PATHS=&amp;#34;/usr/include/c++/4.7/;/usr/include/x86_64-linux- gnu/c++/4.7/&amp;#34; -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr &amp;lt;libc++-source-dir&amp;gt;
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装libcxxabi&#34;&gt;安装libcxxabi&lt;/h3&gt;
&lt;p&gt;首先安装相关依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install g++ subversion cmake swig python-dev libedit-dev libunwind8 libunwind8-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;下载源码并编译&#34;&gt;下载源码并编译：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi
cd libcxxabi/lib
./buildit
sudo cp libc++abi.so.1.0 /usr/lib
sudo ln -s /usr/lib/libc++abi.so.1.0 /usr/lib/libc++abi.so.1
sudo ln -s /usr/lib/libc++abi.so.1 /usr/lib/libc++abi.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用libcabi来安装libc&#34;&gt;使用libc++abi来安装libc++&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
cd libcxx
mkdir build
cd build
CC=clang CXX=clang++ cmake -G &amp;#34;Unix Makefiles&amp;#34; -DLIBCXX_CXX_ABI=libcxxabi -  DLIBCXX_LIBCXXABI_INCLUDE_PATHS=&amp;#34;&amp;lt;libc++abi-source-dir&amp;gt;/include&amp;#34; -  DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此ubuntu 12.04上的LLVM环境就算搭建好了。&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>MySQL使用总结</title>
            <link>https://justpic.org/post/2014-04-04-mysql-shi-yong-zong-jie/</link>
            <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2014-04-04-mysql-shi-yong-zong-jie/</guid>
            <description>&lt;p&gt;MySQL使用总结&lt;/p&gt;
&lt;h3 id=&#34;mysql创建数据库&#34;&gt;Mysql创建数据库&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create database sina default character set utf8mb4 collate utf8mb4_unicode_ci;   
ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;使用utf8mb4而不是utf8 ，应为utf8的长度不确定，utf8编码占用3个字节，utf8mb4能保证长度的够用， 5.5.3 版本以后的mysql版本开始支持utf8mb4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;mysql导入导出&#34;&gt;Mysql导入导出&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;导出所有库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysqldump -uusername -ppassword --all-databases&amp;gt;all.sql  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;导入所有库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql&amp;gt;source all.sql;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;导出某些库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysqldump -uusername -ppassword --databases db1 db2 &amp;gt;db1db2.sql 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;导入某些库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql&amp;gt;source db1db2.sql 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;导入某个库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql -uusername -ppassword db1&amp;lt;db1.sql;  mysql&amp;gt;source db1.sql;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;导出某个库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysqldump -uusername -ppassword db1 table1 table2&amp;gt;tb1tb2.sql  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;导入某些数据表&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql -uusername -ppassword db1&amp;lt;tb1tb2.sql  
mysql&amp;gt;user db1;  
mysql&amp;gt;source tb1tb2.sql; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;mysqldump字符集设置&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$mysqldump -uusername -ppassword --default-character-set=utf-8 db1 table1&amp;gt;tb1.sql  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mysql用户管理&#34;&gt;Mysql用户管理&lt;/h3&gt;
&lt;p&gt;1.创建用户&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql&amp;gt; insert into mysql.user(Host,User,Password) values(&amp;#34;localhost&amp;#34;,&amp;#34;phplamp&amp;#34;,password(&amp;#34;1234&amp;#34;));  
mysql&amp;gt;grant all privileges on *.* to jee@localhost identified by ‘123′；  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.修改用户密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql&amp;gt; UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;  
mysql&amp;gt; FLUSH PRIVILEGES;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.显示当前用户&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql&amp;gt;select USER(); 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mysql启用远程&#34;&gt;Mysql启用远程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd /etc/mysql  
vi my.cnf  #注释bind-address  
mysql -uusername -ppassword #进入到mysql  
grant all privileges on *.* to username@&amp;#39;deniedhost&amp;#39; identified by &amp;#39;password&amp;#39;;  
GRANT ALL PRIVILEGES ON *.* TO user_name@&amp;#39;%&amp;#39; IDENTIFIED BY ‘pass_word’;  #if dynamic ip  
flush privileges;  
quit;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mysql-主从复制&#34;&gt;Mysql 主从复制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mysql复制的用途:&lt;/li&gt;
&lt;li&gt;读取扩展&lt;/li&gt;
&lt;li&gt;主备份服务器&lt;/li&gt;
&lt;li&gt;故障转移服务器&lt;/li&gt;
&lt;li&gt;地理空间冗余&lt;/li&gt;
&lt;li&gt;数据仓库&lt;/li&gt;
&lt;li&gt;基准测试&lt;/li&gt;
&lt;li&gt;软件更新&lt;/li&gt;
&lt;li&gt;复制配置(my.cnf):&lt;/li&gt;
&lt;li&gt;主服务器配置(Alpha)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;[mysqld]   
log-bin=binary-log #log-bin参数启动二进制日志.二进制日志在MySQL环境中提供了多种用途.它为MySQL复制提供了DDL和DML语句流,能够重新应用于复制的从服务器.  
server-id=1   
重新启动MySQL后 ,使用SQL命令show master status;进行验证.(对于配置复制的从服务器是必要的)   
从服务器配置(Beta)   
[mysqld]   
server-id=2   
read_only=TRUE   
show slave status;   
change master to  
MASTER_HOST=&amp;#39;192.168.100.1&amp;#39;,#主服务器上的用户名和密码   
MASTER_USER=&amp;#39;rep1&amp;#39;,   
MASTER_PASSWORD=&amp;#39;rep12009&amp;#39;;   

change master to   
MASTER_LOG_FILE=&amp;#39;binary-log.00001&amp;#39;,#主服务器上运行show 
 master status命令所检索到的日志文件名称和位置.       
MASTER_LOG_POS=106;   

slave start;#启动从服务器验证其操作   
show slave status;#Slave_IO_Running和Slave_SQL_Running的值为Yes,就证明&amp;#34;主服务器-从服务器&amp;#34;式的MySQL拓扑已经正常运行.   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试mysql复制&#34;&gt;测试MySQL复制&lt;/h3&gt;
&lt;p&gt;在alpha上测试下面的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;PROMPT alpha&amp;gt;; 
alpha&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;确认从服务器上什么都不存在:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;beta&amp;gt; show schemas;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mysql-创建视图&#34;&gt;Mysql 创建视图&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;create view v as select * from table;  
create view v as select id,name,age from table;  
create view v[vid,vname,vage] as select id,name,age from table;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ubuntu-mysql57解决不用密码也能登陆&#34;&gt;ubuntu mysql5.7解决不用密码也能登陆:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;登录mysql    mysql -u root -p 或 mysql
use mysql;
update user set authentication_string=PASSWORD(&amp;#34;密码&amp;#34;) where user=&amp;#39;root&amp;#39;;
update user set plugin=&amp;#34;mysql_native_password&amp;#34;;
flush privileges;
quit;
/etc/init.d/mysql restart;
mysql -u root -p 密码;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;onwherehaving的区别&#34;&gt;on,where,having的区别&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;on,where,having这三个都可以加条件的子句中,on是最先执行,where次之,having最后.有时候如果这先后顺序不影响中间结果的话,那最终结果是相同的.但因为on是先把不符合条件的记录过滤后才进行统计,它就可以减少中间运算要处理的数据,按理说应该速度是最快的.
根据上面的分析,可以知道where应该比having快一点,应为它过滤数据后才进行sum,所以having是最慢的.但也不是说having没用,因为有时在步骤三还没有出来都不知道那个记录才符合要求时,就要用having了.
left join加上where 条件&lt;br&gt;
用where是先连接然后再筛选 &lt;br&gt;
用and是先筛选再连接&lt;br&gt;
数据库范式:&lt;br&gt;
第一范式:强调的是列的原子性.&lt;br&gt;
第二范式:首先使1NF,另外包含两部分内容,一是表必须有一个主键;二是没有包含在主键中的列必须完全依赖于主键,而不能只依赖于主键的一部分. &lt;br&gt;
第三范式:首先是2NF,另外非主键列必须直接依赖于主键,不能存在传递依赖.即不能存在:非主键列A依赖于非主键列B,非主键列B依赖于主键的情况.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;参考&#34;&gt;参考&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/16995616/monogodb-service-cannot-start-after-storage-extension-under-ubuntu-12-04&#34;&gt;无法启动mongodb的解决方法&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://supportcenter.verio.com/KB/questions.php?questionid=494&#34;&gt;启用远程mysql&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Ubuntu Server安装World Community Grid</title>
            <link>https://justpic.org/post/ubuntu-install-wcg/</link>
            <pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/ubuntu-install-wcg/</guid>
            <description>&lt;p&gt;Ubuntu Server安装World Community Grid&lt;/p&gt;
&lt;h2 id=&#34;在ubuntu上安装boinc&#34;&gt;在ubuntu上安装BOINC&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get aptitude install boinc-client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(you can also download it from wcg and install)&lt;/p&gt;
&lt;p&gt;find your account key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;boinccmd --lookup_account http://www.worldcommunitygrid.org username password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should get a response something like this
dfb74c9b9&amp;hellip;&lt;/p&gt;
&lt;p&gt;attach to your project&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;boinccmd --project_attach http://www.worldcommunitygrid.org dfb74c....
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if you want to verify your attached enter the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;boinccmd --get_state
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;更多资源&#34;&gt;更多资源:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu&#34;&gt;http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://boinc.berkeley.edu/wiki/Client_configuration&#34;&gt;http://boinc.berkeley.edu/wiki/Client_configuration&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC&#34;&gt;http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.joelchristian.com/?p=291&#34;&gt;http://blog.joelchristian.com/?p=291&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://misctechmusings.com/linux/boinc-cli-for-world-community-grid/&#34;&gt;http://misctechmusings.com/linux/boinc-cli-for-world-community-grid/&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>网站部署记录</title>
            <link>https://justpic.org/post/2013-10-27-install-project-on-preferati/</link>
            <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/2013-10-27-install-project-on-preferati/</guid>
            <description>&lt;p&gt;网站部署记录&lt;/p&gt;
&lt;p&gt;安装基础python环境&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install nginx
sudo apt-get install git
sudo apt-get install mysql-server
sudo apt-get install python-dev
install easy_install on ubuntu:
sudo apt-get install python-setuptools
sudo easy_install virtualenv
sudo easy_install pip
virtualenv ~/trade
source ~/trade/bin/activate
install numpy scipy pandas and ta-lib
sudo pip install Cython
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;安装 blas libs&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install gfortran libopenblas-dev liblapack-dev g++
pip install numpy
pip install scipy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;安装 ta-lib&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;cd ~
wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
sudo apt-get  install  build-essential
tar -zxvf ta-lib-0.4.0-src.tar.gz
cd ta-lib-0.4.0
./configure --prefix=/usr
make
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;安装 gevent&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
tar -zxvf 
./configure
make 
sudo make install
cd ~/www
git clone https://github.com/pydata/pandas.git
git clone https://github.com/mrjbq7/ta-lib.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;update the nginx&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install python-software-properties
sudo apt-get install sotware-properties-common
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;mysql init&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install mysql-server libmysqld-dev
pip install MySQL-python
insert into mysql.user(Host,User,Password) values(&amp;#34;localhost&amp;#34;,&amp;#34;username&amp;#34;,password(&amp;#34;password&amp;#34;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;用户授权&lt;/strong&gt;&lt;br&gt;
给本地用户mql分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123456。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;mysql&amp;gt;grant all privileges on *.* to username@localhost identified by &amp;#39;password&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;安装 redis&lt;/strong&gt;&lt;br&gt;
具体参考[install redis](&lt;a href=&#34;http://rubyer.me/blog/638/&#34;&gt;http://rubyer.me/blog/638/&lt;/a&gt; redis.io)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装uwsgi 或者 gunicorn(可选)&lt;/strong&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>ubuntu系统安装numpy和scipy</title>
            <link>https://justpic.org/post/ubuntu-install-numpy-scipy/</link>
            <pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/ubuntu-install-numpy-scipy/</guid>
            <description>&lt;p&gt;ubuntu系统安装numpy和scipy&lt;/p&gt;
&lt;h2 id=&#34;linux上安装numpy-scipy&#34;&gt;linux上安装numpy scipy&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo pip install numpy
sudo apt-get install libatlas-base-dev gfortran
sudo pip install scipy
sudo pip install matplotlib   # recommended
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>sqlalchemy动态映射</title>
            <link>https://justpic.org/post/django-sqlalchemy-mapping/</link>
            <pubDate>Fri, 26 Jul 2013 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/django-sqlalchemy-mapping/</guid>
            <description>&lt;p&gt;django中使用sqlalchemy进行动态映射&lt;/p&gt;
&lt;h1 id=&#34;sqlalchemy动态映射&#34;&gt;sqlalchemy动态映射&lt;/h1&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;    from sqlalchemy import *
    from sqlalchemy.orm import *
    metadata=MetaData(create_engine(&amp;#34;sqlite://&amp;#34;,echo=True)
    t1=Table(&amp;#34;t1&amp;#34;,metadata,Column(&amp;#39;id&amp;#39;,Integer,primary_key=True))
    t2=Table(&amp;#34;t2&amp;#34;,metadata,Column(&amp;#34;id&amp;#34;,Integer,primary_key=True))
    metadata.create_all()
    def map_class_to_some_table(cls,table,entity_name,**kw):
        newcls=type(entity_name,(cls,),{})
        mapper(newcls,table,**kw)
        return newcls
       
    class Foo(object):
        pass
    
    T1Foo=map_class_to_some_table(Foo,t1,&amp;#34;T1Foo&amp;#34;)
    T2Foo=map_class_to_some_table(Foo,t2,&amp;#34;T2Foo&amp;#34;)
    
    sess=sessionmaker()()
    sess.add_all([T1Foo(),T1Foo(),T2Foo(),T1Foo()])
    print sess.query(T1Foo).all()
    print sess.query(T2Foo).all()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
        <item>
            <title>使用python进行异步网络编程</title>
            <link>https://justpic.org/post/python-async-programming/</link>
            <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/python-async-programming/</guid>
            <description>&lt;p&gt;python异步网络编程&lt;/p&gt;
&lt;h2 id=&#34;selectpollepoll-test-in-python&#34;&gt;select,poll,epoll test in python&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# selecttest.py &lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; select
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; socket
&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Queue
&lt;span style=&#34;color:#6272a4&#34;&gt;#create a socket&lt;/span&gt;
server&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AF_INET,socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SOCK_STREAM)
server&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setblocking(False)
&lt;span style=&#34;color:#6272a4&#34;&gt;#set option reused&lt;/span&gt;
server&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setsockopt(socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SOL_SOCKET,socket&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SO_REUSEADDR,&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
server_address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;10001&lt;/span&gt;)
server&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;bind(server_address)
server&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;listen(&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;)
&lt;span style=&#34;color:#6272a4&#34;&gt;#sockets from which we except to read&lt;/span&gt;
inputs&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[server]
&lt;span style=&#34;color:#6272a4&#34;&gt;#sockets from which we expect to write&lt;/span&gt;
outputs&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[]
&lt;span style=&#34;color:#6272a4&#34;&gt;#Outgoing message queues (socket:Queue)&lt;/span&gt;
message_queues&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{}
&lt;span style=&#34;color:#6272a4&#34;&gt;#A optional parameter for select is TIMEOUT&lt;/span&gt;
timeout&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; inputs:
    &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;waiting for next event&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;#first parameter--read list,second parameter--write list,third parameter--error list&lt;/span&gt;
    readable,writable,exceptional&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;select&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;select(inputs,outputs,inputs,timeout)
    &lt;span style=&#34;color:#6272a4&#34;&gt;#when timeout reached,select return three empty list&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; (readable &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; writable &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; exceptional):
        &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Time out!&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; readable:
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;is&lt;/span&gt; server:
            &lt;span style=&#34;color:#6272a4&#34;&gt;#A &amp;#34;readable&amp;#34; socket is ready to accept a connection&lt;/span&gt;
            connection,client_address&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;accept()
            &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;  connection from&amp;#34;&lt;/span&gt;,client_address
            connection&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;setblocking(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
            inputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(connection)
            message_queues[connection]&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;Queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Queue()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
            data&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;)
            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; data:
                &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;received &amp;#34;&lt;/span&gt;,data, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;from &amp;#34;&lt;/span&gt;,s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getpeername()
                message_queues[s]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;put(data)
                &lt;span style=&#34;color:#6272a4&#34;&gt;#Add output  channel for response&lt;/span&gt;
                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; outputs:
                    outputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(s)
            &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
                &lt;span style=&#34;color:#6272a4&#34;&gt;#Interpret empty result as closed connection&lt;/span&gt;
                &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; closing&amp;#34;&lt;/span&gt;, client_address
                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; outputs:
                    outputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove(s)
                inputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove(s)
                s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()
                &lt;span style=&#34;color:#6272a4&#34;&gt;#remove message queue&lt;/span&gt;
                &lt;span style=&#34;color:#ff79c6&#34;&gt;del&lt;/span&gt; message_queues[s]
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; writable:
        &lt;span style=&#34;color:#ff79c6&#34;&gt;try&lt;/span&gt;:
            next_msg&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;message_queues[s]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get_nowait()
        &lt;span style=&#34;color:#ff79c6&#34;&gt;except&lt;/span&gt; Queue&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Empty:
            &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;,s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getpeername,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; queue empty&amp;#34;&lt;/span&gt;
            outputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove(s)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sending &amp;#34;&lt;/span&gt;,next_msg,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; to&amp;#34;&lt;/span&gt;,s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getpeername()
            s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;send(next_msg)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; exceptional:
        &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; exception condition on &amp;#34;&lt;/span&gt;,s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;getpeername()
        &lt;span style=&#34;color:#6272a4&#34;&gt;#stop listening for input on the connection&lt;/span&gt;
        inputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove(s)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; outputs:
            outputs&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;remove(s)
        s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()
        &lt;span style=&#34;color:#6272a4&#34;&gt;#Remove message queue&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;polltestpy&#34;&gt;polltest.py&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import socket
import select
import Queue
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.setblocking(False)
server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
server_address=(&amp;#34;localhost&amp;#34;,10001)    
print &amp;#34;Starting up on %s port %s&amp;#34; % server_address
server.bind(server_address)
server.listen(5)
message_queues={}
#The timeout value is represente in milliseconds,instead of seconds
timeout=100
#Create a limit for the next
READ_ONLY=(select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR)
READ_WRITE=(READ_ONLY|select.POLLOUT)    
#set up the poller
poller=select.poll()
poller.register(server,READ_ONLY)
#map file descriptors to socket objects
fd_to_socket={server.fileno():server,}
while True:
    print &amp;#34;Waiting for the next event&amp;#34;
    events=poller.poll(timeout)
    print &amp;#34;*&amp;#34;*20
    print len(events)
    print events
    print &amp;#34;*&amp;#34;*20
    for fd,flag in events:
        s=fd_to_socket[fd]
        if flag &amp;amp; (select.POLLIN|select.POLLPRI):
            if s is server:
                #A readable socket is ready to accept a connection
                connection,client_address=s.accept()
                print &amp;#34;Connection &amp;#34;,client_address
                connection.setblocking(False)    
                fd_to_socket[connection.fileno()]=connection
                poller.register(connection,READ_ONLY)    
                #Give the connection a queue to send data
                message_queues[connection]=Queue.Queue
            else:
                data=s.recv(1024)
                if data:
                    # A readable client socket has data
                    print &amp;#34; received %s from %s &amp;#34; % (data,s.getpeername())
                    message_queues[s].put(data)
                    poller.modify(s,READ_WRITE)
                else:
                    #Close the connection
                    print &amp;#34; closing &amp;#34;,s.getpeername()
                    #Stop listening for input on the connection
                    poller.unregister(s)
                    s.close()
                    del message_queues[s]
        elif flag &amp;amp; select.POLLHUP:
            #A client that &amp;#34;Hang up&amp;#34;,to be closed.
            print &amp;#34;closing &amp;#34;,s.getpeername,&amp;#34;(HUP)&amp;#34;
            poller.unregister(s)
            s.close()
        elif flag &amp;amp; select.POLLOUT:
            #SOCKET is ready to send DATA,if there is any to send
            try:
                next_msg=message_queues[s].get_nowait()
            except Queue.Empty:
                #No messages waiting so stop checking
                print s.getpeername,&amp;#34; queue empty&amp;#34;
                poller.modify(s,READ_ONLY)
            else:
                print &amp;#34; sending %s to %s&amp;#34; %(next_msg,s.getpeername())
                s.send(next_msg)
        elif flag &amp;amp; select.POLLERR:
            #Any events with POLLER cause the server to close the sockets
            print &amp;#34; exception on&amp;#34;,s.getpeername()
            poller.unregister(s)
            s.close()
            del message_queues[s]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;epolltestpy&#34;&gt;epolltest.py&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import socket,logging
import select,errno
logger=logging.getLogger(&amp;#34;network-server&amp;#34;)    
def InitLog():
    logger.setLevel(logging.DEBUG)    
    fh=logging.FileHandler(&amp;#34;network-server.log&amp;#34;)
    fh.setLevel(logging.DEBUG)
    ch=logging.StreamHandler()
    ch.setLevel(logging.DEBUG)    
    formatter=logging.Formatter(&amp;#34;%(asctime)s - %(name)s - %(levelname)s -%(message)s&amp;#34;)
    ch.setFormatter(formatter)
    fh.setFormatter(formatter)    
    logger.addHandler(fh)
    logger.addHandler(ch)    
if __name__==&amp;#34;__main__&amp;#34;:
    InitLog()    
    try:
        listen_fd=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    except socket.error,msg:
        logger.error(&amp;#34;create a socket failed&amp;#34;)    
    try:
        listen_fd.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
    except socket.error,msg:
        logger.error(&amp;#34;setsocketopt error&amp;#34;)    
    try:
        listen_fd.bind((&amp;#39;&amp;#39;,10001))
    except socket.error,msg:
        logger.error(&amp;#34;listen file id bind ip error&amp;#34;)    
    try:
        listen_fd.listen(10)
    except socket.error,msg:
        logger.error(msg)
    try:
        epoll_fd=select.epoll()
        epoll_fd.register(listen_fd.fileno(),select.EPOLLIN)
    except select.error,msg:
        logger.error(msg)        
    connections={}
    addresses={}
    datalist={}
    while True:
        epoll_list = epoll_fd.poll()
        for fd,events in epoll_list:
            if fd==listen_fd.fileno():
                conn,addr=listen_fd.accept()
                logger.debug(&amp;#34;accept connction from  %s,%d,fd = %d&amp;#34; %(addr[0],addr[1],conn.fileno()))
                conn.setblocking(0)
                epoll_fd.register(conn.fileno(),select.EPOLLIN|select.EPOLLET)
                connections[conn.fileno()]=conn 
                addresses[conn.fileno()]=addr
            elif select.EPOLLIN  &amp;amp; events:
                datas=&amp;#39;&amp;#39;
                while True:
                    try:
                        data=connections[fd].recv(10)
                        if not data and not datas:
                            epoll_fd.unregister(fd)
                            connections[fd].close()
                            logger.debug(&amp;#34;%s,%d closed&amp;#34; % (addresses[fd][0],addresses[fd][1]))                                
                            break
                        else:
                            datas+=data 
                    except socket.error,msg:
                        if msg.errno==errno.EAGAIN:
                            logger.debug(&amp;#34;%s receive %s&amp;#34; % (fd,datas))
                            datalist[fd]=datas
                            epoll_fd.modify(fd,select.EPOLLET|select.EPOLLOUT)
                            break
                        else:
                            epoll_fd.unregister(fd)
                            connections[fd].close()
                            logger.error(msg)
                            break
            elif select.EPOLLHUP &amp;amp; events:
                epoll_fd.unregister(fd)
                connections[fd].close()
                logger.debug(&amp;#34;%s ,%d closed&amp;#34; % (addresses[fd][0],addresses[fd][1]))
            elif select.EPOLLOUT &amp;amp; events:
                sendLen=0
                while True:
                    sendLen += connections[fd].send(datalist[fd][sendLen:])
                    if sendLen == len(datalist[fd]):
                         break
                epoll_fd.modify(fd,select.EPOLLIN|select.EPOLLET)
            else:
                continue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;commontestpyclient-code&#34;&gt;commontest.py(client code)&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;import socket
messages = [&amp;#34;This is the message&amp;#34;,
         &amp;#34;It will be send&amp;#34;,
         &amp;#34;in parts&amp;#34;]
print &amp;#34;Connect to the server&amp;#34;    
server_address=(&amp;#34;localhost&amp;#34;,10001)    
#Create a TCP/IP sock
socks=[]
for i in range(10):
     socks.append(socket.socket(socket.AF_INET,socket.SOCK_STREAM))    
for s in socks:
    s.connect(server_address)    
counter=0
for message in messages:
    for s in socks:
        counter+=1
        print &amp;#34; %s sending %s &amp;#34;%(s.getpeername(),message+&amp;#34; version &amp;#34;+str(counter))
        s.send(message+&amp;#34; version &amp;#34;+str(counter))
    for s in socks:
        data=s.recv(1024)
        print &amp;#34; %s received %s &amp;#34; % (s.getpeername(),data)
        if not data:
            print &amp;#34;closing socket&amp;#34;,s.getpeername()
            s.close()  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;scotdoyle.com/python-epoll-howto.html&#34;&gt;epoll的使用&lt;/a&gt;&lt;br&gt;
asyncore的介绍和使用：&lt;br&gt;
&lt;a href=&#34;blog.csdn.net/livefun/article/details/8721772&#34;&gt;blog1&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.nightmare.com/medusa/async_sockets.html&#34;&gt;blog2&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>ubuntu系统上安装多版本python语言环境</title>
            <link>https://justpic.org/post/ubuntu-install-multi-python/</link>
            <pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate>
            
            <guid>https://justpic.org/post/ubuntu-install-multi-python/</guid>
            <description>&lt;p&gt;ubuntu系统上安装多版本python语言环境&lt;/p&gt;
&lt;h3 id=&#34;ubuntu上安装多个版本的python&#34;&gt;ubuntu上安装多个版本的python&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装python3.3在ubuntu上&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install python-software-properties
sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python3.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;建立软链接：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;ln -s /usr/bin/python3.3 /usr/bin/python3.3m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安转python2.7.5再ubuntu上:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python2.4 python2.5 python2.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;使用virtualenv来定制自己的环境&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;virtualenv -p /usr/bin/python3.3 python3.3env
virtualenv -p /usr/bin/python2.7.5 python2.7.5env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok!&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>ubuntu上安装hdf5</title>
            <link>https://justpic.org/post/ubuntu-install-hdf5/</link>
            <pubDate>Wed, 05 Jun 2013 11:11:11 +0000</pubDate>
            
            <guid>https://justpic.org/post/ubuntu-install-hdf5/</guid>
            <description>&lt;p&gt;ubuntu系统上安装hdf5&lt;/p&gt;
&lt;h2 id=&#34;install-hdf5-on-ubuntu-1204&#34;&gt;install hdf5 on ubuntu 12.04&lt;/h2&gt;
&lt;p&gt;1.you can probably install the debian libraries into quantal with no issues, precise is less likely to work, but it might possibly you will have to build it from source to get everything right.&lt;br&gt;
Code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$apt-get install devscripts equivs ubuntu-dev-tools 
$pull-debian-source hdf5 experimental    
$cd hdf5-*
$sudo mk-build-deps -ir
$debuild -us -uc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.上述方法现在已经不适用,Google后发现,可以直接使用hdf5二进制包,由于本机为64bit linux,下载64位下的二进制包:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.9/bin/linux-x86_64/hdf5-1.8.9-linux-x86_64-shared.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;解压后，并在.bashrc中设置：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;$export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/hdf5-1.8.9-linux-x86_64-shared/lib
$export HDF5_DIR=$HOME/hdf5-1.8.9-linux-x86_64-shared
$source .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4.安装 blosc (可选)&lt;br&gt;
5.安装 lzo2-2 lzo2-dev&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;sudo apt-get install lzo2-2 lzo2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;至此HDF5可用&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>