<html><body><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 桑河一榆</title><link/>https://justpic.org/post/<description>Recent content in Posts on 桑河一榆</description><generator>justpic</generator><language>zh-CN</language><managingeditor>matrix.orz@gmail.com (justpic)</managingeditor><webmaster>matrix.orz@gmail.com (justpic)</webmaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastbuilddate>Mon, 06 Apr 2020 01:00:32 +0800</lastbuilddate><atom:link href="https://justpic.org/post/index.xml" rel="self" type="application/rss+xml"></atom:link><item><title>口罩和安全帽识别</title><link/>https://justpic.org/post/2020/04/06/mask-helmet-recognition/<pubdate>Mon, 06 Apr 2020 01:00:32 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/04/06/mask-helmet-recognition/</guid><description><p>2019年以来，图像识别类竞赛也开始集中到口罩和安全帽这两类与健康安全息息相关的场景中，下面主要从这两类场景的一些竞赛资料和比赛流程进行一个简短的介绍，</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" onclick="_click_handler(this)" type="button" value="点击验证"/></div><div class="hugo-encryptor-cipher-text" style="display: none;">YxMFgzYoCNyGi8qpQhrsd8Z5XDVnngpzINW5HpnOqgyltrmmsRuOBqcn5ncXFUmMZqeYoW0323D+eAzjwcohfAXBpRyJQOyIxTgUOzLv6hxtaKM3gP64KO3IkbPt5abADgMGVGEJcQ82bBCzDhR0bdqmw8qS0yq5+6mL0z+AzbVgs0yQDBAY6/PEfY00Z8EPB5bIYsf2CiEn9y3lHz1gZRB0ja77h9B4TAEvUaS5gLuc7LU6yXpJWwM9BL0L5mo5x9mB9x/IvWEYI4tuEN5BKNCFuLlYuG183e8lVBRRJseiqpOchoxSoVImoMx4iuQFIcD/nBLPlJ/usE+yjFeYD/QhLUJiPNdH5pMJ51fu+iYkhHF2gg40mEPgdS9B9V+9mn0kv+d7Q591952DU5KGJIpAjvGjJ3eN0xdhY/l5pndA6NYbKmZdewmeh22UjF1ZpfhrWnRGSpvzC86ktz6qlbErwMIlHRh6hKmfUCZVJR/ndKDaVwNI4D5KeBKTQLEGiFMD6vpbCnh6G7sbzm6124SINq1we/uonZ9PweskM0YJMMjWjp07LqFQlqnaDRfvCA43zqITEyiFThPrHRZ82KQ6I+kWsgA5rCaQ2BJ3pcTKcJyacu+i7f1gsXY/DCR15g16ZAT+xhhQBDTOU5NjMliGO9NLe59Svxo+7ntIajHAt6ba/jpFL2EhCaCeF5lDZVipAEmZTTRxL4G4w6GjqLvylBA2Efz/N2jak5mVg/Z/5geh6gHbL5ZMSLIP4BXpX4uLkq0d9SXqKdFfHB4Gtd1CuYQ0Kil5P1EYBUIOPOPuCCuryzghqMaDFmfuc9RKbyaMqxULtkeeZm6PHgraMF2BDP/H9aCXCHEPzOLzOdoxlzGsr+K0cCksA19vCJ/0MV7CuBHt7v30FaXEGsHLlIEZqmLqk1pXlt/9mZP2BhoRNnDclh1iouKiZNBqNFkTPgExfD7b5nmBE7Pp6D8KQ+CgfoCgSN7VUvt8J4r+dKhKjyA0anffIiCDELhZFv9KViWUKBB8hyLlyX5u9b4XMFsgODV6hCcaIXeKoV1UO2C5Ag4z2lE99ph6LFSr/zBaLsU9W2osGUirZo1iWyqv136m6aJYwxZZLFG8jm87eMZVfe2IXTrxllH2ex/gW2O+HgiNUQVIb64yLSjzJO+q1Zxvmm+mF6hJMFEVaijYzTnBR4UXg8GaqC+9bIPoJTcBbpbBqFpxu6K4EzW4DLGW4XKduxfP2biCyhmbDkahz9VyHa12E8MG9Iee/uBHZzPwX7PlxsUNup/XS0FXfic4GgHrPwSw/QudOaxv44+uXkW9JFW6m7DxNfmt5tFKGxfS4ytWaRTdTlO5PR6P7ZcwF0CyFh+gcip/nxxG7T/jZt2ogKhCykA1f4vB1DpINGm6rsHSq0aPCvZrPxioP18WFOEuCtOvT6t06DjWRZYjLlw/8D7r17hVKQouT8APu75FHhqtDjlELKDeCpPisq5tQSHrmjJONpkm1rQ3H+pnWuGGdHo1kxJKGQ9+a/GneF8I4w575esDJ9ckt1NVsn1oTrMzsrCzGS0QDMWnFuK+7Iu3nLzNwf8M83dHS79qmsQp03XaP/FSJY7XYcb7Yp3ilxY6oLTDGMuoU0nzqNhhSMoPg0HFz2jbJYnTU49F1vNU5XW2Oqi9Nlj03ESUhQShtENpoO0e39LRBb3vL9e8JKZ2WWQSHo8H2owAjI8+biaKD0tWQw3/oRQCZ2UGifDMCrh9WzdLnp4hfaIYim/2/VHIfHGEyc0k8MUK/nqdu+vKA0PpkyWiw9WRwN9PP01pxzGp91CBm5ta8ER3YVUSKyL9IuOfJ9sqvMR1xRZBdX4/rpPj32C7f3SZGEu9hVCUbGGY4dfa5Q1sUHRCZx89e0IKFlK+vl45mBcO0DiLbfry1lcrpkg93F+eZ6hWWbJoVk6tB76rk0hg1Xfw3S1gEsYX57VT6y71TuL5v+1Ds7SGrMsLu7wTu3And4YbzAPVwR9QJWZ/CzWQKfZmajOqLwgyCrxfkA4R79kYRIUvNBq6u+xyXZMEn/vIhB7EN6HhieQs21fvdmyAgR6hd4r+azWWaESh48SWlKFpKRBR85MvtBa6D31a53IyjLok79jBfnHQPVVatS4elvk4WEY9SC8qCCh/XEJPPlx6GfLUevbcnmfhKdcOB7HF5btZMqdY+orzM9GwACCCQCCwoNSYzI61Yw5XVR991EuvsliBEWQAm4tkcr9BM2Teuw39YAKUq4xA9nv4P/YeIC3ZpMO9cVvyrTrm3Ry3RLs0lBSHabGAD/w0ybkf0FLmkq1+wajyvCuxb9dkiCdLT+aZBE2zhTRaRIdZPXdkvuqf+RyrVH02YD50NVd1MmgUxTpIzq0wfiENzJp+vbyQ2UxCTOfUvFE+KLqQlaxLBW07r6glRg46jyd83DoN/L4CoH8PsJ/btWACHSegwI8T+SjinqW1OqAWxDnx7SUh4Z7Ms4aeud1eA+vpdwBBTYCch7esQCHYJY2kB6LrXgqWCPHkQSBP5Y84G5+HGXMQt8B6i2yonVS1iTYysRYRRdg/4RTuozLQ0XPhLG2CdO6zA2fCtPliTex41dp2SFHEwk+uOutkY9ECsM8BBVNuNOJOkJY8XMmeLp725mUHpdE45/fe/C5Qkbqjx42MpAikmU3oogGrt4bDG9YKjNh6Y+F+a6jBFmNT+qJitDHqG+bCRrl9szHEHGn34Nrkq/jjJB9C0wNu1ub0J6m/Nc7WtO3/gva69UZVM++qNUZiHRHLDGw50IX7uC/yq0qMEnRGg4+ooYDNvCOMf1HDhRRi89RxWpBZbi+XZt91W6YzkYj1V09HNiueetw=</div></div><hr/><p><em>参考</em></p><ul><li><a href="http://www.python88.com/topic/49712" rel="noopener noreffer" target="_blank">深度学习实现安全帽的检测</a></li><li><a href="https://www.lizenghai.com/archives/32586.html" rel="noopener noreffer" target="_blank">基于YOLOV3进行安全帽检测</a></li><li><a href="https://www.yanxishe.com/blogDetail/14905" rel="noopener noreffer" target="_blank">ai研习社</a></li><li><a href="https://www.cnblogs.com/supersayajin/p/11445401.html" rel="noopener noreffer" target="_blank">安全帽检测数据集与与训练模型</a></li><li><a href="https://github.com/njvisionpower/Safety-Helmet-Wearing-Dataset" rel="noopener noreffer" target="_blank">安全帽检测数据集</a></li><li><a href="https://github.com/MinhNKB/helmet-safety-vest-detection" rel="noopener noreffer" target="_blank">安全帽检测github</a></li><li><a href="https://github.com/QinWinner/MFC-darknet-yolo" rel="noopener noreffer" target="_blank">mfc检测安全帽</a></li><li><a href="cvmart.net" rel="noopener noreffer">cvmart</a></li></ul></description></item><item><title>ubuntu 18.04系统安装OpenCV 4.2.0</title><link/>https://justpic.org/post/2020/03/27/ubuntu-18.04-install-opencv-4.2.0/<pubdate>Fri, 27 Mar 2020 11:47:38 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/27/ubuntu-18.04-install-opencv-4.2.0/</guid><description><p>主要介绍ubuntu 18.04安装OpenCV 4.2.0</p><h2 id="更新系统">更新系统</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt update
$ sudo apt upgrade</code></pre></td></tr></table></div></div><h2 id="安装前置依赖包">安装前置依赖包</h2><ul><li>通用工具</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"> $ sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall</code></pre></td></tr></table></div></div><ul><li>图像I/O库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libjpeg-dev libpng-dev libtiff-dev</code></pre></td></tr></table></div></div><ul><li>视频/音频库-FFMPEG,GSTREAMER,x264等等</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
$ sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
$ sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev
$ sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev</code></pre></td></tr></table></div></div><ul><li>OpenCore-</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev</code></pre></td></tr></table></div></div><ul><li>照相编程接口库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
$<span class="nb">cd</span> /usr/include/linux
$ sudo ln -s -f ../libv4l1-videodev.h videodev.h
$<span class="nb">cd</span> ~</code></pre></td></tr></table></div></div><ul><li>GTK库－图形用户界面</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libgtk-3-dev</code></pre></td></tr></table></div></div><ul><li>python3所使用的库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install python3-dev python3-pip
$ sudo -H pip3 install -U pip numpy
$ sudo apt install python3-testresources</code></pre></td></tr></table></div></div><ul><li>用于CPU的C++并行库</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libtbb-dev</code></pre></td></tr></table></div></div><ul><li>用于OpenCV的优化库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt-get install libatlas-base-dev gfortran</code></pre></td></tr></table></div></div><ul><li>可选安装　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libprotobuf-dev protobuf-compiler
$ sudo apt-get install libgoogle-glog-dev libgflags-dev
$ sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen</code></pre></td></tr></table></div></div><h2 id="正式安装opencv-420步骤">正式安装Opencv 4.2.0步骤</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$<span class="nb">cd</span> ~
$ mkdir -p installcv1
$<span class="nb">cd</span> installcv1
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.1.zip
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.1.zip
$ unzip opencv.zip
$ unzip opencv_contrib.zip
$<span class="nb">echo</span><span class="s2">"Create a virtual environtment for the python binding module"</span>
$ sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip
$<span class="nb">echo</span><span class="s2">"Edit ~/.bashrc"</span>
$<span class="nb">export</span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
$<span class="nb">export</span><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python3
$<span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv cv -p python3
$ pip install numpy
$<span class="nb">echo</span><span class="s2">"Procced with the installation"</span>
$<span class="nb">cd</span> opencv-4.2.0
$ mkdir build
$<span class="nb">cd</span> build
$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE
-D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc
-D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv
-D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON
-D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF
-D<span class="nv">WITH_TBB</span><span class="o">=</span>ON
-D<span class="nv">WITH_CUDA</span><span class="o">=</span>ON
-D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF
-D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">WITH_V4L</span><span class="o">=</span>ON
-D<span class="nv">WITH_QT</span><span class="o">=</span>OFF
-D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON
-D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc
-D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages
-D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/installcv/opencv_contrib-4.2.0/modules
-D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python
-D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON　-D<span class="nv">WITH_CUDNN</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_DNN_CUDA</span><span class="o">=</span>ON
-D<span class="nv">CUDA_ARCH_BIN</span><span class="o">=</span>6.1
-D<span class="nv">WITH_INF_ENGINE</span><span class="o">=</span>ON
-D<span class="nv">ENABLE_CXX11</span><span class="o">=</span>ON
-D<span class="nv">INTEL_CVSDK_DIR</span><span class="o">=</span>/home/sn0w/intel/openvino_2020.1.023/deployment_tools
-D<span class="nv">IE_PLUGINS_PATH</span><span class="o">=</span>/home/sn0w/intel/openvino_2020.1.023/deployment_tools/inference_engine/lib/intel64/
-D<span class="nv">INF_ENGINE_RELEASE</span><span class="o">=</span><span class="m">2020010000</span>
-D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON
-D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..</code></pre></td></tr></table></div></div><p><strong>如果你只是想编译静态库，只需要在Cmake时附加<code> -D BUILD_SHARED_LIBS=OFF</code></strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc -D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/usr/local -D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF -D<span class="nv">WITH_TBB</span><span class="o">=</span>ON -D<span class="nv">WITH_CUDA</span><span class="o">=</span>ON -D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF -D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_V4L</span><span class="o">=</span>ON -D<span class="nv">WITH_QT</span><span class="o">=</span>OFF -D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON -D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON -D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc -D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages -D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~／installcv/opencv_contrib-4.2.0/modules -D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python -D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">BUILD_SHARED_LIBS</span><span class="o">=</span>OFF ..</code></pre></td></tr></table></div></div><p><strong>如果你不想包括CUDA，只需要设置<code>-D WITH_CUDA=OFF</code></strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc-6 -D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv -D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF -D<span class="nv">WITH_TBB</span><span class="o">=</span>ON -D<span class="nv">WITH_CUDA</span><span class="o">=</span>OFF -D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF -D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_V4L</span><span class="o">=</span>ON -D<span class="nv">WITH_QT</span><span class="o">=</span>OFF -D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON -D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON -D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc -D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages -D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/installcv1/opencv_contrib-4.2.0/modules -D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python -D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..</code></pre></td></tr></table></div></div><p><strong>如果你想使用CUDNN，你必须在Cmake时包含这些标记（正确的设置CUDA_ARCH_BIN的值)</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">-D<span class="nv">WITH_CUDNN</span><span class="o">=</span>ON<span class="se">\</span><span class="se"></span>-D<span class="nv">OPENCV_DNN_CUDA</span><span class="o">=</span>ON<span class="se">\</span><span class="se"></span>-D<span class="nv">CUDA_ARCH_BIN</span><span class="o">=</span>6.1<span class="se">\</span></code></pre></td></tr></table></div></div><p>在<a href="https://developer.nvidia.com/cuda-gpus" rel="noopener noreffer" target="_blank">https://developer.nvidia.com/cuda-gpus</a>
网站上可以看到自己网卡可兼容的CUDA版本情况．</p><p><strong>正式编译前，你必须检查CUDA在Cmake输出时是否启用</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">-- NVIDIA CUDA: YES (ver 10.0, CUFFT CUBLAS NVCUVID FAST_MATH)
-- NVIDIA GPU arch: 30 35 37 50 52 60 61 70 75
-- NVIDIA PTX archs:</code></pre></td></tr></table></div></div><p><strong>正式编译和安装</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ nproc
$ make -j8<span class="c1">#！ubuntu 18.04编译过程中出现错误：sudo ln -s /usr/include/eigen3/Eigen /usr/include/Eigen</span>
$ sudo make install</code></pre></td></tr></table></div></div><p><strong>配置环境变量</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo /bin/bash -c<span class="s1">'echo "/usr/local/lib" &gt;&gt; /etc/ld.so.conf.d/opencv.conf'</span>
$ sudo ldconfig
$</code></pre></td></tr></table></div></div><p><strong>如果你想让python的cv包能够在系统环境下使用，必须要下面的复制工作</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo cp -r ~/.virtualenvs/cv/lib/python3.6/site-packages/cv2 /usr/local/lib/python3.6/dist-packages
$<span class="nb">export</span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/ev_sdk/lib:/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv/lib:/usr/local/lib:/usr/local/cuda-10.0/lib64<span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="p">:+:</span><span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="si">}}</span>
$<span class="nb">export</span><span class="nv">OpenCV_DIR</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv
$<span class="nb">echo</span><span class="s2">"Modify config-3.6.py to point to the target directory"</span>
$ sudo nano /usr/local/lib/python3.6/dist-packages/cv2/config-3.6.py<span class="sb">```</span><span class="nv">PYTHON_EXTENSIONS_PATHS</span><span class="o">=</span><span class="o">[</span>
os.path.join<span class="o">(</span><span class="s1">'/usr/local/lib/python3.6/dist-packages/cv2'</span>,<span class="s1">'python-3.6'</span><span class="o">)</span><span class="o">]</span> + PYTHON_EXTENSIONS_PATHS<span class="sb">```</span></code></pre></td></tr></table></div></div><h2 id="测试安装">测试安装　　</h2><p>案例程序</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//test.cpp</span><span class="c1"></span><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;ctime&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;cmath&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">"bits/time.h"</span><span class="cp"></span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/core.hpp&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/highgui.hpp&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/imgproc.hpp&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/imgcodecs.hpp&gt;</span><span class="cp"></span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/core/cuda.hpp&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/cudaarithm.hpp&gt;</span><span class="cp"></span><span class="cp">#include</span><span class="cpf">&lt;opencv2/cudaimgproc.hpp&gt;</span><span class="cp"></span><span class="cp"></span><span class="cp">#define TestCUDA true</span><span class="cp"></span><span class="kt">int</span><span class="nf">main</span><span class="p">()</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">clock_t</span><span class="n">begin</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span><span class="k">try</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">String</span><span class="n">filename</span><span class="o">=</span><span class="s">"/home/raul/Pictures/Screenshot_20170317_105454.png"</span><span class="p">;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">srcHost</span><span class="o">=</span><span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="n">cv</span><span class="o">::</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="n">TestCUDA</span><span class="p">)</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">cuda</span><span class="o">::</span><span class="n">GpuMat</span><span class="n">dst</span><span class="p">,</span><span class="n">src</span><span class="p">;</span><span class="n">src</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="n">srcHost</span><span class="p">);</span><span class="c1">//cv::cuda::threshold(src,dst,128.0,255.0, CV_THRESH_BINARY);</span><span class="c1"></span><span class="n">cv</span><span class="o">::</span><span class="n">cuda</span><span class="o">::</span><span class="n">bilateralFilter</span><span class="p">(</span><span class="n">src</span><span class="p">,</span><span class="n">dst</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">resultHost</span><span class="p">;</span><span class="n">dst</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="n">resultHost</span><span class="p">);</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">dst</span><span class="p">;</span><span class="n">cv</span><span class="o">::</span><span class="n">bilateralFilter</span><span class="p">(</span><span class="n">srcHost</span><span class="p">,</span><span class="n">dst</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="p">}</span><span class="p">}</span><span class="c1">//cv::imshow("Result",resultHost);</span><span class="c1"></span><span class="c1">//cv::waitKey();</span><span class="c1"></span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="k">const</span><span class="n">cv</span><span class="o">::</span><span class="n">Exception</span><span class="o">&amp;</span><span class="n">ex</span><span class="p">)</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Error: "</span><span class="o">&lt;&lt;</span><span class="n">ex</span><span class="p">.</span><span class="n">what</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="p">}</span><span class="n">std</span><span class="o">::</span><span class="n">clock_t</span><span class="n">end</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="kt">double</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">begin</span><span class="p">)</span><span class="o">/</span><span class="n">CLOCKS_PER_SEC</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="p">}</span></code></pre></td></tr></table></div></div><p><strong>编译和执行</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ g++ -o test test.cpp `pkg-config opencv --cflags --libs`
$ ./test</code></pre></td></tr></table></div></div><h2 id="faq">FAQ</h2><p>编译过程中如果出现如下错误，说明显卡不支持CUDA的最低要求</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">CUDA backend for DNN module requires CC 5.3 or higher. Please remove unsupported architectures from CUDA_ARCH_BIN option.</code></pre></td></tr></table></div></div><h2 id="安装或者编译错误">安装或者编译错误　　</h2><p>opencv_contrib-4.1.1/modules/cudaimgproc/src/cuda/bilateral_filter.cu:140: error: (-217:Gpu API call) invalid configuration argument in function ‘bilateral_caller’</p><p>cmake项目编译出现undefined reference to `cv::freetype::createFreeType2()　　</p><p><strong>参考</strong><br/><a href="https://medium.com/repro-repo/install-cuda-10-1-and-cudnn-7-5-0-for-pytorch-on-ubuntu-18-04-lts-9b6124c44cc" rel="noopener noreffer" target="_blank">https://medium.com/repro-repo/install-cuda-10-1-and-cudnn-7-5-0-for-pytorch-on-ubuntu-18-04-lts-9b6124c44cc</a><br/><a href="https://gist.github.com/raulqf/f42c718a658cddc16f9df07ecc627be7" rel="noopener noreffer" target="_blank">https://gist.github.com/raulqf/f42c718a658cddc16f9df07ecc627be7</a></p></description></item><item><title>requests库中的那些高级用法</title><link/>https://justpic.org/post/2020/03/12/requsts-advance-usage/<pubdate>Thu, 12 Mar 2020 22:21:33 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/12/requsts-advance-usage/</guid><description><p>作为python中最通用的http工具库之一——requests，具有简洁、直观和全面的特点，一般来说，requests与python中的内置模块urllib3已经逐渐成为程序员处理HTTP请求的首选工具。</p><p>得益于requests简洁的API接口，在生产环境下得到了非常普遍的应用，即使在复杂的应用场景下，request的扩展性也非常好。如果你正在写一个API客户端或者网络爬虫，同时对断网情况比较棘手，那么下面所介绍的requests高级技巧可能会帮助你更好的进行程序调试。</p><h2 id="请求钩子">请求钩子</h2><p>应用第三方API时，需要验证应答内容是否合法，requests提供了raise_for_status()方法来判断应答内容的HTTP状态码是不是4xx或者5xx，表明请求产生了客户端或者服务器错误。</p><p>例如：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.github.com/user/repos?page=1'</span><span class="p">)</span><span class="c1"># 判断是否有无错误</span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span></code></pre></td></tr></table></div></div><p>每一次请求都调用raise_for_status会非常繁琐，requests非常贴心的提供了一个'钩子(hook)‘接口（通过在请求过程的特定部分指定回调函数）。
下面请看案例代码，通过使用hook来确保每次服务应答后，raise_for_status能被调用。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">assert_status_hook</span><span class="o">=</span><span class="k">lambda</span><span class="n">response</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">:</span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">hooks</span><span class="p">[</span><span class="s1">'response'</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">assert_status_hook</span><span class="p">]</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.github.com/user/repos?page=1")</span><span class="o">&gt;</span><span class="n">HTTPError</span><span class="p">:</span><span class="mi">401</span><span class="n">Client</span><span class="n">Error</span><span class="p">:</span><span class="n">Unauthorized</span><span class="k">for</span><span class="n">url</span><span class="p">:</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">repos</span><span class="err">?</span><span class="n">page</span><span class="o">=</span><span class="mi">1</span></code></pre></td></tr></table></div></div><h2 id="设置基链接">设置基链接</h2><p>假设你只使用api.org上的一个api，你可能在每次调用时都要重复编写http协议和域名。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.org/list'</span><span class="p">)</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.org/list/3/item'</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>使用BaseUrlSession可以避免敲下这些重复的内容。
下面看案例代码，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">form</span><span class="n">requests_toolbelt</span><span class="kn">import</span><span class="nn">sessions</span><span class="n">http</span><span class="o">=</span><span class="n">sessions</span><span class="o">.</span><span class="n">BaseUrlSession</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="s2">"https://api.org"</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"/list"</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"/list/item"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p><strong>！注意requests_toolbelt没有默认包含在requests中的，使用时是需要额外安装的</strong></p><h2 id="设置默认超时">设置默认超时</h2><p>requests文档中推荐在生产环境下设置超时，如果你忘记设置超时，应用程序可能会当掉，尤其是在同步环境下，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://github.com/'</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>但是每次设置超时时间会非常繁琐，偶尔忘记设置超时会非常恼火。<img alt="giphy" class="lazyload" data-sizes="auto" data-src="" data-srcset="/images/posts/giphy.gif,  1.5x,  2x" src="/svg/loading.small.min.svg" title="giphy"/></p><p>使用Transport Adapters可以为所有的HTTP调用设置默认超时时间，当然使用后也是可以通过再定义覆盖默认配置，
下面看案例代码，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">requests.adapters</span><span class="kn">import</span><span class="n">HTTPAdapter</span><span class="n">DEFAULT_TIMEOUT</span><span class="o">=</span><span class="mi">5</span><span class="k">class</span><span class="nc">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">HTTPAdapter</span><span class="p">):</span><span class="k">def</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="o">=</span><span class="n">DEFAULT_TIMEOUT</span><span class="k">if</span><span class="s2">"timeout"</span><span class="ow">in</span><span class="n">kwargs</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="o">=</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="k">del</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="k">def</span><span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="n">timeout</span><span class="o">=</span><span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"timeout"</span><span class="p">)</span><span class="k">if</span><span class="n">timeout</span><span class="ow">is</span><span class="bp">None</span><span class="p">:</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="k">return</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="c1">#使用</span><span class="kn">import</span><span class="nn">requests</span><span class="n">http</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">adapter</span><span class="o">=</span><span class="n">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">2.5</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"http://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="c1">#使用默认配置</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.weibo.com'</span><span class="p">)</span><span class="c1">#覆盖默认配置</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.weibo.com'</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span></code></pre></td></tr></table></div></div><h2 id="失败后的重试">失败后的重试</h2><p>服务器当掉后，网络连接会变得拥塞或者有损，如果想要建立更具鲁棒性的系统，那么必须考虑网络连接失败，以及建立重试策略。
在Http客户端上添加重试策略是非常直接的，我们来创建一个HTTPAdapter，然后在adapter上添加策略</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">requests.adapter</span><span class="kn">import</span><span class="n">HTTPAdapter</span><span class="kn">from</span><span class="nn">requests.packages.urllib3.util.retry</span><span class="kn">import</span><span class="n">Retry</span><span class="n">retry_strategy</span><span class="o">=</span><span class="n">Retry</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">429</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">502</span><span class="p">,</span><span class="mi">503</span><span class="p">,</span><span class="mi">504</span><span class="p">],</span><span class="n">method_whitelist</span><span class="o">=</span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="s2">"GET"</span><span class="p">,</span><span class="s2">"OPTIONS"</span><span class="p">]</span><span class="p">)</span><span class="n">adapter</span><span class="o">=</span><span class="n">HTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retry_strategy</span><span class="p">)</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"http://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://en.wikipedia.org/w/api.php"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>默认的 Retry 类提供了健全的默认值，但是是高度可配置的，所以这里是我使用的最常见参数的纲要。
其中</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">total</span><span class="o">=</span><span class="mi">3</span></code></pre></td></tr></table></div></div><p>total代表重试的总次数，如果失败的请求或者重定向的次数超过这个数字，客户端将抛出 urllib3.exceptions.Maxretryerror 异常。通常3次重试就足够了。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">413</span><span class="p">,</span><span class="mi">429</span><span class="p">,</span><span class="mi">503</span><span class="p">]</span></code></pre></td></tr></table></div></div><p>要重试的 HTTP 响应代码。 您可能希望对常见的服务器错误(500、502、503、504)进行重试，因为服务器和反向代理并不总是遵循 HTTP 规范。 总是在超出429速率限制的情况下重试，因为默认情况下，urllib 库应该在失败请求时增量地退出。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">method_whitelist</span><span class="o">=</span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="s2">"GET"</span><span class="p">,</span><span class="s2">"PUT"</span><span class="p">,</span><span class="s2">"DELETE"</span><span class="p">,</span><span class="s2">"OPTIONS"</span><span class="p">,</span><span class="s2">"TRACE"</span><span class="p">]</span></code></pre></td></tr></table></div></div><p>要重试的 HTTP 方法。 默认情况下，这包括除 POST 以外的所有 HTTP 方法，因为 POST 可能导致新的插入。 修改此参数以包含 POST，因为大多数 i 处理的 API 不返回错误代码并在同一调用中执行插入操作。 如果他们这样做了，您可能应该发布一个 bug 报告。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">backoff_factor</span><span class="o">=</span><span class="mi">0</span></code></pre></td></tr></table></div></div><p>backoff_factor(退避因子)与失败的请求之间休眠的时间有关，其算法如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span><span class="n">backoff</span><span class="n">factor</span><span class="p">}</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="p">({</span><span class="n">number</span><span class="n">of</span><span class="n">total</span><span class="n">retries</span><span class="p">}</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span></code></pre></td></tr></table></div></div><p>例如，如果退避因子设置为:
1：连续睡眠：0.5，1，2，4，8，16，32，64，128，256
2：连续睡眠：1，2，4，8，16，32，64，128，256，512
10：连续睡眠：5，10，20，40，80，160，320，640，1280，2560
作为重试策略的合理默认实现，连续睡眠值是呈指数增长的，通过设置退避因子，可以决定每个睡眠乘以多少。这个值默认为0，表示不会设置截断二进制指数退避算法，重试将立即执行。</p><h3 id="结合超时和重试">结合超时和重试</h3><p>由于 HTTPAdapter 具有类比的特性，我们可以像下面这样将重试和超时结合起来:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">retries</span><span class="o">=</span><span class="n">Retry</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">backoff_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">429</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">502</span><span class="p">,</span><span class="mi">503</span><span class="p">,</span><span class="mi">504</span><span class="p">])</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retries</span><span class="p">))</span></code></pre></td></tr></table></div></div><h2 id="调试http请求">调试HTTP请求</h2><p>有时候请求会失败，而你却不知道为什么。 记录请求和响应可以帮助您了解故障。 有两种方法可以做到这一点——要么使用内置的调试日志记录设置，要么使用请求钩子。</p><h3 id="打印http头文件">打印HTTP头文件</h3><p>更改大于0的日志记录调试级别将记录响应 HTTP 报头。 这是最简单的选项，但它不允许您查看 HTTP 请求或响应体。 如果您处理的 API 返回一个不适合日志记录或包含二进制内容的大体有效负载，那么它是有用的。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="kn">import</span><span class="nn">http</span><span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="o">.</span><span class="n">debuglevel</span><span class="o">=</span><span class="mi">1</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://www.google.com/"</span><span class="p">)</span><span class="c1"># Output</span><span class="n">send</span><span class="p">:</span><span class="sa">b</span><span class="s1">'GET / HTTP/1.1</span><span class="se">\r\n</span><span class="s1">Host: www.google.com</span><span class="se">\r\n</span><span class="s1">User-Agent: python-requests/2.22.0</span><span class="se">\r\n</span><span class="s1">Accept-Encoding: gzip, deflate</span><span class="se">\r\n</span><span class="s1">Accept: */*</span><span class="se">\r\n</span><span class="s1">Connection: keep-alive</span><span class="se">\r\n\r\n</span><span class="s1">'</span><span class="n">reply</span><span class="p">:</span><span class="s1">'HTTP/1.1 200 OK</span><span class="se">\r\n</span><span class="s1">'</span><span class="n">header</span><span class="p">:</span><span class="n">Date</span><span class="p">:</span><span class="n">Fri</span><span class="p">,</span><span class="mi">28</span><span class="n">Feb</span><span class="mi">2020</span><span class="mi">12</span><span class="p">:</span><span class="mi">13</span><span class="p">:</span><span class="mi">26</span><span class="n">GMT</span><span class="n">header</span><span class="p">:</span><span class="n">Expires</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="n">header</span><span class="p">:</span><span class="n">Cache</span><span class="o">-</span><span class="n">Control</span><span class="p">:</span><span class="n">private</span><span class="p">,</span><span class="nb">max</span><span class="o">-</span><span class="n">age</span><span class="o">=</span><span class="mi">0</span></code></pre></td></tr></table></div></div><h3 id="打印所有">打印所有</h3><p>如果您想记录整个 HTTP 生命周期，包括请求和响应的文本表示，那么您可以使用请求钩子和请求工具自带的转储组件。
在处理基于 REST 的 API 时，我更喜欢这个选项，因为它不会返回非常大的响应。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="kn">from</span><span class="nn">requests_toolbelt.utils</span><span class="kn">import</span><span class="n">dump</span><span class="k">def</span><span class="nf">logging_hook</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="n">data</span><span class="o">=</span><span class="n">dump</span><span class="o">.</span><span class="n">dump_all</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">'utf-8'</span><span class="p">))</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">hooks</span><span class="p">[</span><span class="s2">"response"</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">logging_hook</span><span class="p">]</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://api.openaq.org/v1/cities"</span><span class="p">,</span><span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"BA"</span><span class="p">})</span><span class="c1"># Output</span><span class="o">&lt;</span><span class="n">GET</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">cities</span><span class="err">?</span><span class="n">country</span><span class="o">=</span><span class="n">BA</span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span><span class="o">&lt;</span><span class="n">Host</span><span class="p">:</span><span class="n">api</span><span class="o">.</span><span class="n">openaq</span><span class="o">.</span><span class="n">org</span><span class="o">&gt;</span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span><span class="mi">200</span><span class="n">OK</span><span class="o">&gt;</span><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span><span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="p">;</span><span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&gt;</span><span class="n">Transfer</span><span class="o">-</span><span class="n">Encoding</span><span class="p">:</span><span class="n">chunked</span><span class="o">&gt;</span><span class="n">Connection</span><span class="p">:</span><span class="n">keep</span><span class="o">-</span><span class="n">alive</span><span class="o">&gt;</span><span class="p">{</span><span class="s2">"meta"</span><span class="p">:{</span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"openaq-api"</span><span class="p">,</span><span class="s2">"license"</span><span class="p">:</span><span class="s2">"CC BY 4.0"</span><span class="p">,</span><span class="s2">"website"</span><span class="p">:</span><span class="s2">"https://docs.openaq.org/"</span><span class="p">,</span><span class="s2">"page"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s2">"limit"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="s2">"found"</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span><span class="s2">"results"</span><span class="p">:[</span><span class="p">{</span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"BA"</span><span class="p">,</span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Goražde"</span><span class="p">,</span><span class="s2">"city"</span><span class="p">:</span><span class="s2">"Goražde"</span><span class="p">,</span><span class="s2">"count"</span><span class="p">:</span><span class="mi">70797</span><span class="p">,</span><span class="s2">"locations"</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span><span class="p">]</span><span class="p">}</span></code></pre></td></tr></table></div></div><h2 id="测试和模拟请求">测试和模拟请求</h2><p>在开发中使用第三方 API 会引入一个痛点——很难进行单元测试。 为减轻这种痛苦，Sentry 的工程师在开发过程中编写了一个模拟请求的库。</p><blockquote><p>不是将 HTTP 响应发送给服务器 getsentry / responses，而是截取 HTTP 请求，在应答时，测试过程中添加预定义的响应内容。</p></blockquote><p>下面请看案例代码</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">unittest</span><span class="kn">import</span><span class="nn">requests</span><span class="kn">import</span><span class="nn">responses</span><span class="k">class</span><span class="nc">TestAPI</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="nd">@responses.activate</span><span class="c1"># intercept HTTP calls within this method</span><span class="k">def</span><span class="nf">test_simple</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">response_data</span><span class="o">=</span><span class="p">{</span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"ch_1GH8so2eZvKYlo2CSMeAfRqt"</span><span class="p">,</span><span class="s2">"object"</span><span class="p">:</span><span class="s2">"charge"</span><span class="p">,</span><span class="s2">"customer"</span><span class="p">:</span><span class="p">{</span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"cu_1GGwoc2eZvKYlo2CL2m31GRn"</span><span class="p">,</span><span class="s2">"object"</span><span class="p">:</span><span class="s2">"customer"</span><span class="p">},</span><span class="p">}</span><span class="c1"># mock the Stripe API</span><span class="n">responses</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">responses</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">,</span><span class="n">json</span><span class="o">=</span><span class="n">response_data</span><span class="p">,</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">)</span><span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">(),</span><span class="n">response_data</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>如果发出的 HTTP 请求与模拟响应不匹配，则会抛出 ConnectionError。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">TestAPI</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="nd">@responses.activate</span><span class="k">def</span><span class="nf">test_simple</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">responses</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">responses</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://invalid-request.com"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>输出：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">ConnectionError</span><span class="p">:</span><span class="n">Connection</span><span class="n">refused</span><span class="n">by</span><span class="n">Responses</span><span class="o">-</span><span class="n">the</span><span class="n">call</span><span class="n">doesn</span><span class="s1">'t match any registered mock.</span><span class="n">Request</span><span class="p">:</span><span class="o">-</span><span class="n">GET</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">invalid</span><span class="o">-</span><span class="n">request</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">Available</span><span class="n">matches</span><span class="p">:</span><span class="o">-</span><span class="n">GET</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">stripe</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">charges</span></code></pre></td></tr></table></div></div><h2 id="模仿浏览器行为">模仿浏览器行为</h2><p>如果你已经写了足够多的网络爬虫代码，你将会注意到某些网站会根据浏览器或者请求方式返回不同的 HTML内容。 有时这是一种反抓取措施，但通常服务器会进行用户代理嗅探，以找出最适合设备的内容(例如桌面或移动设备)。
如果你想返回与浏览器显示的内容相同的内容，你可以使用 Firefox 或 Chrome 发送的内容覆盖默认的 User-Agent 头请求集。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"User-Agent"</span><span class="p">:</span><span class="s2">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0"</span><span class="p">})</span></code></pre></td></tr></table></div></div><hr/><p>参考：</p><ul><li><a href="https://hodovi.ch/blog/advanced-usage-python-requests-timeouts-retries-hooks/" rel="noopener noreffer" target="_blank">Advanced usage of Python requests - timeouts, retries, hooks</a></li></ul></description></item><item><title>Jupyter最佳实践</title><link/>https://justpic.org/post/2020/03/09/jupyter-best-practice/<pubdate>Mon, 09 Mar 2020 23:30:29 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/09/jupyter-best-practice/</guid><description><p>广受各大企业赞助的<a href="https://jupyter.org/about" rel="noopener noreffer" target="_blank">jupyter团队</a>
所开发的jupyter系列产品(主要包括jupyter notebook、jupyterlab和jupyterhub)，在数据科学领域变得越来越火热，依托python强大的语言生态，得益于其良好的扩展性和友好的用户交互，jupyter逐渐成为数据分析可视化的首选开源工具之一，下面将对数据分析实践过程中针对jupyter的调研分析进行小结.如果你正在使用python语言进行相关数据分析，本文所记录的jupyter相关实践可能对你会有所帮助。</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" onclick="_click_handler(this)" type="button" value="点击验证"/></div><div class="hugo-encryptor-cipher-text" style="display: none;">H+LJ0OExuMhwMkllHSMz+R7otx8cAgXPuZONswo/X9sqJRUa5wieJ20pi7ajp3kNNmjR1C+Y2KPueoJqY8+lGg8BZvOZkXMpT7tyQpAoovMV2qunM1As+b7z4Rmt2D3H</div></div><hr/><blockquote><p>本文将主要从jupyter产品介绍、产品（jupyter notebook、jupyter lab和jupyterhub）的安装试用、jupyter 扩展优化、以及jupyter竞品分析等四大方面对jupyter的实践进行一个简短的介绍和回顾：</p></blockquote><h2 id="jupyter产品介绍">jupyter产品介绍：</h2><p>根据jupyter官方网站，jupyter产品主要包括jupyter notebook、jupyter lab和jupyterhub三款产品，根据文章<code>jupyter notebook、jupyterlab与jupyterhub的区别与联系</code><sup id="fnref:1"><a class="footnote-ref" href="#fn:1" role="doc-noteref">1</a></sup>,三者的联系和区别如下：</p><ol><li>jupyter notebook提供了一个交互友好的类webIDE环境，但Jupyter Notebook 是传统的单体服务架构模式, 缺少多用户管理和访问认证等方面的功能, 无法直接部署于计算集群上, 难以充分利用和调度计算中心的计算资源 。</li><li>jupyter lab提供了单用户管理和认证，没有提供独立的工作空间，与jupyter notebook相比，功能更为丰富。</li><li>jupyter hub提供了多用户管理和认证，支持OAuth协议，为用户提供了独立的工作空间，工作内容可以私有不共享。</li></ol><p>在了解了jupyter系列产品后，就可以进行产品的安装和使用了。当然你也可以参考这些文章2<sup id="fnref:2"><a class="footnote-ref" href="#fn:2" role="doc-noteref">2</a></sup>和3<sup id="fnref:3"><a class="footnote-ref" href="#fn:3" role="doc-noteref">3</a></sup>、4<sup id="fnref:4"><a class="footnote-ref" href="#fn:4" role="doc-noteref">4</a></sup>、5<sup id="fnref:5"><a class="footnote-ref" href="#fn:5" role="doc-noteref">5</a></sup>来快速入门jupyter的使用.</p><h2 id="产品安装使用">产品安装使用</h2><h3 id="安装">安装</h3><blockquote><p>根据以上的产品介绍，可以根据自己的需求选择安装jupyter notebook、jupyter lab还是jupyterhub。具体参考建议如下：</p><ol><li>个人本地使用，安装快速方便–jupyter notebook</li><li>个人使用，可能会远程操作，需要额外的安装工作–jupyter lab</li><li>小型团队使用，可能需要额外的运维工作– jupyter hub</li></ol></blockquote><p><strong>安装jupyter notebook</strong><br/>
jupyter notebook目前已经包含在Anaconda安装包中，随Anaconda将一同安装，不需要额外的安装操作，如果你想了解更多jupyter notebook安装细节，可以参考文章<sup id="fnref:6"><a class="footnote-ref" href="#fn:6" role="doc-noteref">6</a></sup>和文章<sup id="fnref:7"><a class="footnote-ref" href="#fn:7" role="doc-noteref">7</a></sup>。</p><p><strong>安装jupyter lab</strong><br/>
jupyter lab可以通过pip，conda命令(Anaconda环境)作为jupyter notebook的扩展进行选装。
安装命令如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">pip install jupyterlab<span class="c1">#或者</span>
conda install -c conda-forge jupyterlab</code></pre></td></tr></table></div></div><p>使用过程中，jupyterlab的作用更像一个功能强大的webshell，除支持文件上传，命令行等操作外，能够更直观地管理jupyter notebook的其他扩展。</p><p><strong>安装jupyterhub</strong><br/>
jupyterhub的docker化安装步骤如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#step1.创建共享目录</span><span class="nv">$mkdir</span> -p<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/jupyterhub<span class="nv">$mkdir</span> -p<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/home<span class="c1">#step2.启动镜像</span><span class="c1">#docker run -p 8000:8000 -d --name jupyterhub -v /opt/jupyterhub/jupyterhub:/srv/jupyterhub -v /opt/jupyterhub/home:/home --restart=always jupyterhub/jupyterhub jupyterhub</span>
docker run -p 8000:8000 -d --name jupyterhub -v<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/jupyterhub:/srv/jupyterhub -v<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/home:/home jupyterhub/jupyterhub jupyterhub<span class="c1">#step3.进入到容器内操作</span>
docker<span class="nb">exec</span> -it jupyterhub bash
chmod -R<span class="m">777</span> /home<span class="c1">#step4.添加用户和设置密码</span>
useradd jupyterhub
passwd jupyterhub<span class="c1">#step5.浏览器访问测试</span>
http://<span class="o">{</span>yourip<span class="o">}</span>:8000
!替换yourip为本机ip地址</code></pre></td></tr></table></div></div><h3 id="使用">使用</h3><p><strong>启动jupyter</strong></p><ol><li>启动jupyter notebook<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">jupyter notebook<span class="c1"># 更多命令可额外输入--help进行查看</span></code></pre></td></tr></table></div></div></li><li>启动jupyter lab<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">jupyter lab<span class="c1"># 更多命令可额外输入--help进行查看</span></code></pre></td></tr></table></div></div></li></ol><p><strong>excel表格处理</strong><br/>
jupyternotebook中使用pandas可以方便的处理excel文件，简单的差集、并集、交集运算使用几句简单的代码即可完成。<br/><strong>数据可视化分析</strong><br/>
结合pandas工具包可以非常方便的进行数据的基础分析，使用plot工具包可以完成交互性比较友好的动态数据分析图表。</p><h2 id="jupyter扩展">jupyter扩展</h2><p>为了提升jupyter的使用体验，目前已经有非常多的jupyter扩展可供使用，其范围除了优化其本身可视化交互体验之外，还涵盖了排版、多语言支持等功能。<br/>
文章8<sup id="fnref:8"><a class="footnote-ref" href="#fn:8" role="doc-noteref">8</a></sup>介绍了常用的99种jupyter扩展，
文章9<sup id="fnref:9"><a class="footnote-ref" href="#fn:9" role="doc-noteref">9</a></sup>中所介绍的扩展主要围绕人工智能（AI）进行展开，
文章10<sup id="fnref:10"><a class="footnote-ref" href="#fn:10" role="doc-noteref">10</a></sup>介绍了提升jupyter使用环境体验的相关实践，
文章11<sup id="fnref:11"><a class="footnote-ref" href="#fn:11" role="doc-noteref">11</a></sup>介绍了扩展jupyter的99种方法，
文章12<sup id="fnref:12"><a class="footnote-ref" href="#fn:12" role="doc-noteref">12</a></sup>介绍了生成pages的方法，
文章13<sup id="fnref:13"><a class="footnote-ref" href="#fn:13" role="doc-noteref">13</a></sup>中通过低代码方式使用jupyter notebook，进一步降低了jupyter的难度、提高了jupyter的交互友好度。
文章14<sup id="fnref:14"><a class="footnote-ref" href="#fn:14" role="doc-noteref">14</a></sup>主要介绍了jupyter notebook的基础架构，如果需要进行进一步应用开发集成，对其基础架构了解是必须的。</p><p><strong>pyspark集成</strong><br/>
大数据相关技术的发展，jupyter支持与spark进行相关集成</p><h3 id="技术架构分析">技术架构分析</h3><p>jupyter 使用了较新的web技术（Websocket等）来保证用户交互的友好性，提供了一种混合的编辑方式, 将程序
代码运行、文字图表编辑等功能糅合在同一电子笔记中, 打破了两者之间的隔离界限.fastpage<sup id="fnref:12"><a class="footnote-ref" href="#fn:12" role="doc-noteref">12</a></sup>介绍了将jupyternotebook内容导出为page，可以直接应用于博客或者出版，进一步提高了jupyter的可扩展性。为了集成和二次开发jupyter，通过文章<code>技术架构分析</code><sup id="fnref:14"><a class="footnote-ref" href="#fn:14" role="doc-noteref">14</a></sup>中对jupyter的技术架构进行简单的了解，得出如下jupyter架构图，<br/><img alt="架构图" class="lazyload" data-sizes="auto" data-src="" data-srcset="/images/posts/jupyter-arch.jpg,  1.5x,  2x" src="/svg/loading.small.min.svg" title="架构图"/></p><h2 id="jupyter竞品分析">jupyter竞品分析</h2><p>通过搜索，Netflix发布的Polynote<sup id="fnref:15"><a class="footnote-ref" href="#fn:15" role="doc-noteref">15</a></sup>有可能成为jupyter的竞品，除此之外，阿里巴巴、kaggle以及大多数据竞赛平台也开始提供类似jupyter的数据分析平台以方便开发者快速使用。</p><p>如果你有更好的想法和建议，欢迎留言。</p><hr/><p><strong>参考</strong></p><section class="footnotes" role="doc-endnotes"><hr/><ol><li id="fn:1" role="doc-endnote"><p><a href="https://www.imooc.com/article/300868" rel="noopener noreffer" target="_blank">jupyter notebook、jupyterlab与jupyterhub的区别与联系</a><a class="footnote-backref" href="#fnref:1" role="doc-backlink">↩︎</a></p></li><li id="fn:2" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/O3vXXaqG9-E7mRT-_wARWw" rel="noopener noreffer" target="_blank">数据科学和机器学习，jupyternotebook入门指南</a><a class="footnote-backref" href="#fnref:2" role="doc-backlink">↩︎</a></p></li><li id="fn:3" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/aJRVh7BWOMq4KCoBMtLGGw" rel="noopener noreffer" target="_blank">快速学习jupyternotebook</a><a class="footnote-backref" href="#fnref:3" role="doc-backlink">↩︎</a></p></li><li id="fn:4" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/24B1TSmMPYphXI-0ij3fJQ" rel="noopener noreffer" target="_blank">jupyter notebook数据格式解析</a><a class="footnote-backref" href="#fnref:4" role="doc-backlink">↩︎</a></p></li><li id="fn:5" role="doc-endnote"><p><a href="https://justpic.org/post/latex-math-symbol/" rel="noopener noreffer" target="_blank">latex数学符号</a><a class="footnote-backref" href="#fnref:5" role="doc-backlink">↩︎</a></p></li><li id="fn:6" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/PJmVJ-pESb6bkLf9Nq-A1Q" rel="noopener noreffer" target="_blank">十分钟搭建你的jupyternotebook服务器</a><a class="footnote-backref" href="#fnref:6" role="doc-backlink">↩︎</a></p></li><li id="fn:7" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/1nTP7uLAJuOYW-WXVE_-cg" rel="noopener noreffer" target="_blank">使用jupyternotebook进行远程炼丹</a><a class="footnote-backref" href="#fnref:7" role="doc-backlink">↩︎</a></p></li><li id="fn:8" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/BSim0lMo0T0JiunnKqHzNg" rel="noopener noreffer" target="_blank">让jupyter更强大的99中武器</a><a class="footnote-backref" href="#fnref:8" role="doc-backlink">↩︎</a></p></li><li id="fn:9" role="doc-endnote"><p><a href="https://github.com/elyra-ai/elyra" rel="noopener noreffer" target="_blank">Elyra：基于AI技术的JupyterLab实用扩展集</a><a class="footnote-backref" href="#fnref:9" role="doc-backlink">↩︎</a></p></li><li id="fn:10" role="doc-endnote"><p><a href="https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Felevate-your-jupyter-notebook-environment-experience-9bdd1101aa54" rel="noopener noreffer" target="_blank">Elevate Your Jupyter Notebook Environment Experience</a><a class="footnote-backref" href="#fnref:10" role="doc-backlink">↩︎</a></p></li><li id="fn:11" role="doc-endnote"><p><a href="https://python.freelycode.com/contribution/detail/1632" rel="noopener noreffer" target="_blank">扩展Jupyter生态系统的99种方法</a><a class="footnote-backref" href="#fnref:11" role="doc-backlink">↩︎</a></p></li><li id="fn:12" role="doc-endnote"><p><a href="https://fastpages.fast.ai/fastpages/jupyter/2020/02/21/introducing-fastpages.html" rel="noopener noreffer" target="_blank">jupyter生成pages</a><a class="footnote-backref" href="#fnref:12" role="doc-backlink">↩︎</a></p></li><li id="fn:13" role="doc-endnote"><p><a href="https://github.com/herqooly/herqooly" rel="noopener noreffer" target="_blank">低代码方式使用jupyter</a><a class="footnote-backref" href="#fnref:13" role="doc-backlink">↩︎</a></p></li><li id="fn:14" role="doc-endnote"><p><a href="https://blog.just4fun.site/post/%E6%9E%B6%E6%9E%84/jupyter-notebook-architecture/" rel="noopener noreffer" target="_blank">jupyter notebook架构分析</a><a class="footnote-backref" href="#fnref:14" role="doc-backlink">↩︎</a></p></li><li id="fn:15" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/bwtENwhO7EFQqW5XJduJ-A" rel="noopener noreffer" target="_blank">还有比 Jupyter 更好用的工具</a><a class="footnote-backref" href="#fnref:15" role="doc-backlink">↩︎</a></p></li></ol></section></description></item><item><title>什么是好的软件工程原则</title><link/>https://justpic.org/post/2020/03/08/software-engineering-best-rules/<pubdate>Sun, 08 Mar 2020 15:23:56 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/08/software-engineering-best-rules/</guid><description><p>软件开发原则是一组具体的规则和建议，如果工程师想要编写工整、清晰和可维护的代码，那么他们需要在程序实现过程中应该遵循一些规则和建议。 没有魔杖可以把变量、类和函数的混合物变成完美的代码，但是有一些技巧和提示可以帮助工程师评判是否在做正确的事情。</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" onclick="_click_handler(this)" type="button" value="点击验证"/></div><div class="hugo-encryptor-cipher-text" style="display: none;">H+LJ0OExuMhwMkllHSMz+R7otx8cAgXPuZONswo/X9sqJRUa5wieJ20pi7ajp3kNNmjR1C+Y2KPueoJqY8+lGgUnE9FqQF+Q21GGQWAnz8o8rAlquwSmCwNssc9a05EKqzGC7ldGC6jbNfBzhRVedGAJR0e8fJ3mgYILQL//FPdOnFcmowMYnNxkLXXM0pKm989ydV6Y93BmPgqtdkHZK6Bf0dSMa6tRTcbQdbR5c2If+Tsb08D/UpwAcg7hI4rTE8Lf21ny0uCiAA1hhDqKM4q5HzY/RDjftAocvrUCAovyrX4w0N2rgEMjN+5iNX4KW9p4C4+xGtRjGu/MRaIV0SgC/1T6SnQt/CAtL7RT76AYXvdduTllZPKf+mP3UOgR7vuKPh2Boxc/tJ8845ar4KSIZaMgrqTyFl0oBdHpCsEIsaE+ZxLjrP9gTsWJUiEdEqFBxhS4G90nrPH3xzP9E90x+xjMAqI8KIMku+8Z667KylKpE8ClRR+A2DiLfRibdwyZPUkj9Tt0qDj6y6qc6k4/2URMV4fCrxmz3Mk3fQXqKA6fb6vGLb4GEiDaoE5zICMrOdNibqgYlN7mAUj/lQ==</div></div><blockquote><p>让我们来看看这些基本的建议。 下面的一些原则是特定于 python 的，但大多数不是。</p></blockquote><h2 id="量两次切一次measure-twice-and-cut-once">量两次，切一次(Measure twice and cut once)</h2><p>如果你只能从这篇文章中学到一个原则且最重要的一个，那么就是这个。 开发人员，架构师和经理人经常因为个人情绪、以及其他问题而难以集中注意力。 就工程师来说，这个原则意味着选择正确的解决方案，选择正确的方法来解决问题，选择正确的工具来解决问题，对建立的解决方案必须充满信心。 选择这里意味着投入一些思考，找到必要的资源，组建合适的团队，思考设计，思考方法，设定任务，控制结果，并为此承担责任。 这就是“活在当下”。 我认为我自己还没有准备好用正确的词汇来描述它。</p><h2 id="不要重复自己dont-repeat-yourself">不要重复自己(Don’t Repeat Yourself)</h2><p>这是一个相当简单但非常有用的原则，它说在不同的地方重复同样的事情是非常糟糕的。 首先，它涉及到进一步支持和修改代码的必要性。 如果某个代码片段在程序中的几个地方被复制，那么很有可能出现两种灾难性的情况:</p><ol><li>当对源代码进行哪怕是很小的改动时，您需要在几个地方更改相同的代码。 这需要额外的时间、精力和注意力，而这件事件通常也非常不容易。</li><li>第一项紧随第二项。 团队中的其他开发人员可能会意外地错过其中一个更改(只合并了控制系统中的分支) ，并将面对应用程序中随后出现的一系列错误。 这些 bug 可能会让您感到沮丧，因为您已经听说这样的 bug 似乎已经被修复了。</li></ol><p>在这方面，有一个建议ーー如果在清单中发现任何代码超过两次，则应以单独的方式来处置。 这是通用做法。 事实上，即使再次遇到重复的bug，您也应该考虑创建一个单独的方法。</p><h2 id="奥卡姆剃刀occams-razor">奥卡姆剃刀(Occam’s Razor)</h2><p>这是一个非常普遍的想法，它来自于哲学编程。 这个原则得名于奥克姆的英国修道士威廉。 这一原则表明: ”没有必要，不得增加实体”。 在工程学中，这一原则被解释为: 没有必要创建不必要的实体。 因此，首先考虑添加另一个方法 / 类 / 工具 / 流程等的好处不见得总是一个好主意。 毕竟，如果您添加了另一个方法 / 类 / 工具 / 流程等等，除了增加复杂性之外，您没有得到任何其他好处，那还有什么意义呢？</p><h2 id="保持足够简单keep-it-simple-stupid-">保持足够简单(Keep It Simple Stupid )</h2><p>这是一个与上面非常类似的原则，但它的含义略有不同。 这个原则要求代码必须尽可能简单，不能有复杂的结构，否则会使代码的调试和维护复杂化。 此外，对于另一个程序员来说，理解代码的逻辑将会更加困难，这反过来也将需要额外的时间和精力。 这就是为什么您应该始终尝试使用简单的构造来尽可能多地解决问题，而不需要使用大量的分支、深层嵌套和过度重载的类结构。 通过这样做，你将使自己和同事的生活更加轻松，因为复杂性会产生错误。 记住 Peter Hintiens 说过的话: “简单永远比功能好”。</p><h2 id="你不会需要它you-arent-gonna-need-it-">你不会需要它（You Aren’t Gonna Need It ）</h2><p>这是许多程序员都会遇到的问题。 从项目一开始就希望立即实现所有必要的(有时甚至是不必要的)功能。 也就是说，当开发人员从一开始就将所有可能的方法添加到类中并实现它们时，甚至可能在未来永远不会使用它们。 因此，根据这个建议，首先，只实现您需要的东西，然后，如果必要的话，再扩展相应功能。 这样，您就可以节省调试代码的工作量、时间以及精力，而实际上这些代码却并不需要。</p><h2 id="前期大设计big-design-up-front">前期大设计(Big Design Up Front)</h2><p>在开始开发功能之前，您应该首先考虑应用程序架构，并将整个系统设计为足够小的细节，然后才按照预定义的计划进行实现。 原则是有存在的权利的，但是最近，它受到了相当多的批评。 这首先与设计和制定过程中的方案陈旧有关。 在这方面，仍然有必要进行后续的修改。 但它也具有不可否认的优点，在正确的设计中，可以大大降低进一步调试和纠错的成本。 此外，这样的信息系统，作为一个规则，更简洁的架构是正确的。</p><h2 id="避免过早优化avoid-premature-optimization">避免过早优化(Avoid Premature Optimization)</h2><blockquote><p>“过早的优化是编程中所有问题(或者至少是大部分问题)的根源” – Donald Knuth</p></blockquote><p>优化是加快程序运行速度，降低系统资源消耗的一个非常正确和必要的过程。 但是每件事都有它自己的时机。 如果在开发的早期阶段进行优化，可能弊大于利。 首先，它与这样一个事实相关，即优化代码的开发需要更多的时间和精力用于开发和支持。 在这种情况下，您通常必须首先检查所选择的开发方法的正确性。 这就是为什么一开始使用一个简单但不是最优的方法更有利可图。 稍后，在估计这种方法会降低应用程序的工作速度时，可以使用一种更快或更少资源密集型的算法。 此外，只要你最初实现了最优的算法，需求就可能改变，代码就会变成垃圾。 因此，没有必要在过早的优化上浪费时间。</p><h2 id="最小惊奇原则principle-of-least-astonishment">最小惊奇原则(Principle Of Least Astonishment)</h2><p>这个原则意味着您的代码应该是直观和明显的，并且在检查代码时不会让其他开发人员感到惊讶。 例如，如果这个方法被称为“ making cookies” ，但是结果是得到了土豆，那么这段代码就是不好的(很明显)。 此外，如果无法避免副作用，应尽量避免副作用，并将副作用记录在案。</p><h2 id="solid">S.O.L.I.D.</h2><p>“SOLID”实际上是一组面向对象设计原则。 “ SOLID”中的每个字母代表一个原则，它们是:</p><ol><li><u>单一责任（Single responsibility）:</u><br/>
声明每个模块或类应该对软件提供的功能的一个部分负责，并且这个责任应该完全由类封装;</li><li><u>开闭原则（Open-closed):</u><br/>
声明软件实体(类、模块、功能等)应该对扩展开放，但对修改关闭;</li><li><u>李斯科夫替换(Liskov substitution)</u><br/>
声明继承的类应该补充而不是替换基类的行为;</li><li><u>界面隔离(Interface segregation)</u><br/>
声明任何客户端都不应该被迫依赖于它不使用的方法;</li><li><u>依赖反转(Dependency inversion)</u><br/>
程序员应该在接口层而不是在实现层工作</li></ol><p>当一起应用时，这些原则可以帮助开发人员创建易于维护和扩展的代码。</p><h2 id="demeter定律">Demeter定律</h2><p>该原则的基本思想是在类之间划分职责区域，并将逻辑封装在类、方法或结构中。 可以从这一原则中区分出若干建议:</p><ol><li>类或实体应该是独立的</li><li>你应该尝试减少不同类之间的连接数量(所谓的coupling 耦合)</li><li>关联的类必须在一个 module / package / 目录中(也称为cohesion 凝聚力.）</li></ol><p>遵循这些原则，应用程序变得更加灵活、易于理解和易于维护。</p><h2 id="总结">总结</h2><p>同胞们，让我们成为伟大的工程师吧！ 让我们考虑一下设计和构建健壮且实现良好的系统，而不是成长中的有机怪物。 列举的原则在本质上是高度相关和联系的。 当然，我没有创造它们，但是一个小小的提醒也不会伤害到我，至少我是健忘的。</p><hr/><h3 id="参考">参考：</h3><ul><li><a href="https://luminousmen.com/post/what-are-the-best-engineering-principles" rel="noopener noreffer" target="_blank">What Are The Best Software Engineering Principles?</a></li><li><a href="https://mp.weixin.qq.com/s/2EJrdmOt_Of-o2IrtK9wlQ" rel="noopener noreffer" target="_blank">工程效能提升</a></li><li><a href="https://dev.tasubo.com/2020/02/how-my-software-development-has-changed-in-the-last-10-year-part-2.html" rel="noopener noreffer" target="_blank">我的十年</a></li></ul></description></item><item><title>Markdown写作指南</title><link/>https://justpic.org/post/2020/03/04/markdown-writing-rules/<pubdate>Wed, 04 Mar 2020 22:18:02 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/04/markdown-writing-rules/</guid><description><p>Markdown是一种轻量级标记语言。你不需要关心标题多大字号，段前距多少，列表缩进几格，只要在纯文本前后增加一些标记符号（例如 # - * &gt;)，就能轻松写出工整精美的文章。与富文本编辑器（例如Word）是通过点击图形化的功能按钮来实现排版，而Markdown则是通过标记字符去赋予文字不同格式。易读易写（easy-to-read and easy-to-write),让任何与文字打交道的人专注于写作，不用操心排版，这一点类似vi编辑器功能。</p><p>本文主要从Markdown主要特点、入门语法、写作结构大纲、应用场景四个方面对Markdown写作指南进行详细介绍。</p><h2 id="markdown-主要特点">Markdown 主要特点</h2><p>Markdown主要有以下三大特点：<br/><strong>特点1. 格式统一</strong><br/>
同一份Word文档，在</p><ul><li>不同的设备：Windows、macOS、Android、iOS</li><li>不同的版本：旧版Word、新版Word</li><li>不同的软件：Microsoft Office、WPS
可能显示不一样的效果。而Markdown可以Write once,export everywhere。不管在电脑上，还是手机上，用Markdwon写出来的文章都能带来舒适、统一、美好的阅读体验。</li></ul><p><strong>特点2. 向外兼容</strong><br/>
可以导出PDF、Word、HTML、图片等格式分享给没有安装Markdown编辑器的人，强烈推荐使用pandoc工具进行markdown文档的转换。</p><p><strong>特点3. 直接支持html,css</strong><br/>
Markdown是直接支持在markdown文档中使用html和css语言的：</p><ul><li>语法：</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">&lt;a href="#jump_1"&gt;来个页内跳转&lt;/a&gt;，跳转到文未的：`&lt;a id="jump_1"&gt;我是页内跳转到的位置&lt;/a&gt;` ,对应：`id="jump_1"`
&lt;span style="color: #5bdaed; "&gt;先给点颜色你看看&lt;/span&gt;
&lt;span style="color: #AE87FA; "&gt;再给点颜色你看看&lt;/span&gt;
&lt;span style="font-size:1.3em;"&gt;试试改变字体大小&lt;/span&gt;
&lt;span style="font-size:1.3em;font-weight: bold;"&gt;改变字体大小，再来个粗体又如何？&lt;/span&gt;
&lt;p style="text-align:center"&gt;
试试内容居中
&lt;/p&gt;
&lt;p style="text-align:right"&gt;
那内容居右呢？
&lt;/p&gt;
&lt;p style="text-align:center;color:#1e819e;font-size:1.3em;font-weight: bold;"&gt;
来个综合的试试
&lt;br/&gt;
第二行
&lt;/p&gt;
***
&lt;a id="jump_1"&gt;我是页内跳转到的位置&lt;/a&gt;</code></pre></td></tr></table></div></div><ul><li><p>预览效果：<br/><a href="#jump_1">来个页内跳转</a>，跳转到文未的：<code>&lt;a id="jump_1"&gt;我是页内跳转到的位置&lt;/a&gt;</code> ,对应：<code>id="jump_1"</code><span style="color: #5bdaed; ">先给点颜色你看看</span><span style="color: #AE87FA; ">再给点颜色你看看</span><span style="font-size:1.3em;">试试改变字体大小</span><span style="font-size:1.3em;font-weight: bold;">改变字体大小，再来个粗体又如何？</span></p><p style="text-align:center">
试试内容居中</p><p style="text-align:right">
那内容居右呢？</p><p style="text-align:center;color:#1e819e;font-size:1.3em;font-weight: bold;">
来个综合的试试<br/>
第二行</p><hr/><p><a id="jump_1">我是页内跳转到的位置</a></p></li></ul><h2 id="markdown入门语法">Markdown入门语法</h2><p><strong>1.标题、列表、引用</strong></p><table><thead><tr><th>标记符号</th><th>标记结果</th></tr></thead><tbody><tr><td><code># + 空格 + 文本</code></td><td>一级标题</td></tr><tr><td><code>##+空格+文本</code></td><td>二级标题</td></tr><tr><td><code>###+空格+文本</code></td><td>三级标题</td></tr><tr><td><code>-+空格+文本</code></td><td>无序列表</td></tr><tr><td><code>1+.+空格+文本</code></td><td>有序列表</td></tr><tr><td><code>&gt;+空格+文本</code></td><td>引用</td></tr></tbody></table><ul><li><p>标题<br/>
支持6种大小的标题，分别对应<code>#</code>,<code>##</code>,<code>###</code>,<code>####</code>,<code>#####</code>,<code>######</code>，和样式文件中的<code>h1,...,h6</code>如：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="err">#####</span><span class="nx">H5</span><span class="err">######</span><span class="nx">H6</span><span class="err">####</span><span class="nx">行内代码</span></code></pre></td></tr></table></div></div></li><li><p>列表</p><ul><li>无序列表<br/>
建议使用-作为无须列表，型号*可能和加粗和斜体符号产生混淆，加号+不流行。</li><li>有序列表<br/>
语法一（手动排序）：<code>1+.+空格+文本</code><br/>
1. 斜月沉沉藏海雾，碣石潇湘无限路。
2. 不知乘月几人归，落月摇情满江树。
3. 春江潮水连海平，海上明月共潮生。<br/>
语法二（自动排序）<br/>
对于比较长的、可能会修改的列表（尤其是很长的嵌套列表），请使用<code>懒人编号法</code>。纵使有新的列表项<code>插队</code>,把序号弄乱了也没关系，Markdown编辑器自动会对序号进行纠错。<br/>
语法说明：<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">1. Foo.
1. Bar.
1. Foofoo.
1. Barbar.
1. Gargar
1. Baz.</code></pre></td></tr></table></div></div><p>预览效果：</p><ol><li>Foo.</li><li>Bar.<ol><li>Foofoo.</li><li>Barbar.</li><li>Gargar</li></ol></li><li>Baz.</li></ol></li><li>嵌套列表<br/>
缩进2~4个空格或一个Tab（推荐），可以嵌套列表<br/>
示例一<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">1. 不知乘月几人归，落月摇情满江树。
- 与君吟弄风月，端不负平生。
- 对秋深，离恨苦，数夜满庭风雨。
- 五月畬田收火米，三更津吏报潮鸡。
2. 人姝丽，粉香吹下，夜寒风细。
- 弓弦抱汉月，马足践胡尘。
- 寒月悲笳，万里西风瀚海沙。
- 东堂坐见山，云风相吹嘘。</code></pre></td></tr></table></div></div><p>预览效果：</p><ol><li>不知乘月几人归，落月摇情满江树。<ul><li>与君吟弄风月，端不负平生。</li><li>对秋深，离恨苦，数夜满庭风雨。</li><li>五月畬田收火米，三更津吏报潮鸡。</li></ul></li><li>人姝丽，粉香吹下，夜寒风细。<ul><li>弓弦抱汉月，马足践胡尘。</li><li>寒月悲笳，万里西风瀚海沙。</li><li>东堂坐见山，云风相吹嘘。</li></ul></li></ol></li></ul></li><li><p>引用
在每一行使用<code>&gt;</code>符号，包括换行的句子</p></li></ul><p><strong>2.特殊说明的文字</strong></p><table><thead><tr><th>标记符号</th><th>标记结果</th></tr></thead><tbody><tr><td><code>**+加粗+**</code></td><td><strong>加粗</strong></td></tr><tr><td><code>*+斜体+*</code></td><td><em>斜体</em></td></tr><tr><td><code>~~+删除线+~~</code></td><td><del>删除线</del></td></tr></tbody></table><p><strong>3.任务列表</strong><br/>
Markdown支持任务列表<br/>
语法：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">- [ ] 纯牛奶
- [x] 西瓜
- [ ] 鸡蛋
- [ ] 保鲜膜
- [ ] 猪肉</code></pre></td></tr></table></div></div><p>预览效果：</p><ul><li><input disabled="" type="checkbox"/> 纯牛奶</li><li><input checked="" disabled="" type="checkbox"/> 西瓜</li><li><input disabled="" type="checkbox"/> 鸡蛋</li><li><input disabled="" type="checkbox"/> 保鲜膜</li><li><input disabled="" type="checkbox"/> 猪肉</li></ul><p><strong>4.表格</strong></p><p>语法：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">|左对齐|居中对齐|右对齐|
|:---|:---:|----:|
|**加粗**|[插入连接]（https://)|5.7|
|`换行`&lt;br/&gt;下一行|![插入图片](ht图片上：//）|10.4|</code></pre></td></tr></table></div></div><p>预览效果：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left"><strong>加粗</strong></td><td align="center">[插入连接]（https://)</td><td align="right">5.7</td></tr><tr><td align="left"><code>换行</code><br/>下一行</td><td align="center">![插入图片](ht图片上：//）</td><td align="right">10.4</td></tr></tbody></table><p><strong>5.代码</strong></p><ul><li><p>行内代码</p><ul><li>用两个重音符`（backtick，在Tab键上方)包裹</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sb">`Markdown`</span><span class="nx">是一种轻量级标记语言</span></code></pre></td></tr></table></div></div><ul><li>预览<br/><code>Markdown</code>是一种轻量级标记语言</li><li>重音符前后空一格</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">-</span><span class="nx">推荐</span><span class="err">：</span><span class="nx">使用键盘快捷键</span><span class="sb">`Ctrl+D`</span><span class="nx">可以将当前网页保存为书签</span><span class="err">。</span><span class="o">-</span><span class="nx">反对</span><span class="err">：</span><span class="nx">使用键盘快捷键</span><span class="sb">`Ctrl+D`</span><span class="nx">可以将当前网页保存为书签</span><span class="err">。</span></code></pre></td></tr></table></div></div><pre><code>- 推荐：使用键盘快捷键 `Ctrl+D` 可以将当前网页保存为书签。
- 反对：使用键盘快捷键`Ctrl+D`可以将当前网页保存为书签。</code></pre></li><li><p>代码块<br/>
将三个重音符`置于代码块的首行和末行</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="nx">print</span><span class="s2">"Hello,python!"</span></code></pre></td></tr></table></div></div><p>注：markdown对代码块的语法是开始和结束行都要添加：```,其中 ` 为windows键盘左上角那个。<br/>
如果要精确指定语言（如：<code>java,cpp,css,xml,javascript,python,php,go,kotlin,lua,objectivec</code>等等）时，在头部直接指定，如：```javascript，如下：</p><pre><code> ```javascript
function showSnackbar() {
var $snackbar = $('#snackbar');
$snackbar.addClass('show');
setTimeout(() =&gt; {
$snackbar.removeClass('show');
}, 3000);
}
```</code></pre></li></ul><p><strong>6.强制换行</strong><br/>
在行末使用空格（两个以上）+换行(Enter)<br/>
预览效果：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="sb">`enticing`</span><span class="o">-</span><span class="nx">Her</span><span class="nx">neck</span><span class="nx">was</span><span class="kr">short</span><span class="nx">but</span><span class="nx">rounded</span><span class="nx">and</span><span class="nx">her</span><span class="nx">arms</span><span class="nx">plump</span><span class="nx">and</span><span class="nx">enticin</span><span class="nx">他的脖子短</span><span class="err">，</span><span class="nx">但浑圆可爱</span><span class="err">；</span><span class="nx">两臂丰腴</span><span class="err">，</span><span class="nx">也很动人</span><span class="err">。</span><span class="nx">by</span><span class="err">《</span><span class="nx">飘</span><span class="err">》</span><span class="o">-</span><span class="nx">This</span><span class="nx">was</span><span class="nx">enticing</span><span class="nx">to</span><span class="nx">Wozniak</span><span class="p">,</span><span class="nx">even</span><span class="nx">more</span><span class="nx">than</span><span class="nx">any</span><span class="nx">prospect</span><span class="k">of</span><span class="nx">getting</span><span class="nx">rich</span><span class="p">.</span><span class="nx">这句话对沃兹尼亚克的诱惑太大了</span><span class="err">，</span><span class="nx">比变成富人的诱惑还要大</span><span class="err">。</span><span class="nx">by</span><span class="err">《</span><span class="nx">乔布斯传</span><span class="err">》</span></code></pre></td></tr></table></div></div><p><strong>7.外链的超链接</strong>
试试外链的超链接：<a href="http://blog.qikqiak.com" rel="noopener noreffer" target="_blank">我是外链的超链接</a>
,markdown对链接的语法为：<code>\[\]()</code>,如：<code>\[我是外链的超链接\](http://blog.qikqiak.com)</code></p><p><strong>8.页内的超链接</strong>
试试页内的超链接：<a href="#jump_1" rel="noopener noreffer">我是页内的超链接</a>
，注：你先要在要跳转的到地方放置一个类似：<code>&lt;a id="jump_1"&gt;任意内容&lt;/a&gt;</code>的锚点。由<code>id="jump_1"</code>来匹配。</p><p><strong>9.分隔线</strong><br/>
语法：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="o">***</span></code></pre></td></tr></table></div></div><p>预览效果：</p><hr/><p><strong>10.符号说明</strong></p><p>Markdown针对特殊符号具有转义定义，具体解释如下表：</p><table><thead><tr><th align="right">符号</th><th align="right">说明</th><th>对应编码</th></tr></thead><tbody><tr><td align="right">&amp;</td><td align="right">AND 符号</td><td>&amp; amp;</td></tr><tr><td align="right">&lt;</td><td align="right">小于</td><td>&amp; lt;</td></tr><tr><td align="right"> </td><td align="right">空格</td><td>&amp; nbsp;</td></tr><tr><td align="right">¿</td><td align="right">倒问号</td><td>&amp; iquest;</td></tr><tr><td align="right">?</td><td align="right">问号</td><td>&amp; quest;</td></tr><tr><td align="right">«</td><td align="right">左书名号</td><td>&amp; laquo;</td></tr><tr><td align="right">»</td><td align="right">右书名号</td><td>&amp; raquo;</td></tr><tr><td align="right">“</td><td align="right">引号</td><td>&amp; quot;</td></tr><tr><td align="right">‘</td><td align="right">左单引号</td><td>&amp; lsquo;</td></tr><tr><td align="right">’</td><td align="right">右单引号</td><td>&amp; rsquo;</td></tr><tr><td align="right">“</td><td align="right">左双引号</td><td>&amp; ldquo;</td></tr><tr><td align="right">”</td><td align="right">右双引号</td><td>&amp; rdquo</td></tr><tr><td align="right">¶</td><td align="right">段落符号</td><td>&amp; para;</td></tr><tr><td align="right">§</td><td align="right">章节符</td><td>&amp; sect;</td></tr><tr><td align="right">×</td><td align="right">乘号</td><td>&amp; times;</td></tr><tr><td align="right">÷</td><td align="right">除号</td><td>&amp; divide;</td></tr><tr><td align="right">±</td><td align="right">加减号</td><td>&amp; plusmn;</td></tr><tr><td align="right">ƒ</td><td align="right">function</td><td>&amp; fnof;</td></tr><tr><td align="right">√</td><td align="right">根号</td><td>&amp; radic;</td></tr><tr><td align="right">∞</td><td align="right">无穷大</td><td>&amp; infin;</td></tr><tr><td align="right">°</td><td align="right">度</td><td>&amp; deg;</td></tr><tr><td align="right">≠</td><td align="right">不等号</td><td>&amp; ne;</td></tr><tr><td align="right">≡</td><td align="right">恒等于</td><td>&amp; equiv;</td></tr><tr><td align="right">≤</td><td align="right">小于等于</td><td>&amp; le;</td></tr><tr><td align="right">≥</td><td align="right">大于等于</td><td>&amp; ge;</td></tr><tr><td align="right">⊥</td><td align="right">垂直符号</td><td>&amp; perp;</td></tr><tr><td align="right">←</td><td align="right">左箭头</td><td>&amp; larr;</td></tr><tr><td align="right">→</td><td align="right">右箭头</td><td>&amp; rarr;</td></tr><tr><td align="right">↑</td><td align="right">上箭头</td><td>&amp; uarr;</td></tr><tr><td align="right">↓</td><td align="right">下箭头</td><td>&amp; darr;</td></tr><tr><td align="right">↔</td><td align="right">水平箭头</td><td>&amp; harr;</td></tr><tr><td align="right">↕</td><td align="right">竖直箭头</td><td>&amp; varr;</td></tr><tr><td align="right">⇐</td><td align="right">双线左箭头</td><td>&amp; lArr;</td></tr><tr><td align="right">⇒</td><td align="right">双线右箭头</td><td>&amp; rArr;</td></tr><tr><td align="right">⇑</td><td align="right">双线上箭头</td><td>&amp; uArr;</td></tr><tr><td align="right">⇓</td><td align="right">双线上箭头</td><td>&amp; dArr;</td></tr><tr><td align="right">⇔</td><td align="right">双线水平双箭头</td><td>&amp; hArr;</td></tr><tr><td align="right">⇕</td><td align="right">双线竖直箭头</td><td>&amp; vArr;</td></tr><tr><td align="right">♠</td><td align="right">黑桃</td><td>&amp; spades;</td></tr><tr><td align="right">♥</td><td align="right">红桃</td><td>&amp; hearts;</td></tr><tr><td align="right">♣</td><td align="right">梅花</td><td>&amp; clubs;</td></tr><tr><td align="right">♦</td><td align="right">方块</td><td>&amp; diams;</td></tr><tr><td align="right">©</td><td align="right">版权</td><td>&amp; copy;</td></tr><tr><td align="right">®</td><td align="right">注册商标</td><td>&amp; reg;</td></tr><tr><td align="right">™</td><td align="right">商标</td><td>&amp; trade;</td></tr><tr><td align="right">¥</td><td align="right">人民币</td><td>&amp; yen;</td></tr><tr><td align="right">€</td><td align="right">欧元</td><td>&amp; euro;</td></tr><tr><td align="right">¢</td><td align="right">美分</td><td>&amp; cent;</td></tr><tr><td align="right">£</td><td align="right">英磅</td><td>&amp; pound;</td></tr><tr><td align="right">⊕</td><td align="right"></td><td>&amp; oplus;</td></tr><tr><td align="right">½</td><td align="right">二分之一</td><td>&amp; frac12;</td></tr><tr><td align="right">¼</td><td align="right">四分之一</td><td>&amp; frac14;</td></tr><tr><td align="right">‰</td><td align="right">千分符号</td><td>&amp; permil;</td></tr><tr><td align="right">∴</td><td align="right">所以</td><td>&amp; there4;</td></tr><tr><td align="right">π</td><td align="right">圆周率</td><td>&amp; pi;</td></tr><tr><td align="right">¹</td><td align="right">上标1</td><td>&amp; sup1;</td></tr><tr><td align="right">α</td><td align="right">alpha</td><td>&amp; alpha;</td></tr><tr><td align="right">β</td><td align="right">beta</td><td>&amp; beta;</td></tr><tr><td align="right">γ</td><td align="right">gamma</td><td>&amp; gamma;</td></tr><tr><td align="right">δ</td><td align="right">delta</td><td>&amp; delta;</td></tr><tr><td align="right">θ</td><td align="right">theta</td><td>&amp; theta;</td></tr><tr><td align="right">λ</td><td align="right">lambda</td><td>&amp; lambda;</td></tr><tr><td align="right">σ</td><td align="right">sigma</td><td>&amp; sigma;</td></tr><tr><td align="right">τ</td><td align="right">tau</td><td>&amp; tau;</td></tr></tbody></table><h2 id="写作结构大纲">写作结构大纲</h2><p>一般按照如下结构参照Word文档结构进行markdown文档的大纲编写。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">### 标题
#### 层级
# 一级标题：文章的标题
## 二级标题：文章主要部分的大标题
### 三级标题：二级标题下面一级的小标题</code></pre></td></tr></table></div></div><ul><li>虽然Markdown最大支持######六级标题，为了保持层级的简单，防止出现过于复杂的章节，请谨慎使用四级标题（除非是长文章）。如果三级标题下有并列性的内容，可以使用加粗、有序列表或无序列表代表末级标题。</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">### 三级标题
**四级标题A**
- 论据1（五级标题）
- 细分论据 1(六级标题)
- 细分论据 2（六级标题)
- 细分论据 3(六级标题)
- 论据2
- 论据3
**四级标题B**
1. 论据
2. 论据
3. 论据
**四级标题C**
- 论据1
- 论据2
- 论据3
----
### 三级标题（适用于长文章）
#### 四级标题A
#### 四级标题B
#### 四级标题C</code></pre></td></tr></table></div></div><p><strong>文档标题拟定要点</strong></p><ul><li>标题要简短，结尾不带标点符号。</li><li>（源码上）标题前后空一行（段前距和段后距）。</li><li>大标题和小标题之间要有内容过度（引出或概括下文）。<br/>
示例：</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"># Title
开门见山地告诉读者这篇文章讲什么？
一级标题作为文章的（页面）标题（H），并且尽可能和文件名称保持一致。如果文章很长，使用[TOC]生成目录。
## what
先定义问题是什么?...
正文从二级标题开始
## Why
为什么会出现这样的问题?...
## How
下一步该怎么办?...
## See also
文末别忘了贴上参考连接。
* https://link-to-more-info</code></pre></td></tr></table></div></div><h2 id="markdown应用场景">Markdown应用场景</h2><blockquote><p>6大应用场景</p></blockquote><p><strong>1.公众号排版</strong></p><ul><li><a href="https://mdnice.com/" rel="noopener noreffer" target="_blank">Markdown Nice</a>
：让微信排版变 Nice，支持自定义主题 CSS。</li><li><a href="https://knb.im/mp/" rel="noopener noreffer" target="_blank">可能吧公众号 Style 一键转换器</a>
：老司机禅叔出品。</li><li><a href="https://justpic.org/md" rel="noopener noreffer" target="_blank">md</a>
:自用微信公众号排版</li></ul><p><strong>2.博客</strong></p><p><strong>3.知乎专栏</strong></p><p><strong>4.幻灯片</strong></p><p><strong>5.专业报告</strong></p><p><strong>6.笔记</strong></p><h2 id="markdown推荐编辑器">Markdown推荐编辑器</h2><table><thead><tr><th>操作系统</th><th>Markdown编辑器</th></tr></thead><tbody><tr><td>windows</td><td>typora</td></tr><tr><td>android</td><td>纯纯写作</td></tr><tr><td>macos/ios</td><td>Ulysses</td></tr></tbody></table><hr/><p><strong>参考</strong></p><ul><li><a href="https://sspai.com/post/36610" rel="noopener noreffer" target="_blank">Markdown 完全入门（上）</a></li><li><a href="https://sspai.com/post/36682" rel="noopener noreffer" target="_blank">Markdown 完全入门（下）</a></li><li><a href="https://www.wiz.cn/feature-markdown.html" rel="noopener noreffer" target="_blank">为知笔记 Markdown 新手指南</a></li><li><a href="https://sspai.com/tag/Markdown" rel="noopener noreffer" target="_blank">Markdown 合集 - 少数派</a></li><li><a href="https://www.jianshu.com/p/3beac9fd6496" rel="noopener noreffer" target="_blank">Google Markdown 书写风格指南</a></li><li><a href="https://github.com/google/styleguide/blob/gh-pages/docguide/style.md" rel="noopener noreffer" target="_blank">Markdown Style Guide by Google</a></li><li><a href="https://sspai.com/post/54912" rel="noopener noreffer" target="_blank">Typora 完全使用详解 - liquid617</a></li><li><a href="https://www.bmpi.dev/dev/what-markdown-can-do/" rel="noopener noreffer" target="_blank">用markdown可以做什么</a></li><li><a href="https://github.com/mixu/markdown-styles" rel="noopener noreffer" target="_blank">markdown styles</a></li><li><a href="https://developers.google.com/tech-writing/overview" rel="noopener noreffer" target="_blank">tech-writing-course</a></li><li><a href="https://kuang.netlify.com/blog/hugo.html" rel="noopener noreffer" target="_blank">hugo使用</a></li></ul><p><strong>关联阅读</strong></p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzA4MjM2NDE3MQ==&amp;mid=2247483680&amp;idx=1&amp;sn=0c20215b5db870ca8e02f2644921ee04&amp;chksm=9f879344a8f01a52abd237ba20d6a2c745185340a926e5087eb4150733799eaf152cd04638f6&amp;token=690110981&amp;lang=zh_CN#rd" rel="noopener noreffer" target="_blank">markdown写作指南 - justpic</a></li></ul></description></item><item><title>浅谈低代码开发</title><link/>https://justpic.org/post/2020/03/02/lowcode-thoughts/<pubdate>Mon, 02 Mar 2020 10:20:38 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/02/lowcode-thoughts/</guid><description><p>本文从低代码发展历史、 相关领域发展情况、以及具体的实现三个方面对低代码的前世今生进行探索。</p><h2 id="低代码发展历史">低代码发展历史</h2><blockquote><p>技术可能是一个革命自我的过程</p></blockquote><p>低代码开发平台的术语虽然2014年才被Forrester Research正式提出，但最早的产品雏形可追溯到2001年所建立的OutSystems中。</p><p><strong>低代码出现的时机和原因</strong></p><ol><li>软件定义概念的兴起（Software define anything）</li><li>高效协同工作的要求<br/>
减低信息化活动的技术门槛，让更多的人参与到信息化活动中来，屏蔽复杂的软件设计、编码、测试等比较专业的软件工程过程，使编程工作更好承接业务本身，敏捷精益化。</li><li>政策推动的需要</li><li>软件产品的迭代进化</li><li>技术自我革命</li></ol><p><strong>低代码市场发展情况</strong><br/>
根据2018年以来的投融资情况，低代码开发产品市场主要集中在<a href="" rel="noopener noreffer">OutSystems</a>
、<a href="" rel="noopener noreffer">Mendix</a>
、<a href="" rel="noopener noreffer">搭搭云</a>
、<a href="" rel="noopener noreffer">奥哲网络</a>
、<a href="" rel="noopener noreffer">轻流</a>
、<a href="" rel="noopener noreffer">magic</a>
、<a href="" rel="noopener noreffer">黑帕云</a>
、<a href="" rel="noopener noreffer">ClickPaas</a>
和<a href="" rel="noopener noreffer">数式科技</a>
，其中部分初创企业最高已获得亿级美元融资，成功跻身独角兽。</p><p><strong>低代码热度和趋势</strong></p><p>为了更直观地体会低代码的热度，运用百度指数、头条指数、Google Trends等工具查看低代码的热度和趋势。</p><ol><li><p>百度指数上对低代码的搜索情况如下：<br/><img alt="低代码" class="lazyload" data-sizes="auto" data-src="" data-srcset="https://cdn.jsdelivr.net/gh/justpic/jscdn/post/bdindex_lowcode.png,  1.5x,  2x" src="/svg/loading.small.min.svg" title="低代码"/><br/>
图中显示在今年3月份低代码一词热度最高，获得越来越多的关注。</p></li><li><p>Google Trends上对lowcode、DDD、DSL、BPM的搜索情况如图：<br/><img alt="google lowcode" class="lazyload" data-sizes="auto" data-src="" data-srcset="https://cdn.jsdelivr.net/gh/justpic/jscdn/post/gindex_lowcode.PNG,  1.5x,  2x" src="/svg/loading.small.min.svg" title="google lowcode"/><br/>
对于低代码（lowcode），google trends并没有显示其获得特别多的关注和热度，但其相关技术：cloud与DSL呈现强烈的负相关关系</p></li></ol><h2 id="相关领域发展情况">相关领域发展情况</h2><p>低代码概念作为高度集成的企业信息化解决方案和产品，其相关领域可大致分为OA协同办公、人工智能、中台技术、云开发四大部分。</p><ol><li>OA协同办公软件<ul><li>办公自动化（OA）软件发展历史可追溯到office办公软件，随着Web技术的发展，通过网络技术高度集成相关软件，提高了办公软件的自动化程度。</li><li>随着低代码技术的快速发展，OA协同办公软件将迎来重大升级，OA协同办公软件将集成业务建模和仿真这一特性，为业务信息化落地提速增效。</li></ul></li><li>人工智能<ul><li>人工智能的加持，快速为业务链赋能：人脸识别、自然语言技术作为末端替代人工操作进一步提高工作效率。</li><li>数据分析可以进一步分析流程相关时间序列相关数据，迭代优化相关业务。</li></ul></li><li>中台技术的发展<ul><li>中台技术提供更为灵活的API管理和应用。</li></ul></li><li>云开发环境。<ul><li>云原生技术的发展将灵活高效地承载低代码业务开发模式。</li></ul></li></ol><h2 id="具体实现">具体实现</h2><p>从低代码说开去,低代码、中台、RPA、人工智能这些概念词更像是为了迎合市场准备的营销素材，从技术实现角度，可能更为关注低代码实现的技术实现细节。<br/><strong>技术实现要点</strong><br/>
低代码的技术实现要点主要可以分为云原生、Devops、BPM、DSL、前端可视化等方面。</p><ol><li>云原生<ul><li>云原生为低代码提供基础的软件实施工具，软件云化不仅可以统一管理应用，也提高了基础资源的利用率。</li></ul></li><li>Devops<ul><li>Devops有效为低代码提供持续有效的软件产品构建流程，一方面是软件工程理论的实践，好的DevOps是一套有效运营流程规范。</li></ul></li><li>BPM<ul><li>BPM技术的发展与协同办公软件开发技术发展紧密，activiti、camunda、flowable技术作为开源工作流引擎可以作为业务建模的参考实现。</li><li>类BPM技术：数据分析/算法引擎</li></ul></li><li>DSL<ul><li>DSL不仅存在于后台开发技术，而且在前端技术领域也得到越来越多的应用，构建一个好的类型系统可以有效解决复杂业务建模。</li></ul></li><li>前端可视化<ul><li>前端可视化与用户交互紧密联系，友好的可视化交互操作对低代码的推广使用非常重要。</li></ul></li></ol><hr/><p><strong>参考</strong><br/>
DSL:</p><ul><li><a href="https://www.ituring.com.cn/book/miniarticle/4194" rel="noopener noreffer" target="_blank">选择DSL实现的方式</a></li><li><a href="https://medium.com/@dempfi/typescript-jsx-syntax-as-typed-dsl-97c052b825c8" rel="noopener noreffer" target="_blank">TypeScript JSX syntax as a typed DSL</a></li><li><a href="https://gist.github.com/ulve/26d6087bbab6d9a67c4b6f1a226807ed" rel="noopener noreffer" target="_blank">DSL.ts</a></li></ul><p>DDD:</p><ul><li><a href="https://github.com/madawei2699/ddd_parklot" rel="noopener noreffer" target="_blank">https://github.com/madawei2699/ddd_parklot</a></li></ul><p>低代码：</p><ul><li><a href="https://mp.weixin.qq.com/s/Y23pwX6JmYhME5u52FcLLQ" rel="noopener noreffer" target="_blank">探路中台、RPA、低代码引领企业级IT服务未来式</a></li><li><a href="https://github.com/phodal/lowcode.git" rel="noopener noreffer" target="_blank">https://github.com/phodal/lowcode.git</a></li><li><a href="https://zhuanlan.zhihu.com/p/88616149" rel="noopener noreffer" target="_blank">现代Web开发与未来</a></li><li><a href="https://github.com/phodal/cloud-dev" rel="noopener noreffer" target="_blank">云研发</a></li><li><a href="https://mp.weixin.qq.com/s/ytihMiH1LZ0gkjgKTE8RTA" rel="noopener noreffer" target="_blank">2020年边缘计算为什么会火</a></li><li><a href="https://mp.weixin.qq.com/s/Aq_uRdEbn7sZDSTifgiP9A" rel="noopener noreffer" target="_blank">麻省理工选出的全球十大突破性技术</a></li><li><a href="https://mp.weixin.qq.com/s/dQjViQ5N3hWApH40sfZAuA" rel="noopener noreffer" target="_blank">大中台模式下如何构建复杂业务核心状态机组件</a></li><li><a href="https://zhuanlan.zhihu.com/p/96046788" rel="noopener noreffer" target="_blank">深入typescript类型系统（二）：泛型和类型元编程</a></li><li><a href="https://blog.frankel.ch/builder-pattern-finite-state-machine/" rel="noopener noreffer" target="_blank">builder模式是一个有限状态机</a></li></ul><p>CI/CD:</p><ul><li><a href="https://www.stackbit.com/" rel="noopener noreffer" target="_blank">https://www.stackbit.com/</a></li><li><a href="https://wakatime.com/plugins/status?onboarding=true" rel="noopener noreffer" target="_blank">wakatime</a></li></ul></description></item><item><title>APIJSON实践</title><link/>https://justpic.org/post/2019/10/27/apijson-exercise/<pubdate>Sun, 27 Oct 2019 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2019/10/27/apijson-exercise/</guid><description><p>APIJSON实践</p><h2 id="获取特定对象">获取特定对象</h2><h3 id="指定数据库服务器和schema进行查询">指定数据库服务器和schema进行查询：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"Test":{"ID_":5},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><h3 id="获取列表">获取列表：</h3><p><a href="http://localhost:8088/get/%7b%22[]%22:%7b%22count%22:100,%22Test%22:%7b%22@column%22:%22USER_ID,TM_ID%22%7d%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">返回特定字段</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"@column":"USER_ID,TM_ID"}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p><a href="http://localhost:8088/get/%7b%22[]%22:%7b%22count%22:100,%22Test%22:%7b%22@column%22:%22%22%7d%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">返回全部字段列表</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"@column":""}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p><a href="http://localhost:8088/get/%7b%22[]%22:%7b%22count%22:100,%22page%22:0,%22Test%22:%7b%22@column%22:%22%22%7d%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">分页</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"page":0,"Test":{"@column":""}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p><a href="http://localhost:8088/get/%7b%22Test%22:%7b%22ID_%22:5%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">特定字段条件查询</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"Test":{"ID_":5},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>​<br/><a href="http://localhost:8088/get/%7b%22Test%22:%7b%22END_TIME%25%22:%222018,2019%22%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">连续范围</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"Test":{"END_TIME%":"2018,2019"},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>！以上链接直接浏览器请求出错</p><p><a href="http://localhost:8088/get/%7b%22[]%22:%7b%22count%22:100,%22Test%22:%7b%22END_TIME%7b%7d%22:%22%3c=2019,%3e=2018%22%7d%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">时间范围</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"END_TIME{}":"&lt;=2019,&gt;=2018"}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p><a href="http://localhost:8088/get/%7b%22[]%22:%7b%22count%22:100,%22Test%22:%7b%22END_TIME$%22:%22%2019%25%22%7d%7d,%22@schema%22:%22sxb%22,%22@database%22:%22MYSQL%22%7d" rel="noopener noreffer" target="_blank">模糊匹配</a></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">http://localhost:8088/get/{"[]":{"count":100,"Test":{"END_TIME$":"%2019%"}},"@schema":"sxb","@database":"MYSQL"}</code></pre></td></tr></table></div></div><p>详细的功能符号介绍：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">"key[]":{} // 查询数组
"key{}":[1,2,3] // 匹配选项范围
"key{}":"&lt;=10;length(key)&gt;1..." // 匹配条件范围
"key()":"function(arg0,arg1...)" // 远程调用函数
"key@":"key0/key1.../targetKey" // 引用赋值
"key$":"%abc%" // 模糊搜索
"key~":"^[0-9]+$" // 正则匹配
"key%":"2018-01-01,2018-10-01" // 连续范围
"key+":[1] // 增加/扩展
"key-":888.88 // 减少/去除
"name:alias" // 新建别名
"@combine":"name~,tag~" // 条件组合
"@column":"id,sex,name" // 返回字段
"@group":"userId" // 分组方式
"@having":"max(id)&gt;=100" // 聚合函数
"@order":"date-,name+" // 排序方式
"@schema":"sys" // 集合空间
"@database":"POSTGRESQL" // 跨数据库
"@explain":true // 性能分析
"@role":"LOGIN" // 访问角色</code></pre></td></tr></table></div></div><p>详细功能符说明可见<a href="https://github.com/TommyLemon/APIJSON/blob/master/Document.md#3.2" rel="noopener noreffer" target="_blank">通用文档</a></p></description></item><item><title>路由转发和反向代理的应用</title><link/>https://justpic.org/post/2019/10/15/%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/<pubdate>Tue, 15 Oct 2019 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2019/10/15/%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description><p>路由转发和反向代理的应用</p><h3 id="简单实践">简单实践</h3><h4 id="1-路由转发">1. 路由转发：</h4><p>工业互联网环境下，很多上位机是双网卡或者多网卡，上位机通常处于多重网络环境下，就上位机本身而言，可以与这些网络进行通信，再缺少网络路由器的直接配置情况下，各个网络之间是不能直接进行通信的，极端网络环境下，直接使用PC网卡进行路由转发是可以快速解决跨网设备通信的，一般来说，路由转发是从IP层协议解决网络连通性问题，与一般的反向代理处于传输层的解决方案相比，能够更好的支持网络应用，但同时也增加了网络的路由跃点数，会对工业软件的认证授权产生影响。</p><p>下面主要从一个上位机多重网络联通性测试说明两个局域网环境下的路由转发应用：</p><p>假设局域网1中的PC1的IP地址为：172.11.100.25，对应的网卡编号为11，局域网2中的PC3的IP地址为:172.12.25.141，对应的网卡编号为15.上位机连接着局域网1和局域网2，对应的网络IP地址分别为172.11.100.249和172.12.25.130，对应的网卡编号分别为11和13。为了实现PC1和PC2互通（即相互可以ping通），需要做如下三步操作：</p><h4 id="2-配置pc1">2. 配置PC1</h4><p>PC1下cmd进入命令行，route print -4 查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.12.25.0 mask 255.255.255.0 172.11.100.249 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="3-配置pc2">3. 配置PC2</h4><p>PC2下注意，需要设置一个网卡的网关地址为空，然后进入到注册表下修改IPEnableRouter的值为1,IPEnableRouter的具体注册表路径为 “计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters”</p><p>!注意：IPEnableRouter修改后需要重启电脑才能生效。</p><h4 id="4-配置pc3">4. 配置PC3</h4><p>PC3下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.11.100.0 mask 255.255.255.0 172.12.25.130 metric<span class="m">8</span><span class="k">if</span><span class="m">15</span></code></pre></td></tr></table></div></div><p>至此，相关路由转发配置基本结束，PC1和PC3是可以相互ping通的。</p><blockquote><p>想象一下，如果要打通多个上位机的局域网，需要怎样做？</p></blockquote><h3 id="多个上位机网络通信">多个上位机网络通信</h3><p>下面主要从两个上位机的多重网络连通性测试说明三个局域网环境下的路由转发应用：</p><p>在上面的网络情景下，增加局域网3，局域网3下的PC5的IP地址为：192.168.0.201，对应的网卡编号为11，上位机PC4连接着局域网2和局域网3，对应的IP地址分别为172.12.15.142和192.168.0.202，对应的网卡编号分别为11和13，为了打通PC5和PC1的网络，需要做如下五步操作：</p><h4 id="1-配置pc1">1. 配置PC1</h4><p>PC1下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 192.168.0.0 mask 255.255.255.0 172.11.100.249 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="2-配置pc2">2. 配置PC2</h4><p>PC2下cmd进入命令行，route print -4查看当前路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 192.168.0.0 mask 255.255.255.0 172.12.15.142 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="3-配置pc4">3. 配置PC4</h4><p>PC4下注意，需要设置一个网卡的网关地址为空，然后进入到注册表下修改IPEnableRouter的值1，,IPEnableRouter的具体注册表路径为 “计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters”</p><p>！注意：IPEnableRouter修改后需要重启电脑才能生效。</p><h4 id="4-配置pc5">4. 配置PC5</h4><p>PC5下cmd进入命令行，route print -4查看路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.11.100.0 mask 255.255.255.0 192.168.0.202 metric<span class="m">8</span><span class="k">if</span><span class="m">11</span></code></pre></td></tr></table></div></div><h4 id="5-查看pc4路由并配置">5. 查看PC4路由并配置</h4><p>PC4下cmd进入命令行，route print -4查看路由，添加以下路由信息：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">route add 172.11.100.0 mask 255.255.255.0 172.12.15.142<span class="k">if</span><span class="m">11</span>
route add 192.168.0.0 mask 255.255.255.0 192.168.0.202 metric<span class="m">8</span><span class="k">if</span><span class="m">13</span></code></pre></td></tr></table></div></div><p>至此，相关路由转发配置基本结束，PC1和PC5是可以相互ping通的。
会了三个局域网的路由转发，多个局域网的路由转发以此类推，就可以实现异构网络间的互通。</p><h3 id="反向代理">反向代理：</h3><p>反向代理的应用非常广泛，包括网站负载均衡、内网穿透、高可用等等。由于反向代理一般都软件化了，这里就不做过多介绍，可以推荐使用frp作为反向代理，支持tcp、udp等多种协议。
当然windows自带的netsh interface portproxy也是一个不错的选择，但是只支持tcp协议。</p><p>参考文章：</p><p><a href="https://www.cnblogs.com/Bonker/p/4849295.html?from=singlemessage" rel="noopener noreffer" target="_blank">Win7中的路由转发配置实验</a></p></description></item><item><title>tornado异步网络编程实践</title><link/>https://justpic.org/post/2016/09/08/tornado-async-web/<pubdate>Thu, 08 Sep 2016 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2016/09/08/tornado-async-web/</guid><description><p>tornado异步网络编程实践</p><p><strong>异步tornado请求</strong><br/>
底层建立socket通讯，服务器采用epoll方案，即时返回请求，轮询到后台任务结束时，通过socket发送数据到客户端。<br/>
理解异步过程：
http请求断了，tcp层面上的socket连接还在保持，客户端通过再次发送http请求，可以得到后台处理的结果，long pooling技术，socket套接字主要由ip地址、tcp/ip协议和端口号决定，利用epoll的套接字复用技术，能够保证任务请求能够发送到正确的客户端上，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
listen 80;
server_name yourdomain.tld;
location / {
try_files $uri @tornado;
}
location @tornado {
proxy_pass http://localhost:8888;
}
}
user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><hr/><p>参考</p><ul><li><a href="http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html" rel="noopener noreffer" target="_blank">http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html</a></li><li><a href="http://zqdevres.qiniucdn.com/data/20100927213110/index.html" rel="noopener noreffer" target="_blank">http://zqdevres.qiniucdn.com/data/20100927213110/index.html</a></li><li><a href="http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/" rel="noopener noreffer" target="_blank">http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</a></li><li><a href="http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado" rel="noopener noreffer" target="_blank">http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado</a></li><li><a href="http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/" rel="noopener noreffer" target="_blank">http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/</a></li><li><a href="http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/" rel="noopener noreffer" target="_blank">http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/</a></li></ul></description></item><item><title>windows系统使用python环境</title><link/>https://justpic.org/post/2015/03/14/windows%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8python%E7%8E%AF%E5%A2%83/<pubdate>Sat, 14 Mar 2015 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2015/03/14/windows%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8python%E7%8E%AF%E5%A2%83/</guid><description><p>windows系统使用python环境</p><h3 id="windows-64安装libxml2dom小记">windows 64安装libxml2dom小记</h3><h4 id="用于解决no-module-named-libxmlmods等错误">用于解决no module named libxmlmods等错误</h4><blockquote><p>此<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noopener noreffer" target="_blank">网站</a>
上面有编译好了的各种python windows包.</p></blockquote><p>我们首先下载<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/z94jfosk/libxml2_python-2.9.2-cp27-none-win_amd64.whl" rel="noopener noreffer" target="_blank">libxml2-python</a><br/>
然后使用pip wheel安装：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">pip wheeel libxml2_python-2.9.2-cp27-none-win_amd64.whl
pip install --use-wheel --no-index --find-links=wheelhouse libxml2-python
easy_install libxml2dom</code></pre></td></tr></table></div></div><p>至此安装libxml2dom完毕</p><h3 id="windows-64安装pycurl小记">windows 64安装pycurl小记</h3><p>首先下载<a href="http://curl.haxx.se/gknw.net/7.40.0/dist-w64/curl-7.40.0-devel-mingw64.7z" rel="noopener noreffer" target="_blank">curl 64bit mingw</a><br/>
然后git clone<a href="https://github.com/pycurl/pycurl.git">https://github.com/pycurl/pycurl.git</a>，进入到pycurl目录，修改setup.py<br/>
CURL_DIR=$CURL_PATH
编译，安装，完毕。
以上方法还是没有安装成功，还是使用上面网站里的编译好的安装包进行安装，下载<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/z94jfosk/pycurl-7.19.5.1-cp27-none-win_amd64.whl" rel="noopener noreffer" target="_blank">pycurl-7.19.5.1-cp27-none-win_amd64.whl</a><br/>
使用以下命令进行安装：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> pip wheel pycurl-7.19.5.1-cp27-none-win_amd64.whl
pip install --</code></pre></td></tr></table></div></div><h3 id="windows上的python环境搭建">windows上的python环境搭建：</h3><p>安装Anaconda。</p></description></item><item><title>RHadoop环境搭建</title><link/>https://justpic.org/post/2014/11/28/rhadoop-installation/<pubdate>Fri, 28 Nov 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/11/28/rhadoop-installation/</guid><description><p>RHadoop环境搭建</p><h2 id="rhadoop环境搭建">Rhadoop环境搭建</h2><p>在集成R和hadoop之前需要将hadoop以及R运行环境安装好,hadoop的安装可参见<a href="https://justpic.org/2014/11/22/ubuntu-install-hadoop/" rel="noopener noreffer" target="_blank">hadoop2.4.1安装笔记</a>
.</p><h3 id="1下载相关安装包">1.下载相关安装包:</h3><pre><code>```shell script
$wget https://raw.githubusercontent.com/RevolutionAnalytics/rhdfs/master/build/rhdfs_1.0.8.tar.gz
$wget https://raw.githubusercontent.com/RevolutionAnalytics/rmr2/3.1.0/build/rmr2_3.1.0.tar.gz
$wget https://raw.githubusercontent.com/RevolutionAnalytics/rhbase/master/build/rhbase_1.2.0.tar.gz
```</code></pre><h3 id="2-安装r包">2. 安装R包:</h3><pre><code>```shell script
$R
&gt;install.packages(c("rJava", "Rcpp", "RJSONIO", "bitops", "digest", "functional", "stringr", "plyr", "reshape2", "caTools"))
&gt;install.packages(pkgs="rhdfs_1.0.8.tar.gz")
&gt;install.packages(pkgs="rmr2_3.1.0.tar.gz")
```</code></pre><h3 id="3-启动hadoop后测试安装是否成功">3. 启动hadoop后测试安装是否成功</h3><pre><code>```R
&gt;library(rhdfs)
&gt;hdfs.init()
&gt;hdfs.ls("/")
&gt;library(rmr2)
&gt;from.dfs(to.dfs(1:100))
&gt;from.dfs(mapreduce(to.dfs(1:100)))
```</code></pre><h3 id="4-eclipse上搭建r开发环境">4. eclipse上搭建R开发环境</h3><p>eclipse上通过StatET来开发R程序,可以通过安装StatET直接在eclipse上建立R项目并执行R语言程序.
R与Java语言的交互是通过JRI来完成的,需要在eclipse中安装RJava Eclipse Plugin和加载jri包来完成.jri的包的位置在rjava包的安装目录下面</p><h3 id="5-eclipse上搭建hadoop开发环境">5. eclipse上搭建hadoop开发环境</h3><p>安装hadoop eclipse插件来开发hadoop环境下的mapreduce程序:<br/>
具体插件安装方式可以参见<a href="https://github.com/winghc/hadoop2x-eclipse-plugin.git" rel="noopener noreffer" target="_blank">hadoop2x-eclipse-plugin</a></p><h3 id="6-eclipse上wtp插件的安装">6. eclipse上WTP插件的安装</h3><p>WTP方便在eclipse上开发J2EE程序,可以通过添加源地址方便的安装:<br/>
源地址的一般格式为http://download.eclipse.org/webtools/repository/kepler<br/>
Spark结合R语言开发…</p><hr/><p><strong>参考</strong></p><ul><li><a href="http://www.cnblogs.com/honglvlan/p/3732769.html" rel="noopener noreffer" target="_blank">Install RHadoop with Hadoopn 2.2</a></li><li><a href="https://github.com/RevolutionAnalytics/RHadoop/wiki/Downloads" rel="noopener noreffer" target="_blank">RHadoop wiki</a></li><li><a href="https://www.evernote.com/shard/s185/sh/744fa0fe-495d-4406-b546-99ed9a71458f/d32c1e6d1ef2796a2515ad408d28241f" rel="noopener noreffer" target="_blank">eclipse安装StatET</a></li><li><a href="http://www.distream.org/?p=447" rel="noopener noreffer" target="_blank">JRI的问题</a></li><li><a href="http://dirk.eddelbuettel.com/papers/useR2010hpcTutorialHandout.pdf" rel="noopener noreffer" target="_blank">R语言学习资料</a></li><li><a href="http://mp.weixin.qq.com/s?__biz=MzA3MTI0NTUyMQ==&amp;mid=200139451&amp;idx=1&amp;sn=8a1188528cf06cf5ec46736eb1a0f588&amp;scene=2&amp;from=timeline&amp;isappinstalled=0#rd" rel="noopener noreffer" target="_blank">combine Hadoop with R</a></li></ul></description></item><item><title>latex数学符号</title><link/>https://justpic.org/post/2014/09/10/latex-math-symbol/<pubdate>Wed, 10 Sep 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/09/10/latex-math-symbol/</guid><description><p>latex数学符号</p><h2 id="latex数学符号">latex数学符号</h2><h3 id="数学模式重音符">数学模式重音符</h3><p>\(\hat{a}\) \(\check{a}\) \check{a} \(\tilde{a}\) \tilde{a} \(\acute{a}\) \acute{a}<br/>
\(\grave{a}\) \grave{a} \(\dot{a}\) \dot{a} \(\ddot{a}\) \ddot{a} \(\breve{a}\) \breve{a}<br/>
\(\bar{a}\) \bar{a} \(\vec{a}\) \vec{a} \(\widehat{A}\) \widehat{A} \(\widetilde{A}\) \widetilde{A}</p><h3 id="小写希腊字母表">小写希腊字母表</h3><p>\(\alpha\) \alpha \(\theta\) \theta \(o\) o \(\upsilon\) \upsilon<br/>
\(\beta\) \beta \(\vartheta\) \vartheta \(\pi\) \pi \(\phi\) \phi
\(\gamma\) \gamma \(\iota\) \iota \(\varpi\) \varpi \(\varphi\) \varphi<br/>
\(\delta\) \delta \(\kappa\) \kappa \(\rho\) \rho \(\chi\) \chi
\(\epsilon\) \epsilon \(\lambda\) \lambda \(\varrho\) \varrho \(\psi\) \psi<br/>
\(\varepsilon\) \varepsilon \(\mu\) \mu \(\sigma\) \sigma \(\omega\) \omega<br/>
\(\zeta\) \zeta \(\nu\) \nu \(\varsigma\) \varsigma \(\eta\) \eta
\(\xi\) \xi \(\tau\) \tau</p><h3 id="大写希腊字母">大写希腊字母</h3><p>\(\Gamma\) \Gamma \(\Lambda\) \Lambda \(\Sigma\) \Sigma \(\Psi\) \Psi
\(\Delta\) \Delta \(\Xi\) \Xi \(\Upsilon\) \Upsilon \(\Omega\) \Omega<br/>
\(\Theta\) \Theta \(\Pi\) \Pi \(\Phi\) \Phi</p><h3 id="二元关系符">二元关系符</h3><p>\(&lt;\) &lt; \(&gt;\) &gt; \(=\) =<br/>
\(\leq or \le\) \leq or \le<br/>
\(\geq or \ge\) \geq or \g
\(\equiv\) \equiv
\(\ll\) \ll<br/>
\(\gg\) \gg<br/>
\(\doteq\) \doteq<br/>
\(\prec\) \prec<br/>
\(\succ\) \succ<br/>
\(\sim\) \sim
\(\preceq\) \preceq<br/>
\(\succeq\) \succeq<br/>
\(\simeq\) \simeq<br/>
\(\subset\) \subset<br/>
\(\supset\) \supset<br/>
\(\approx\) \approx<br/>
\(\subseteq\) \subseteq<br/>
\(\supseteq\) \supseteq<br/>
\(\cong\) \cong<br/>
\(\sqsubset\) \sqsubset
\(\sqsupset\) \sqsupset<br/>
\(\Join\) \Join<br/>
\(\in\) \in<br/>
\(\ni\) \ni,\owns<br/>
\(\propto\) \propto<br/>
\(\vdash\) \vdash<br/>
\(\dashv\) \dashv<br/>
\(\models\) \models
\(\mid\) \mid<br/>
\(\parallel\) \parallel<br/>
\(\perp\) \perp<br/>
\(\smile\) \smile<br/>
\(\frown\) \frown<br/>
\(\asymp\) \asymp<br/>
\(:\) :<br/>
\(\notin\) \notin<br/>
\(\neq\) \neq or \ne</p><h3 id="二元运算符号">二元运算符号</h3><p>\(+\) + \(-\) - \(\triangleleft\) \triangleleft<br/>
\(\pm\) \pm \(\mp\) \mp \(\triangleright\) \triangleright<br/>
\(\cdot\) \cdot \(\div\) \div<br/>
\(\times\) \times \(\setminus\) \setminus \(\star\) \star<br/>
\(\cup\) \cup \(\cap\) \cap \(\ast\) \ast<br/>
\(\sqcup\) \sqcup \(\circ\) \circ<br/>
\(\vee\) \vee,\lor \(\wedge\) \wedge,\land \(\bullet\) \bullet<br/>
\(\oplus\) \oplus \(\ominus\) \ominus \(\diamond\) \diamond<br/>
\(\odot\) \odot \(\oslash\) \oslash \(\uplus\) \uplus<br/>
\(\otimes\) \otimes \(\bigcirc\) \bigcirc \(\amalg\)<br/>
\(\bigtriangleup\) \(\bigtriangledown\) \(\dagger\) \dagger<br/>
\(\lhd\) \lhd \(\rhd\) \rhd \(\ddagger\) \ddagger<br/>
\(\unlhd\) \unlhd \(\unrhd\) \unrhd \(\wr\) \wr</p><h3 id="大尺寸运算符">大尺寸运算符</h3><p>\(\sum\) \sum \(\bigcup\) \bigcup \(\bigvee\) \bigvee \(\bigoplus\) \bigoplus<br/>
\(\prod\) \prod \(\bigcap\) \bigcap \(\bigwedge\) \bigwedge \(\bigotimes\) \bigotimes
\(\coprod\) \coprod \(\bigsqcup\) \bigsqcup \(\bigodot\) \bigodot \(\int\) \int
\(\oint\) \oint \(\biguplus\) \biguplus</p><h3 id="箭头">箭头</h3><p>\(\leftarrow\) \leftarrow or \gets \(\longleftarrow\) \longleftarrow<br/>
\(\uparrow\) \uparrow \(\rightarrow\) \rightarrow or \to<br/>
\(\longrightarrow\) \longrightarrow \(\downarrow\) \downarrow<br/>
\(\leftrightarrow\) \leftrightarrow \(\longleftrightarrow\) \longleftrightarrow</p><hr/><p>参考<br/><a href="http://math.ecnu.edu.cn/~latex/docs/others/mathsymb.pdf" rel="noopener noreffer" target="_blank">mathsymb.pdf</a><br/><a href="http://mohu.org/info/symbols/symbols.htm" rel="noopener noreffer" target="_blank">常用数学符号的LaTex表示方法</a></p></description></item><item><title>ubuntu 14.04 安装 haskell</title><link/>https://justpic.org/post/2014/09/06/ubuntu-14.04-%E5%AE%89%E8%A3%85-haskell/<pubdate>Sat, 06 Sep 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/09/06/ubuntu-14.04-%E5%AE%89%E8%A3%85-haskell/</guid><description><p>ubuntu 14.04 安装 haskell</p><blockquote><p>haskell是一种函数编程式语言，ghc是Glasgow Haskell Compiler的简称，也是Haskell Platform的基础. 下面是安装ghc的步骤：</p></blockquote><ol><li>下载源码并编译<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span><span class="lnt">9</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo aptitude build-dep ghc
sudo aptitude install git autoconf automake libtool make ncurses-dev g++ llvm gpaco
wget https://www.haskell.org/ghc/dist/7.8.3/ghc-7.8.3-src.tar.bz2
tar jxvf ghc-7.8.3-src.tar.bz2
cd ghc-7.8.3-src
./configure --prefix=/usr/local/ghc
make -j8
sudo paco -D make install
sudo aptitude purge ghc</code></pre></td></tr></table></div></div></li><li>编辑.bashrc文件<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">PATH="/usr/local/ghc/bin:$PATH"
source ~/.bashrc
ghci #验证是否安装成功
sudo aptitude purge ghc</code></pre></td></tr></table></div></div></li></ol><blockquote><p>Cabal是Haskell的一个package，提供Haskell包安装框架，类似python的easy_install、debian的apt-get等。
cabal-install是另一个Haskell包安装库，提供了cabal命令行程序，该程序在安装新包时会自动解决包依赖关系。
安装了cabal-install就可以了，因为cabal-install依赖与cabal，安装程序会自动下载cabal并安装。
下面是安装cabal的步骤</p></blockquote><ol><li>下载源码并编译<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">wget http://www.haskell.org/cabal/release/cabal-install-1.20.0.3/cabal-install-1.20.0.3.tar.gz
tar zxvf cabal-install-1.20.0.3.tar.gz<span class="nb">cd</span> cabal-install-2.10.0.3
./bootstrap.sh
vim ~/.bahsrc<span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/.cabal/bin:<span class="nv">$PATH</span><span class="nb">source</span> ~/.bashrc
cabal update</code></pre></td></tr></table></div></div></li><li>异常处理
安装包haskell-platform中包含这些包，但是由于使用apt-get安装时不能获得最新的版本或者会出现一些问题，比如network-2.6.0.2通过cabal总是安装不上，报编译错误
这种使用源码安装的方式很好的解决了这些问题。非常高效！
在安装相关haskell包的时候可能会出现broken package错误，可以通过以下命令在haskell中移除broken package<code>ghc-pkg check --simple-output | xargs -n 1 ghc-pkg unregister --force</code></li></ol><hr/><p><strong>参考</strong><br/><a href="http://howistart.org/posts/haskell/1" rel="noopener noreffer" target="_blank">how i start</a></p></description></item><item><title>ScatNet散射卷积网络</title><link/>https://justpic.org/post/2014/08/09/scatter/<pubdate>Sat, 09 Aug 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/08/09/scatter/</guid><description><p>ScatNet散射卷积网络</p><p>散射卷积网络(ScatNet)通过卷积网络对图像的小波系数做级联运算，运用深度学习的思想，生成树状结构的散射系数，使用散射系数作为特征进行学习。
理解和分析scatnet就暂且从下面这幅图入手</p><p><img alt="scat transform" class="lazyload" data-sizes="auto" data-src="" data-srcset="/images/post/st.jpg,  1.5x,  2x" src="/svg/loading.small.min.svg" title="scat transform"/></p><p>在这里，\(f\)为输入的图像矩阵数据、\(\phi\)代表一个小波函数、m代表变换的阶数、J代表尺度,\(\lambda\)代表路径对应于m定义的各个阶，左上箭头代表计算出的散射系数、U代表的是各个小波系数的模结果。散射算子对U变换将会计算出该层散射系数S和下一层的U。
若散射变换的方向数为C，总阶数为m，则第q阶散射变换沿频率递减的路径数为\(C^{q}(^J_q)\)，假设图像的橡树大小为N，采样值为\(\omega 2^{J}\),则每条散射路径有\(N\omega^{-2}2^{-2J}\)个系数，则所有的系数个数为<br/>
$$N\omega^{-2}2^{-2J} \sum_{q=0}^m C^{q}(^J_q)$$</p><blockquote><p>散射卷积网络、小波变换、分形、自然常数之间的关系</p></blockquote><p>参考文章与资料：</p><p><a href="http://arxiv.org/abs/1203.1513" rel="noopener noreffer" target="_blank">Invariant Scattering Convolution Networks</a><br/><a href="http://www.itsoc.org/resources/media/isit-2013-istanbul/MallatISIT2013.pdf" rel="noopener noreffer" target="_blank">High Dimensional Classification with Invariant Deep Networks</a><br/><a href="http://www.di.ens.fr/data/software/scatnet/" rel="noopener noreffer" target="_blank">ScatNet</a><br/><a href="http://www.dailymotion.com/video/x10r1zw_stephane-mallat-mathematicien_tech" rel="noopener noreffer" target="_blank">S.Mallat的一个访谈</a><br/><a href="http://techtalks.tv/talks/plenary-talk-are-deepnetworks-a-soluSon-to-curse-of-dimensionality/60315/" rel="noopener noreffer" target="_blank">Plenary Talk:Are Deep Networks a Solution to Curse of Dimensionality</a><br/><a href="https://staff.fnwi.uva.nl/t.e.j.mensink/rdg/slides/2scatnets.pdf" rel="noopener noreffer" target="_blank">2scatnet</a></p></description></item><item><title>配置反向代理</title><link/>https://justpic.org/post/2014/06/05/reverse-proxy-setup/<pubdate>Thu, 05 Jun 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/06/05/reverse-proxy-setup/</guid><description><p>配置反向代理</p><h2 id="建立一个简单的反向http代理">建立一个简单的反向http代理</h2><p>nginx 配置情况</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">upstream tunnel{
server 127.0.0.1:8080;
}
server {
listen 80;
server_name &lt;url&gt;;
location /{
proxy_set_header Host $http_host;
proxy_pass tunnel;
}
}
#ssh reverse
ssh -R 8080:localhost:&lt;port&gt; &lt;user_name&gt;@&lt;server&gt;
#port is your local application used ,and url is the url you will to visit public</code></pre></td></tr></table></div></div></description></item><item><title>Matlab C混合编程</title><link/>https://justpic.org/post/2014/05/06/matlab-mixed-c/<pubdate>Tue, 06 May 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/05/06/matlab-mixed-c/</guid><description><p>Matalb与C/C__语言混合编程</p><blockquote><p>用C++（或者C）语言操作MATLAB，有三种途径：MEX、MAT、引擎应用程序</p></blockquote><h4 id="1mex文件">1.MEX文件</h4><p>在MATLAB中可调用的C或Fortran语言程序称为MEX文件。MATLAB可以直接把MEX文件视为它的内建函数进行调用。MEX文件是动态链接的子例程，MATLAB解释器可以自动载入并执行它。MEX文件主要有以下用途：<br/>
对于大量现有的C或者Fortran程序可以无须改写成MATLAB专用的M文件格式而在MATLAB中执行。<br/>
对于那些MATLAB运算速度过慢的算法，可以用C或者Frotran语言编写以提高效率。</p><h4 id="2mat文件应用程序">2.MAT文件应用程序</h4><p>MAT文件是MATLAB专用的用于保存数据至磁盘和向MATLAB导入、从MATLAB导出数据的数据文件格式。MAT文件提供了一种简便的机制，它允许你在两个平台之间以灵活的方式移动数据。而且，它还提供了一种途径来向其它单机MATLAB应用导入或者导出数据。<br/>
为了简化在MATLAB环境之外对MAT文件的使用，MATLAB给出了一个操作例程库，通过它，我们可以使用C/C++或者Fortran程序读写MAT文件。</p><h4 id="3引擎应用程序">3.引擎应用程序</h4><p>MATLAB提供了一系列的例程使得别的程序可以调用MATLAB，从而把MATLAB用作一个计算引擎。MATLAB引擎程序指的是那些通过管道（在UNIX系统中）或者ActiveX（在Windows系统中）与独立MATLAB进程进行通信的C/C++或者Fortran程序。<br/>
MEX文件</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">#include “mex.h”
/*
*timestwo.c-example found in API guide
*
*Computational function that takes a scalar and doubles it
*
*This is a MEX-File for MATLAB.
*Copyright(c)
*/
void timestwo(double y[],double x[]);
void timestwo(double y[],double x[])
{
y[0]=2.0*x[0];
}
void mexFunction(int nlhs,mxArray* plhs[],int nrhs,const mxArray *prhs[])
/*nlhs是MATLAB命令行方式下输出参数的个数
*plhs是MATLAB命令行方式下的输出参数;
*nrhs是MATLAB命令行方式下输入参数的个数；
*prhs[]是MATLAB命令行方式下的输入参数；
*/
{
double *x,*y;
int mrows,ncols;
/*Check for proper number of arguments.*/
if (nrhs!=1){
mexErrMsgTxt(“One input required”);
}
else if(nlhs&gt;=1)
{
mexErrMsgTxt(“Too many output arguments”);
}
/*在MATLAB命令行方式下，本MEX文件的调用格式是y=timestwo(x)
输入参数（x）个数=1，输出参数（y）个数=1，所以在程序一开始就检查
nrhs时候==1以及nlhs是否&gt;=1（因为MATLAB有一个缺省的输出参数ans，所以nlhs可以==0*/
/*The input must be a non comlex scalar double.*/
mrows=mxGetM(prhs[0]);//矩阵行数&lt;br&gt;
ncols=mxGetN(prhs[0]);//矩阵列数&lt;br&gt;
if (!mxIsDouble(prhs[0])|| mxIsComplex(prhs[0])||!(mrows==1&amp;amp;ncols==1))
{
mexErrMsgTxt(“Input must be a noncomplex scalar double”);
}
//判断输入举证是否是double类，以及它是否只包含单个元素无嵌套
//为输出创建一个矩阵，显然这个矩阵也应该是1*1的
plhs[0]=mxCreateDoubleMatrix(mrows,ncols,mxREAL);
x=mxGetPr(prhs[0]);
y=mxGetPr(plhs[0]);
timestwo(y,x);
}</code></pre></td></tr></table></div></div><p>matlab命令行上输入以下语句：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mex testmex.cpp;
x=2;
y=testmex(x);</code></pre></td></tr></table></div></div><blockquote><p>MAT文件：<br/>
libmat.dll:用于操作mat文件<br/>
libmx.dll:用于操作mat文件中的矩阵<br/>
MATLAB中常用的矩阵类型：</p></blockquote><p>(复)双精度矩阵：<br/>
MATLAB中最常用的数据类型便是（复）双精度、非稀疏矩阵，这些矩阵的元素都是双精度（double）的，矩阵的尺寸为m×n，其中m是总行数，m是总列数。矩阵数据实际存放在两个双精度向量中——一个向量存放的是数据的实部，另一个向量存放的是数据的虚部。指向这两个向量的指针一般被写做“pr” （pointer to real data，指向实数据的指针）和“pi” （pointer to imaginary data，指向虚数据的指针）”。如果一个矩阵的pi为空的话，说明它是实双精度矩阵。<br/>
稀疏矩阵（Sparse Matrices）<br/>
MATLAB中稀疏矩阵的存储格式与众不同。如同双精度矩阵一样，它拥有参数pr和pi，同时它还具用三个附加的参数：nzmax，ir以及jc。<br/>
nzmax是个整型数，其值为向量ir及pr、pi（如果存在的话）可能的最大长度。它是稀疏矩阵中不为零的元素的个数。
ir指向一个长度为nzmax的整型数阵列，阵列包含的是pr和pi中对应元素的行号。<br/>
jc指向一个长度为N+1的整型数阵列（N为矩阵的列数），其中包含的是列号信息。对于任意的j，如果0≤j≥N-1，jc[j]是第j列中第一个非零项在ir、pr（以及pi）中的序号，jc[j+1]-1是第j列最后一个非零项的序号。因此jc[N]总等于nnz——矩阵中非零项的总个数。如果nnz小于nzmax，可以继续向矩阵中添加非零项而无需分配额外的存储空间&lt;</p><p>主要函数举例:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">·MATFile *matOpen(const char *filename, const char * mode)——打开/创建
·MATFile *matOpen(const char *filename, const char * mode)——打开/创建一个MAT文件；
·int matClose(MATFile *pMF)——关闭一个MAT文件；
·mxArray *mxCreateDoubleMatrix(int m, int n, mxComplexity flag)
#创建一个（复）双精度矩阵；
·mxArray *mxCreateSparse(int m, int n, int nzmax, mxComplexity flag)
#创建一个稀疏矩阵；
·mxArray *matGetNextArray(MATFile *pMF)——获得MAT文件里面下一个矩阵；
·const char *mxGetName(const mxArray *pa)——获得矩阵pa的名称；
·void mxSetName(mxArray *pa,const char *s)——为矩阵pa设置一个名称；
·int mxGetM(const mxArray *pa)——获得矩阵pa的总行数；
·int mxGetN(const mxArray *pa)——获得矩阵pa的总列数；
·double *mxGetPr(const mxArray *pa)——获得矩阵pa的pr指针；
·int *mxGetIr(const mxArray *pa)——获得稀疏矩阵pa的ir指针；
·int *mxGetJc(const mxArray *pa)——获得稀疏矩阵pa的jc指针；
·int matPutArray(MATFile * pMF, const mxArray * pA)
#把矩阵pA存储入MAT文件pMAF；
·void mxDestroyArray(mxArray *pa)——释放矩阵pa（把它从内存中撤销）；</code></pre></td></tr></table></div></div></description></item><item><title>计算机视觉</title><link/>https://justpic.org/post/2014/05/06/ai-collection-2014/<pubdate>Tue, 06 May 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/05/06/ai-collection-2014/</guid><description><p>计算机视觉论文源代码集锦</p><h2 id="计算机视觉机器学习相关领域论文和源代码大集合--持续更新">计算机视觉、机器学习相关领域论文和源代码大集合–持续更新</h2><h3 id="特征提取feature-extraction">特征提取Feature Extraction</h3><ol><li>SIFT [<a href="http://www.cs.ubc.ca/~lowe/keypoints/siftDemoV4.zip" target="_blank">Demo program</a>][<a href="http://blogs.oregonstate.edu/hess/code/sift/" target="_blank">SIFT Library</a>] [<a href="http://www.vlfeat.org/" target="_blank">VLFeat</a>]</li><li>PCA-SIFT [<a href="http://www.cs.cmu.edu/~yke/pcasift/" target="_blank">Project</a>]</li><li>Affine-SIFT [<a href="http://www.ipol.im/pub/algo/my_affine_sift/" target="_blank">Project</a>]</li><li>SURF [<a href="http://www.chrisevansdev.com/computer-vision-opensurf.html" target="_blank">OpenSURF</a>] [<a href="http://www.maths.lth.se/matematiklth/personal/petter/surfmex.php" target="_blank">Matlab Wrapper</a>]</li><li>Affine Covariant Features [<a href="http://www.robots.ox.ac.uk/~vgg/research/affine/" target="_blank">Oxford project</a>]</li><li>MSER [<a href="http://www.robots.ox.ac.uk/~vgg/research/affine/" target="_blank">Oxford project</a>] [<a href="http://www.vlfeat.org/" target="_blank">VLFeat</a>]</li><li>Geometric Blur [<a href="http://www.robots.ox.ac.uk/~vgg/software/MKL/" target="_blank">Code</a>]</li><li>Local Self-Similarity Descriptor [<a href="http://www.robots.ox.ac.uk/~vgg/software/SelfSimilarity/" target="_blank">Oxford implementation</a>]</li><li>Global and Efficient Self-Similarity [<a href="http://www.vision.ee.ethz.ch/~calvin/gss/selfsim_release1.0.tgz" target="_blank">Code</a>]</li><li>Histogram of Oriented Graidents [<a href="http://www.navneetdalal.com/software" target="_blank">INRIA Object Localization Toolkit</a>] [<a href="http://www.computing.edu.au/~12482661/hog.html" target="_blank">OLT toolkit for Windows</a>]</li><li>Shape Context [<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/shape/sc_digits.html" target="_blank">Project</a>]</li><li>Color Descriptor [<a href="http://koen.me/research/colordescriptors/" target="_blank">Project</a>]</li><li>Pyramids of Histograms of Oriented Gradients [<a href="http://www.robots.ox.ac.uk/~vgg/research/caltech/phog/phog.zip" target="_blank">Code</a>]</li><li>Space-Time Interest Points (STIP) [<a href="http://www.nada.kth.se/cvap/abstracts/cvap284.html" target="_blank">Project</a>] [<a href="http://www.irisa.fr/vista/Equipe/People/Laptev/download/stip-1.1-winlinux.zip" target="_blank">Code</a>]</li><li>Boundary Preserving Dense Local Regions[<a href="http://vision.cs.utexas.edu/projects/bplr/bplr.html" target="_blank">Project</a>]</li><li>Weighted Histogram[<a href="http://www.wisdom.weizmann.ac.il/~bagon/matlab_code/whistc.tar.gz" target="_blank">Code</a>]</li><li>Histogram-based Interest Points Detectors[<a href="http://www.cs.nthu.edu.tw/~htchen/hipd_cvpr09.pdf" target="_blank">Paper</a>][<a href="http://740-2.cs.nthu.edu.tw/~htchen/hipd/hist_corner.zip" target="_blank">Code</a>]</li><li>An OpenCV – C++ implementation of Local Self Similarity Descriptors [<a href="http://intuitionlogic.com/post/2011/04/11/A-OpenCV-C++-implementation-of-Local-Self-Similarity-Descriptors.aspx" target="_blank">Project</a>]</li><li>Fast Sparse Representation with Prototypes[<a href="http://faculty.ucmerced.edu/mhyang/cvpr10_fsr.html" target="_blank">Project</a>]</li><li>Corner Detection [<a href="http://kiwi.cs.dal.ca/~dparks/CornerDetection/index.htm" target="_blank">Project</a>]</li><li>AGAST Corner Detector: faster than FAST and even FAST-ER[<a href="http://www6.in.tum.de/Main/ResearchAgast" target="_blank">Project</a>]<br/>
1</li></ol><h3 id="图像分割image-segmentation">图像分割Image Segmentation</h3><ol><li>Normalized Cut [<a href="http://www.cis.upenn.edu/~jshi/software/" target="_blank">Matlab code</a>]</li><li>Gerg Mori’ Superpixel code [<a href="http://www.cs.sfu.ca/~mori/research/superpixels/" target="_blank">Matlab code</a>]</li><li>Efficient Graph-based Image Segmentation [<a href="http://people.cs.uchicago.edu/~pff/segment/" target="_blank">C++ code</a>] [<a href="http://www.mathworks.com/matlabcentral/fileexchange/25866-efficient-graph-based-image-segmentation" target="_blank">Matlab wrapper</a>]</li><li>Mean-Shift Image Segmentation [<a href="http://coewww.rutgers.edu/riul/research/code/EDISON/index.html" target="_blank">EDISON C++ code</a>] [<a href="http://www.wisdom.weizmann.ac.il/~bagon/matlab_code/edison_matlab_interface.tar.gz" target="_blank">Matlab wrapper</a>]</li><li>OWT-UCM Hierarchical Segmentation [<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/resources.html" target="_blank">Resources</a>]</li><li>Turbepixels [<a href="http://www.cs.toronto.edu/~babalex/turbopixels_code.tar.gz" target="_blank">Matlab code 32bit</a>] [<a href="http://www.cs.toronto.edu/~babalex/TurboPixels64.rar" target="_blank">Matlab code 64bit</a>] [<a href="http://www.cs.toronto.edu/~babalex/superpixels_update.tgz" target="_blank">Updated code</a>]</li><li>Quick-Shift[<a href="http://www.vlfeat.org/overview/quickshift.html" target="_blank">VLFeat</a>]</li><li>SLIC Superpixels [<a href="http://ivrgwww.epfl.ch/supplementary_material/RK_SLICSuperpixels/index.html" target="_blank">Project</a>]</li><li>Segmentation by Minimum Code Length [<a href="http://perception.csl.uiuc.edu/coding/image_segmentation/" target="_blank">Project</a>]</li><li>Biased Normalized Cut [<a href="http://www.cs.berkeley.edu/~smaji/projects/biasedNcuts/" target="_blank">Project</a>]</li><li>Segmentation Tree [<a href="http://vision.ai.uiuc.edu/segmentation" target="_blank">Project</a>]</li><li>Entropy Rate Superpixel Segmentation [<a href="http://www.umiacs.umd.edu/~mingyliu/src/ers_matlab_wrapper_v0.1.zip" target="_blank">Code</a>]</li><li>Fast Approximate Energy Minimization via Graph Cuts[<a href="http://www.csd.uwo.ca/faculty/olga/Papers/pami01_final.pdf" target="_blank">Paper</a>][<a href="http://vision.csd.uwo.ca/code/gco-v3.0.zip" target="_blank">Code</a>]</li><li>Efﬁcient Planar Graph Cuts with Applications in Computer Vision[<a href="http://www.csd.uwo.ca/~schmidtf/pdf/schmidt_et_al_cvpr09.pdf" target="_blank">Paper</a>][<a href="http://vision.csd.uwo.ca/code/PlanarCut-v1.0.zip" target="_blank">Code</a>]</li><li>Isoperimetric Graph Partitioning for Image Segmentation[<a href="http://www.cns.bu.edu/~lgrady/grady2006isoperimetric.pdf" target="_blank">Paper</a>][<a href="http://www.cns.bu.edu/~lgrady/grady2006isoperimetric_code.zip" target="_blank">Code</a>]</li><li>Random Walks for Image Segmentation[<a href="http://www.cns.bu.edu/~lgrady/grady2006random.pdf" target="_blank">Paper</a>][<a href="http://www.cns.bu.edu/~lgrady/random_walker_matlab_code.zip" target="_blank">Code</a>]</li><li>Blossom V: A new implementation of a minimum cost perfect matching algorithm[<a href="http://pub.ist.ac.at/~vnk/software/blossom5-v2.03.src.tar.gz%20%20http:/pub.ist.ac.at/~vnk/software/blossom5-v2.03.src.tar.gz" target="_blank">Code</a>]</li><li>An Experimental Comparison of Min-Cut/Max-Flow Algorithms for Energy Minimization in Computer Vision[<a href="http://www.csd.uwo.ca/~yuri/Papers/pami04.pdf" target="_blank">Paper</a>][<a href="http://pub.ist.ac.at/~vnk/software/maxflow-v3.01.src.tar.gz" target="_blank">Code</a>]</li><li>Geodesic Star Convexity for Interactive Image Segmentation[<a href="http://www.robots.ox.ac.uk/~vgg/software/iseg/" target="_blank">Project</a>]</li><li>Contour Detection and Image Segmentation Resources[<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/resources.html" target="_blank">Project</a>][<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/BSR/BSR_source.tgz" target="_blank">Code</a>]</li><li>Biased Normalized Cuts[<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/biasedNcuts/" target="_blank">Project</a>]</li><li>Max-flow/min-cut[<a href="http://vision.csd.uwo.ca/code/" target="_blank">Project</a>]</li><li>Chan-Vese Segmentation using Level Set[<a href="http://www.ipol.im/pub/art/2012/g-cv/" target="_blank">Project</a>]</li><li>A Toolbox of Level Set Methods[<a href="http://www.cs.ubc.ca/~mitchell/ToolboxLS/index.html" target="_blank">Project</a>]</li><li>Re-initialization Free Level Set Evolution via Reaction Diffusion[<a href="http://www4.comp.polyu.edu.hk/~cslzhang/RD/RD.htm" target="_blank">Project</a>]</li><li>Improved C-V active contour model[<a href="http://www4.comp.polyu.edu.hk/~cskhzhang/J_papers/ICV.pdf" target="_blank">Paper</a>][<a href="http://www4.comp.polyu.edu.hk/~cskhzhang/J_papers/ICV.rar" target="_blank">Code</a>]</li><li>A Variational Multiphase Level Set Approach to Simultaneous Segmentation and Bias Correction[<a href="http://www4.comp.polyu.edu.hk/~cskhzhang/J_papers/ICIP10_SVMLS.pdf" target="_blank">Paper</a>][<a href="http://www4.comp.polyu.edu.hk/~cskhzhang/J_papers/SVMLS_v0.rar" target="_blank">Code</a>]</li><li>Level Set Method Research by Chunming Li[<a href="http://www.engr.uconn.edu/~cmli/" target="_blank">Project</a>]</li></ol><h3 id="目标检测object-detection">目标检测Object Detection</h3><ol><li>A simple object detector with boosting [<a href="http://people.csail.mit.edu/torralba/shortCourseRLOC/boosting/boosting.html" target="_blank">Project</a>]</li><li>INRIA Object Detection and Localization Toolkit [<a href="http://pascal.inrialpes.fr/soft/olt/" target="_blank">Project</a>]</li><li>Discriminatively Trained Deformable Part Models [<a href="http://people.cs.uchicago.edu/~pff/latent/" target="_blank">Project</a>]</li><li>Cascade Object Detection with Deformable Part Models [<a href="http://people.cs.uchicago.edu/~rbg/star-cascade/" target="_blank">Project</a>]</li><li>Poselet [<a href="http://www.eecs.berkeley.edu/~lbourdev/poselets/" target="_blank">Project</a>]</li><li>Implicit Shape Model [<a href="http://www.vision.ee.ethz.ch/~bleibe/code/ism.html" target="_blank">Project</a>]</li><li>Viola and Jones’s Face Detection [<a href="http://pr.willowgarage.com/wiki/Face_detection" target="_blank">Project</a>]</li><li>Bayesian Modelling of Dyanmic Scenes for Object Detection[<a href="http://vision.eecs.ucf.edu/papers/01512057.pdf" target="_blank">Paper</a>][<a href="http://vision.eecs.ucf.edu/Code/Background.zip" target="_blank">Code</a>]</li><li>Hand detection using multiple proposals[<a href="http://www.robots.ox.ac.uk/~vgg/software/hands/" target="_blank">Project</a>]</li><li>Color Constancy, Intrinsic Images, and Shape Estimation[<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/reconstruction/BarronMalikECCV2012.pdf" target="_blank">Paper</a>][<a href="http://www.cs.berkeley.edu/~barron/BarronMalikECCV2012_code.zip" target="_blank">Code</a>]</li><li>Discriminatively trained deformable part models[<a href="http://people.cs.uchicago.edu/~rbg/latent/" target="_blank">Project</a>]</li><li>Gradient Response Maps for Real-Time Detection of Texture-Less Objects: LineMOD [<a href="http://campar.cs.tum.edu/Main/StefanHinterstoisser" target="_blank">Project</a>]</li><li>Image Processing On Line[<a href="http://www.ipol.im/" target="_blank">Project</a>]</li><li>Robust Optical Flow Estimation[<a href="http://www.ipol.im/pub/pre/21/" target="_blank">Project</a>]</li><li>Where’s Waldo: Matching People in Images of Crowds[<a href="http://homes.cs.washington.edu/~rahul/data/WheresWaldo.html" target="_blank">Project</a>]</li></ol><h3 id="显著性检测saliency-detection">显著性检测Saliency Detection</h3><ol><li>Itti, Koch, and Niebur’ saliency detection [<a href="http://www.saliencytoolbox.net/" target="_blank">Matlab code</a>]</li><li>Frequency-tuned salient region detection [<a href="http://ivrgwww.epfl.ch/supplementary_material/RK_CVPR09/index.html" target="_blank">Project</a>]</li><li>Saliency detection using maximum symmetric surround [<a href="http://ivrg.epfl.ch/supplementary_material/RK_ICIP2010/index.html" target="_blank">Project</a>]</li><li>Attention via Information Maximization [<a href="http://www.cse.yorku.ca/~neil/AIM.zip" target="_blank">Matlab code</a>]</li><li>Context-aware saliency detection [<a href="http://webee.technion.ac.il/labs/cgm/Computer-Graphics-Multimedia/Software/Saliency/Saliency.html" target="_blank">Matlab code</a>]</li><li>Graph-based visual saliency [<a href="http://www.klab.caltech.edu/~harel/share/gbvs.php" target="_blank">Matlab code</a>]</li><li>Saliency detection: A spectral residual approach. [<a href="http://www.klab.caltech.edu/~xhou/projects/spectralResidual/spectralresidual.html" target="_blank">Matlab code</a>]</li><li>Segmenting salient objects from images and videos. [<a href="http://www.cse.oulu.fi/MVG/Downloads/saliency" target="_blank">Matlab code</a>]</li><li>Saliency Using Natural statistics. [<a href="http://cseweb.ucsd.edu/~l6zhang/" target="_blank">Matlab code</a>]</li><li>Discriminant Saliency for Visual Recognition from Cluttered Scenes. [<a href="http://www.svcl.ucsd.edu/projects/saliency/" target="_blank">Code</a>]</li><li>Learning to Predict Where Humans Look [<a href="http://people.csail.mit.edu/tjudd/WherePeopleLook/index.html" target="_blank">Project</a>]</li><li>Global Contrast based Salient Region Detection [<a href="http://cg.cs.tsinghua.edu.cn/people/~cmm/saliency/" target="_blank">Project</a>]</li><li>Bayesian Saliency via Low and Mid Level Cues[<a href="http://ice.dlut.edu.cn/lu/Project/TIP_scm/TIP_scm.htm" target="_blank">Project</a>]</li><li>Top-Down Visual Saliency via Joint CRF and Dictionary Learning [<a href="http://faculty.ucmerced.edu/mhyang/papers/cvpr12a.pdf" target="_blank">Paper</a>] [<a href="http://faculty.ucmerced.edu/mhyang/code/top-down-saliency.zip" target="_blank">Code</a>]</li></ol><h3 id="图像分类聚类image-classification-clustering">图像分类、聚类Image Classification, Clustering</h3><ol><li>Pyramid Match [<a href="http://people.csail.mit.edu/jjl/libpmk/" target="_blank">Project</a>]</li><li>Spatial Pyramid Matching [<a href="http://www.cs.unc.edu/~lazebnik/research/SpatialPyramid.zip" target="_blank">Code</a>]</li><li>Locality-constrained Linear Coding [<a href="http://www.ifp.illinois.edu/~jyang29/LLC.htm" target="_blank">Project</a>] [<a href="http://www.ifp.illinois.edu/~jyang29/codes/CVPR10-LLC.rar" target="_blank">Matlab code</a>]</li><li>Sparse Coding [<a href="http://www.ifp.illinois.edu/~jyang29/ScSPM.htm" target="_blank">Project</a>] [<a href="http://www.ifp.illinois.edu/~jyang29/codes/CVPR09-ScSPM.rar" target="_blank">Matlab code</a>]</li><li>Texture Classification [<a href="http://www.robots.ox.ac.uk/~vgg/research/texclass/index.html" target="_blank">Project</a>]</li><li>Multiple Kernels for Image Classification [<a href="http://www.robots.ox.ac.uk/~vgg/software/MKL/" target="_blank">Project</a>]</li><li>Feature Combination [<a href="http://www.vision.ee.ethz.ch/~pgehler/projects/iccv09/index.html" target="_blank">Project</a>]</li><li>SuperParsing [<a href="http://www.cs.unc.edu/~jtighe/Papers/ECCV10/eccv10-jtighe-code.zip" target="_blank">Code</a>]</li><li>Large Scale Correlation Clustering Optimization[<a href="http://www.wisdom.weizmann.ac.il/~bagon/matlab_code/LargeScaleCC1.0.tar.gz" target="_blank">Matlab code</a>]</li><li>Detecting and Sketching the Common[<a href="http://www.wisdom.weizmann.ac.il/~vision/SketchTheCommon" target="_blank">Project</a>]</li><li>Self-Tuning Spectral Clustering[<a href="http://www.vision.caltech.edu/lihi/Demos/SelfTuningClustering.html" target="_blank">Project</a>][<a href="http://www.vision.caltech.edu/lihi/Demos/SelfTuning/ZPclustering.zip" target="_blank">Code</a>]</li><li>User Assisted Separation of Reflections from a Single Image Using a Sparsity Prior[<a href="http://www.wisdom.weizmann.ac.il/~levina/papers/assisted-eccv04.pdf" target="_blank">Paper</a>][<a href="http://www.wisdom.weizmann.ac.il/~levina/papers/reflections.zip" target="_blank">Code</a>]</li><li>Filters for Texture Classification[<a href="http://www.robots.ox.ac.uk/~vgg/research/texclass/filters.html#download" target="_blank">Project</a>]</li><li>Multiple Kernel Learning for Image Classification[<a href="http://www.robots.ox.ac.uk/~vgg/software/MKL/" target="_blank">Project</a>]</li><li>SLIC Superpixels[<a href="http://ivrg.epfl.ch/supplementary_material/RK_SLICSuperpixels/" target="_blank">Project</a>]</li></ol><h3 id="抠图image-matting">抠图Image Matting</h3><ol><li>A Closed Form Solution to Natural Image Matting [<a href="http://people.csail.mit.edu/alevin/matting.tar.gz" target="_blank">Code</a>]</li><li>Spectral Matting [<a href="http://www.vision.huji.ac.il/SpectralMatting/" target="_blank">Project</a>]</li><li>Learning-based Matting [<a href="http://www.mathworks.com/matlabcentral/fileexchange/31412" target="_blank">Code</a>]</li></ol><h3 id="目标跟踪object-tracking">目标跟踪Object Tracking</h3><ol><li>A Forest of Sensors – Tracking Adaptive Background Mixture Models [<a href="http://www.ai.mit.edu/projects/vsam/Tracking/index.html" target="_blank">Project</a>]</li><li>Object Tracking via Partial Least Squares Analysis[<a href="http://faculty.ucmerced.edu/mhyang/papers/tip12_pls_tracking.pdf" target="_blank">Paper</a>][<a href="http://faculty.ucmerced.edu/mhyang/code/PLS_tracker_tip.zip" target="_blank">Code</a>]</li><li>Robust Object Tracking with Online Multiple Instance Learning[<a href="http://faculty.ucmerced.edu/mhyang/papers/pami11b.pdf" target="_blank">Paper</a>][<a href="http://vision.ucsd.edu/~bbabenko/project_miltrack.shtml" target="_blank">Code</a>]</li><li>Online Visual Tracking with Histograms and Articulating Blocks[<a href="http://www.cise.ufl.edu/~smshahed/tracking.htm" target="_blank">Project</a>]</li><li>Incremental Learning for Robust Visual Tracking[<a href="http://www.cs.toronto.edu/~dross/ivt/" target="_blank">Project</a>]</li><li>Real-time Compressive Tracking[<a href="http://www4.comp.polyu.edu.hk/~cslzhang/CT/CT.htm" target="_blank">Project</a>]</li><li>Robust Object Tracking via Sparsity-based Collaborative Model[<a href="http://faculty.ucmerced.edu/mhyang/project/cvpr12_scm.htm" target="_blank">Project</a>]</li><li>Visual Tracking via Adaptive Structural Local Sparse Appearance Model[<a href="http://faculty.ucmerced.edu/mhyang/project/cvpr12_jia_project.htm" target="_blank">Project</a>]</li><li>Online Discriminative Object Tracking with Local Sparse Representation[<a href="http://faculty.ucmerced.edu/mhyang/papers/wacv12a.pdf" target="_blank">Paper</a>][<a href="http://faculty.ucmerced.edu/mhyang/code/wacv12a_code.zip" target="_blank">Code</a>]</li><li>Superpixel Tracking[<a href="http://faculty.ucmerced.edu/mhyang/papers/iccv11a.html" target="_blank">Project</a>]</li><li>Learning Hierarchical Image Representation with Sparsity, Saliency and Locality[<a href="http://faculty.ucmerced.edu/mhyang/papers/bmvc11a.pdf" target="_blank">Paper</a>][<a href="http://faculty.ucmerced.edu/mhyang/code/BMVC11-HSSL-package.zip" target="_blank">Code</a>]</li><li>Online Multiple Support Instance Tracking [<a href="http://faculty.ucmerced.edu/mhyang/papers/fg11a.pdf" target="_blank">Paper</a>][<a href="http://faculty.ucmerced.edu/mhyang/code/fg11_omsit.zip" target="_blank">Code</a>]</li><li>Visual Tracking with Online Multiple Instance Learning[<a href="http://vision.ucsd.edu/~bbabenko/project_miltrack.shtml" target="_blank">Project</a>]</li><li>Object detection and recognition[<a href="http://c2inet.sce.ntu.edu.sg/Jianxin/" target="_blank">Project</a>]</li><li>Compressive Sensing Resources[<a href="http://dsp.rice.edu/cs" target="_blank">Project</a>]</li><li>Robust Real-Time Visual Tracking using Pixel-Wise Posteriors[<a href="http://www.robots.ox.ac.uk/~cbibby/index.shtml" target="_blank">Project</a>]</li><li>Tracking-Learning-Detection[<a href="http://info.ee.surrey.ac.uk/Personal/Z.Kalal/" target="_blank">Project</a>][<a href="https://github.com/arthurv/OpenTLD" target="_blank">OpenTLD/C++ Code</a>]</li><li>the HandVu：vision-based hand gesture interface[<a href="http://ilab.cs.ucsb.edu/index.php/component/content/article/12/29" target="_blank">Project</a>]</li></ol><h3 id="kinect">Kinect</h3><ol><li>Kinect toolbox[<a href="http://kinecttoolbox.codeplex.com/" target="_blank">Project</a>]</li><li>OpenNI[<a href="http://www.openni.org/" target="_blank">Project</a>]</li><li>zouxy09 CSDN Blog[<a href="http://blog.csdn.net/zouxy09/article/details/814561" target="_blank">Resource</a>]</li></ol><h3 id="3d相关">3D相关</h3><ol><li>3D Reconstruction of a Moving Object[<a href="http://www.wisdom.weizmann.ac.il/~ronen/papers/Simakov%20Frolova%20Basri%20-%20Dense%20Shape%20Reconstruction%20Under%20Arbitrary%20Unknown%20Lighting.pdf" target="_blank">Paper</a>] [<a href="http://www.wisdom.weizmann.ac.il/~bagon/matlab_code/SFB_matlab1.0.tar.gz" target="_blank">Code</a>]</li><li>Shape From Shading Using Linear Approximation[<a href="http://vision.eecs.ucf.edu/shadsrc.html" target="_blank">Code</a>]</li><li>Combining Shape from Shading and Stereo Depth Maps[<a href="http://vision.eecs.ucf.edu/combsrc.html" target="_blank">Project</a>][<a href="http://vision.eecs.ucf.edu/projects/ShapeFromShading/combine.tar.Z" target="_blank">Code</a>]</li><li>Shape from Shading: A Survey[<a href="http://vision.eecs.ucf.edu/papers/shah/99/ZTCS99.pdf" target="_blank">Paper</a>][<a href="http://vision.eecs.ucf.edu/projects/ShapeFromShading/SFS_Survey_1_00.tar.gz" target="_blank">Code</a>]</li><li>A Spatio-Temporal Descriptor based on 3D Gradients (HOG3D)[<a href="http://lear.inrialpes.fr/people/klaeser/research_hog3d" target="_blank">Project</a>][<a href="http://lear.inrialpes.fr/people/klaeser/software_3d_video_descriptor" target="_blank">Code</a>]</li><li>Multi-camera Scene Reconstruction via Graph Cuts[<a href="http://www.cs.cornell.edu/~rdz/papers/kz-eccv02-recon.pdf" target="_blank">Paper</a>][<a href="http://pub.ist.ac.at/~vnk/software/match-v3.4.src.tar.gz" target="_blank">Code</a>]</li><li>A Fast Marching Formulation of Perspective Shape from Shading under Frontal Illumination[<a href="http://www.cs.ucf.edu/~vision" target="_blank">Paper</a>][<a href="http://www.ee.cityu.edu.hk/~syyuen/Public/SfS/PRL_Perspective_FMM.zip" target="_blank">Code</a>]</li><li>Reconstruction:3D Shape, Illumination, Shading, Reflectance, Texture[<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/reconstruction/" target="_blank">Project</a>]</li><li>Monocular Tracking of 3D Human Motion with a Coordinated Mixture of Factor Analyzers[<a href="http://faculty.ucmerced.edu/mhyang/code/PackagedTrackingCode.tar.gz" target="_blank">Code</a>]</li><li>Learning 3-D Scene Structure from a Single Still Image[<a href="http://ai.stanford.edu/~asaxena/reconstruction3d/" target="_blank">Project</a>]</li></ol><h3 id="机器学习算法">机器学习算法</h3><ol><li>Matlab class for computing Approximate Nearest Nieghbor (ANN) [<a href="http://www.wisdom.weizmann.ac.il/~bagon/matlab_code/ann_wrapper_Mar2012.tar.gz" target="_blank">Matlab class</a> providing interface to<a href="http://www.cs.umd.edu/~mount/ANN/" target="_blank">ANN library</a>]</li><li>Random Sampling[<a href="http://www.wisdom.weizmann.ac.il/~bagon/matlab_code/weight_sample.tar.gz" target="_blank">code</a>]</li><li>Probabilistic Latent Semantic Analysis (pLSA)[<a href="http://www.robots.ox.ac.uk/~vgg/software/pLSA/pLSA_demo.tgz" target="_blank">Code</a>]</li><li>FASTANN and FASTCLUSTER for approximate k-means (AKM)[<a href="http://www.robots.ox.ac.uk/~vgg/software/fastann/" target="_blank">Project</a>]</li><li>Fast Intersection / Additive Kernel SVMs[<a href="http://www.cs.berkeley.edu/~smaji/projects/fiksvm/" target="_blank">Project</a>]</li><li>SVM[<a href="http://osmot.cs.cornell.edu/svm_light/" target="_blank">Code</a>]</li><li>Ensemble learning[<a href="http://c2inet.sce.ntu.edu.sg/Jianxin/" target="_blank">Project</a>]</li><li>Deep Learning[<a href="http://deeplearning.net/" target="_blank">Net</a>]</li><li>Deep Learning Methods for Vision[<a href="http://cs.nyu.edu/~fergus/tutorials/deep_learning_cvpr12/" target="_blank">Project</a>]</li><li>Neural Network for Recognition of Handwritten Digits[<a href="http://www.codeproject.com/KB/library/NeuralNetRecognition.aspx" target="_blank">Project</a>]</li><li>Training a deep autoencoder or a classifier on MNIST digits[<a href="http://www.cs.toronto.edu/~hinton/MatlabForSciencePaper.html" target="_blank">Project</a>]</li><li>THE MNIST DATABASE of handwritten digits[<a href="http://yann.lecun.com/exdb/mnist/" target="_blank">Project</a>]</li><li>Ersatz：deep neural networks in the cloud[<a href="http://www.ersatz1.com/" target="_blank">Project</a>]</li><li>Deep Learning [<a href="http://www.cs.nyu.edu/~yann/research/deep/" target="_blank">Project</a>]</li><li>sparseLM : Sparse Levenberg-Marquardt nonlinear least squares in C/C++[<a href="http://www.ics.forth.gr/~lourakis/sparseLM/" target="_blank">Project</a>]</li><li>Weka 3: Data Mining Software in Java[<a href="http://www.cs.waikato.ac.nz/ml/weka/" target="_blank">Project</a>]</li><li>Invited talk “A Tutorial on Deep Learning” by Dr. Kai Yu (余凯)[<a href="http://vipl.ict.ac.cn/News/academic-report-tutorial-deep-learning-dr-kai-yu" target="_blank">Video</a>]</li><li>CNN – Convolutional neural network class[<a href="http://www.mathworks.cn/matlabcentral/fileexchange/24291" target="_blank">Matlab Tool</a>]</li><li>Yann LeCun’s Publications[<a href="http://yann.lecun.com/exdb/publis/index.html#lecun-98" target="_blank">Wedsite</a>]</li><li>LeNet-5, convolutional neural networks[<a href="http://yann.lecun.com/exdb/lenet/index.html" target="_blank">Project</a>]</li><li>Training a deep autoencoder or a classifier on MNIST digits[<a href="http://www.cs.toronto.edu/~hinton/MatlabForSciencePaper.html" target="_blank">Project</a>]</li><li>Deep Learning 大牛Geoffrey E. Hinton’s HomePage[<a href="http://www.cs.toronto.edu/~hinton/" target="_blank">Website</a>]</li></ol><h3 id="目标行为识别object-action-recognition">目标、行为识别Object, Action Recognition</h3><ol><li>Action Recognition by Dense Trajectories[<a href="http://lear.inrialpes.fr/people/wang/dense_trajectories" target="_blank">Project</a>][<a href="http://lear.inrialpes.fr/people/wang/download/dense_trajectory_release.tar.gz" target="_blank">Code</a>]</li><li>Action Recognition Using a Distributed Representation of Pose and Appearance[<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/shape/action/" target="_blank">Project</a>]</li><li>Recognition Using Regions[<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/shape/glam-cvpr09.pdf" target="_blank">Paper</a>][<a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/shape/glam_cvpr09_v2.zip" target="_blank">Code</a>]</li><li>2D Articulated Human Pose Estimation[<a href="http://www.vision.ee.ethz.ch/~calvin/articulated_human_pose_estimation_code/" target="_blank">Project</a>]</li><li>Fast Human Pose Estimation Using Appearance and Motion via Multi-Dimensional Boosting Regression[<a href="http://faculty.ucmerced.edu/mhyang/papers/cvpr07a.pdf" target="_blank">Paper</a>][<a href="http://www.cise.ufl.edu/~smshahed/cvpr07_fast_human_pose.zip" target="_blank">Code</a>]</li><li>Estimating Human Pose from Occluded Images[<a href="http://faculty.ucmerced.edu/mhyang/papers/accv09a.pdf" target="_blank">Paper</a>][<a href="http://faculty.ucmerced.edu/mhyang/code/accv09_pose.zip" target="_blank">Code</a>]</li><li>Quasi-dense wide baseline matching[<a href="http://www.ee.oulu.fi/~jkannala/quasidense/quasidense.html" target="_blank">Project</a>]</li><li>ChaLearn Gesture Challenge: Principal motion: PCA-based reconstruction of motion histograms[<a href="http://gesture.chalearn.org/data/sample-code" target="_blank">Prpject</a>]</li></ol><h3 id="图像处理">图像处理</h3><ol><li>Distance Transforms of Sampled Functions[<a href="http://cs.brown.edu/~pff/dt/" target="_blank">Project</a>]</li><li>The Computer Vision Homepage[<a href="http://www.cs.cmu.edu/~cil/vision.html" target="_blank">Project</a>]</li></ol><h3 id="一些实用工具">一些实用工具</h3><ol><li>EGT: a Toolbox for Multiple View Geometry and Visual Servoing[<a href="http://egt.dii.unisi.it/" target="_blank">Project</a>] [<a href="http://egt.dii.unisi.it/download/EGT_v1p3.zip" target="_blank">Code</a>]</li><li>a development kit of matlab mex functions for OpenCV library[<a href="http://www.cs.stonybrook.edu/~kyamagu/mexopencv/" target="_blank">Project</a>]</li><li>Fast Artificial Neural Network Library[<a href="http://leenissen.dk/fann/wp/" target="_blank">Project</a>]</li><li><a href="www.cvchina.info/2011/09/05/uiuc-cod/" rel="noopener noreffer">www.cvchina.info/2011/09/05/uiuc-cod/</a></li></ol></description></item><item><title>tornado 国际化实践</title><link/>https://justpic.org/post/2014/04/27/tornado-%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E8%B7%B5/<pubdate>Sun, 27 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/27/tornado-%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid><description><p>tornado i18n国际化</p><blockquote><p>i18n是国际化的简称（Internationalization,去掉开始的I和最后的N，中间一共18个字符）。
tornado中使用i18n,需要下面两个工具(pygettext,msgfmt)和两个相关文件（po文件和mo文件）</p></blockquote><h3 id="pygetext和msgfmt的使用方法">pygetext和msgfmt的使用方法</h3><ol><li><p>编写python代码文件 test.py</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">gettext</span><span class="kn">import</span><span class="n">gettext</span><span class="k">as</span><span class="n">_</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"well down"</span><span class="p">)</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"good"</span><span class="p">)</span></code></pre></td></tr></table></div></div></li><li><p>运行以下命令</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">pygetext test.py</code></pre></td></tr></table></div></div></li><li><p>生成messages.pot文件,更改文件后缀</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mv messages.pot messages.po</code></pre></td></tr></table></div></div></li><li><p>配置msgstr值<br/>
生成一个名为messages.mo文件：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">msgfmt messages.po<span class="c1">#建立目录locale/cn/LC_MESSAGES/</span>
mv messages.po locale/cn/LC_MESSAGES</code></pre></td></tr></table></div></div><p>cn目录是所对应的语言，LC_MESSAGES是gettext.py文件里要求的
mo文件必须和所定义的域同名
gettext.py中有
modfile=os.path.join(localedir,lang,‘LC_MESSAGES’,'%s.mo’ %domain)</p><p>测试：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$python</span>
&gt;&gt;&gt;gettext.install<span class="o">(</span><span class="s1">'messages'</span>,<span class="s1">'./locale'</span>,unicode<span class="o">=</span>True<span class="o">)</span></code></pre></td></tr></table></div></div><p>三个参数：</p><ul><li>作用域名:用于限定翻译文件的主名</li><li>路径:存放翻译文件的路径</li><li>unicode:是否使用unicode（如果应用程序是unicode的，此处应设为True)</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span><span class="n">gettext</span><span class="o">.</span><span class="n">translation</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span><span class="s1">'./locale'</span><span class="p">,</span><span class="n">languages</span><span class="o">=</span><span class="p">[</span><span class="s1">'cn'</span><span class="p">])</span><span class="o">.</span><span class="n">install</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span><span class="o">&gt;&gt;&gt;</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"good"</span><span class="p">)</span></code></pre></td></tr></table></div></div></li></ol><h3 id="tornado中的应用">tornado中的应用</h3><ol><li>运行以下命令<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$xgettext</span> -L python -k<span class="o">=</span>_ -o openquant.po<span class="k">$(</span>find . -name<span class="se">\*</span>.py<span class="k">)</span><span class="k">$(</span>find template/ -name<span class="se">\*</span>.html<span class="k">)</span></code></pre></td></tr></table></div></div></li><li>查找所有需要翻译的相关项生成 po 文件<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$msgfmt</span> openquant.po -o locale/zh_CN/LC_MESSAGES/openquant.mo</code></pre></td></tr></table></div></div></li></ol><p>完成mo文件的生成<br/>
4. 完成相关文件的生成后，需要在代码中加载:<code>tornado.locale.load_gettext_translations(options.I18N_PATH,"openquant")</code>
5. handler中自定义get_user_locale函数：
```
def get_user_locale(self):
#zh_CN or en_US
user_locale = self.get_cookie(“user_locale”)</p><pre><code> if user_locale:
return tornado.locale.get(user_locale)
return None
```</code></pre><hr/><p><em>参考</em></p><ul><li><a href="http://www.ylinux.org/imind/167" rel="noopener noreffer" target="_blank">iMind</a></li><li><a href="http://justbm.blogspot.com/2014/01/django.html" rel="noopener noreffer" target="_blank">django多国语言</a></li></ul></description></item><item><title>ubuntu上构建ios交叉编译环境</title><link/>https://justpic.org/post/2014/04/12/ubuntu-install-ios-llvm-chain/<pubdate>Sat, 12 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/12/ubuntu-install-ios-llvm-chain/</guid><description><p>ubuntu上构建ios交叉编译环境</p><h3 id="ubuntu-1204-安装llvm34ios-lang交叉编译环境">ubuntu 12.04 安装llvm3.4、ios-lang交叉编译环境</h3><p>在ubuntu 12.04上先安装gcc-4.8，然后安装llvm,clang,libcxx,libcxxabi.由于libcxx和libcxxabi相互依赖，需要两次安装libcxx。最后安装theos等开放的ios开发工具链<br/>
安装gcc-4.8如前文所述<a href="/2014/04/02/gcc-48-on-ubuntu/" rel="noopener noreffer">install gcc4.8 on ubuntu 12.04</a></p><h3 id="安装llvmclang">安装llvm,clang</h3><p>/etc/apt/sources.list中添加如下两行：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main
deb-src http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main</code></pre></td></tr></table></div></div><h3 id="检索签名">检索签名：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -</code></pre></td></tr></table></div></div><h3 id="安装与llvm-34clang-34相关的所有包">安装与llvm-3.4,clang-3.4相关的所有包：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">apt-get install clang-3.4 clang-3.4-doc libclang-common-3.4-dev libclang-3.4-dev libclang1-3.4 libclang1-3.4-dbg libllvm-3.4-ocaml-dev libllvm3.4 libllvm3.4-dbg lldb-3.4 llvm-3.4 llvm-3.4-dev llvm-3.4-doc llvm-3.4-examples llvm-3.4-runtime clang-modernize-3.4 clang-format-3.4 python-clang-3.4 lldb-3.4-dev</code></pre></td></tr></table></div></div><h3 id="安装libcxx">安装libcxx：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx</code></pre></td></tr></table></div></div><h3 id="查看g使用的头文件">查看g++使用的头文件:</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">echo | g++ -Wp,-v -x c++ - -fsyntax-only</code></pre></td></tr></table></div></div><h3 id="将会输出类似如下结果">将会输出类似如下结果：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"
ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux- gnu/4.8/../../../../x86_64-linux-gnu/include"
### #include "..." search starts here:
### include &lt;...&gt; search starts here:
/usr/include/c++/4.8
/usr/include/c++/4.8/x86_64-linux-gnu
/usr/include/c++/4.8/backward
/usr/lib/gcc/x86_64-linux-gnu/4.8/include
/usr/local/include
/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed
/usr/include/x86_64-linux-gnu
/usr/include
End of search list.</code></pre></td></tr></table></div></div><h3 id="编译安装libcxx">编译安装libcxx：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DLIBCXX_CXX_ABI=libsupc++ - DLIBCXX_LIBSUPCXX_INCLUDE_PATHS="/usr/include/c++/4.7/;/usr/include/x86_64-linux- gnu/c++/4.7/" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr &lt;libc++-source-dir&gt;
make
sudo make install</code></pre></td></tr></table></div></div><h3 id="安装libcxxabi">安装libcxxabi</h3><p>首先安装相关依赖：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install g++ subversion cmake swig python-dev libedit-dev libunwind8 libunwind8-dev</code></pre></td></tr></table></div></div><h3 id="下载源码并编译">下载源码并编译：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi
cd libcxxabi/lib
./buildit
sudo cp libc++abi.so.1.0 /usr/lib
sudo ln -s /usr/lib/libc++abi.so.1.0 /usr/lib/libc++abi.so.1
sudo ln -s /usr/lib/libc++abi.so.1 /usr/lib/libc++abi.so</code></pre></td></tr></table></div></div><h3 id="使用libcabi来安装libc">使用libc++abi来安装libc++</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
cd libcxx
mkdir build
cd build
CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DLIBCXX_CXX_ABI=libcxxabi - DLIBCXX_LIBCXXABI_INCLUDE_PATHS="&lt;libc++abi-source-dir&gt;/include" - DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install</code></pre></td></tr></table></div></div><p>至此ubuntu 12.04上的LLVM环境就算搭建好了。</p></description></item><item><title>MySQL使用总结</title><link/>https://justpic.org/post/2014/04/04/mysql%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/<pubdate>Fri, 04 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/04/mysql%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid><description><p>MySQL使用总结</p><h3 id="mysql创建数据库">Mysql创建数据库</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">create database sina default character set utf8mb4 collate utf8mb4_unicode_ci;
ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></td></tr></table></div></div><blockquote><p>使用utf8mb4而不是utf8 ，应为utf8的长度不确定，utf8编码占用3个字节，utf8mb4能保证长度的够用， 5.5.3 版本以后的mysql版本开始支持utf8mb4</p></blockquote><h3 id="mysql导入导出">Mysql导入导出</h3><ol><li><p>导出所有库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysqldump -uusername -ppassword --all-databases&gt;all.sql</code></pre></td></tr></table></div></div></li><li><p>导入所有库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt;source all.sql;</code></pre></td></tr></table></div></div></li><li><p>导出某些库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysqldump -uusername -ppassword --databases db1 db2 &gt;db1db2.sql</code></pre></td></tr></table></div></div></li><li><p>导入某些库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt;source db1db2.sql</code></pre></td></tr></table></div></div></li><li><p>导入某个库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql -uusername -ppassword db1&lt;db1.sql; mysql&gt;source db1.sql;</code></pre></td></tr></table></div></div></li><li><p>导出某个库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysqldump -uusername -ppassword db1 table1 table2&gt;tb1tb2.sql</code></pre></td></tr></table></div></div></li><li><p>导入某些数据表</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql -uusername -ppassword db1&lt;tb1tb2.sql
mysql&gt;user db1;
mysql&gt;source tb1tb2.sql;</code></pre></td></tr></table></div></div></li><li><p>mysqldump字符集设置</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$mysqldump -uusername -ppassword --default-character-set=utf-8 db1 table1&gt;tb1.sql</code></pre></td></tr></table></div></div></li></ol><h3 id="mysql用户管理">Mysql用户管理</h3><ol><li>创建用户<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt; insert into mysql.user(Host,User,Password) values("localhost","phplamp",password("1234"));
mysql&gt;grant all privileges on *.* to jee@localhost identified by ‘123′；</code></pre></td></tr></table></div></div></li><li>修改用户密码<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt; UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;
mysql&gt; FLUSH PRIVILEGES;</code></pre></td></tr></table></div></div></li><li>显示当前用户<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">mysql&gt;select USER<span class="o">()</span><span class="p">;</span></code></pre></td></tr></table></div></div></li></ol><h3 id="mysql大小写敏感配置">mysql大小写敏感配置</h3><ol><li>查看<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">show global variables like<span class="s1">'%lower_case%'</span></code></pre></td></tr></table></div></div></li><li>配置<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#0-大小写敏感，1-不敏感（先把表名转为小写，再执行操作）。</span><span class="nv">low_case_table_names</span><span class="o">=</span><span class="m">0</span><span class="nv">或lower_low_case_table_names_low_case_table_names</span><span class="o">=</span><span class="m">1</span><span class="c1">#my.cnf文件下</span></code></pre></td></tr></table></div></div></li></ol><h3 id="mysql启用远程">Mysql启用远程</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">cd /etc/mysql
vi my.cnf #注释bind-address
mysql -uusername -ppassword #进入到mysql
grant all privileges on *.* to username@'deniedhost' identified by 'password';
GRANT ALL PRIVILEGES ON *.* TO user_name@'%' IDENTIFIED BY ‘pass_word’; #if dynamic ip
flush privileges;
quit;</code></pre></td></tr></table></div></div><h3 id="mysql-主从复制">Mysql 主从复制</h3><ul><li>mysql复制的用途:</li></ul><ul><li>读取扩展</li><li>主备份服务器</li><li>故障转移服务器</li><li>地理空间冗余</li><li>数据仓库</li><li>基准测试</li><li>软件更新</li><li>复制配置(my.cnf):</li><li>主服务器配置(Alpha)</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">[mysqld]
log-bin=binary-log #log-bin参数启动二进制日志.二进制日志在MySQL环境中提供了多种用途.它为MySQL复制提供了DDL和DML语句流,能够重新应用于复制的从服务器.
server-id=1
重新启动MySQL后 ,使用SQL命令show master status;进行验证.(对于配置复制的从服务器是必要的)
从服务器配置(Beta)
[mysqld]
server-id=2
read_only=TRUE
show slave status;
change master to
MASTER_HOST='192.168.100.1',#主服务器上的用户名和密码
MASTER_USER='rep1',
MASTER_PASSWORD='rep12009';
change master to
MASTER_LOG_FILE='binary-log.00001',#主服务器上运行show
master status命令所检索到的日志文件名称和位置.
MASTER_LOG_POS=106;
slave start;#启动从服务器验证其操作
show slave status;#Slave_IO_Running和Slave_SQL_Running的值为Yes,就证明"主服务器-从服务器"式的MySQL拓扑已经正常运行.</code></pre></td></tr></table></div></div><h3 id="测试mysql复制">测试MySQL复制</h3><p>在alpha上测试下面的代码:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">PROMPT alpha&gt;;
alpha&gt;</code></pre></td></tr></table></div></div><p>确认从服务器上什么都不存在:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">beta&gt; show schemas;</code></pre></td></tr></table></div></div><h3 id="mysql-创建视图">Mysql 创建视图</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">create view v as select * from table;
create view v as select id,name,age from table;
create view v[vid,vname,vage] as select id,name,age from table;</code></pre></td></tr></table></div></div><h3 id="ubuntu-mysql57解决不用密码也能登陆">ubuntu mysql5.7解决不用密码也能登陆:</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">登录mysql    mysql -u root -p 或 mysql
use mysql;
update user set authentication_string=PASSWORD("密码") where user='root';
update user set plugin="mysql_native_password";
flush privileges;
quit;
/etc/init.d/mysql restart;
mysql -u root -p 密码;</code></pre></td></tr></table></div></div><h3 id="onwherehaving的区别">on,where,having的区别</h3><blockquote><p>on,where,having这三个都可以加条件的子句中,on是最先执行,where次之,having最后.有时候如果这先后顺序不影响中间结果的话,那最终结果是相同的.但因为on是先把不符合条件的记录过滤后才进行统计,它就可以减少中间运算要处理的数据,按理说应该速度是最快的.
根据上面的分析,可以知道where应该比having快一点,应为它过滤数据后才进行sum,所以having是最慢的.但也不是说having没用,因为有时在步骤三还没有出来都不知道那个记录才符合要求时,就要用having了.
left join加上where 条件<br/>
用where是先连接然后再筛选<br/>
用and是先筛选再连接<br/>
数据库范式:<br/>
第一范式:强调的是列的原子性.<br/>
第二范式:首先使1NF,另外包含两部分内容,一是表必须有一个主键;二是没有包含在主键中的列必须完全依赖于主键,而不能只依赖于主键的一部分.<br/>
第三范式:首先是2NF,另外非主键列必须直接依赖于主键,不能存在传递依赖.即不能存在:非主键列A依赖于非主键列B,非主键列B依赖于主键的情况.</p></blockquote><h2 id="查询优化">查询优化</h2><ol><li>jvm调优，内存结构</li><li>内存碎片问题<br/>
MajorGC是清理老年代
MinorGC是从年轻代空间（包括Eden和Survivor区域）回收内存。
FullGC是清理整个堆空间包括年轻代和老年代。</li><li>mysql执行计划，查询慢</li></ol><ul><li>MySQL查询优化：</li><li>查询性能衡量标准<ul><li>查询时间</li><li>慢查询（几乎所有大道秒级别的查询都可以认为比较慢）</li><li>执行计划<ul><li>type查询的方式</li><li>key使用的索引</li><li>Rows结果集大小</li><li>Extra提示信息</li></ul></li></ul></li><li>影响查询性能的因素<ul><li>SQL解析时间#使用prepared stmt语句减少重复SQL的解析</li><li>查询优化算法<ul><li>执行计划分析</li><li>索引优化<ul><li>表优化（建主键unsigned int）</li><li>表优化（字段尽量使用NOT NULL）</li><li>表优化（能使用enum的尽量不要使用varchar）</li><li>表优化（ip字段使用unsigned int并使用INET_NTOA和INET_ATON)</li><li>索引优化（为频繁搜索的字段建立索引）</li><li>索引优化（为varchar text建立全文索引，避免使用 like)</li><li>索引优化（避免使用blob字段，该字段只能建立前缀索引）</li><li>索引优化（最多匹配原则和最高区分度原则）</li></ul></li><li>查询优化<ul><li>索引字段不参与计算，否则索引失效</li><li>避免使用 select*，select count(*)等</li><li>知道结果数量的使用，使用limit，尽早结果过程。</li></ul></li></ul></li></ul></li><li>Query Cache的使用#关了吧<ul><li>磁盘IO次数#IO优化，增大buffer pool，开取MRR，避免select *</li><li>事务键锁的影响#锁优化：避免使用大事务，RC比RR好，不适用GAP锁，避免使用select *，可能会锁权标</li></ul></li><li>join优化#利用index nexted-loop join算法，在没有索引的情况下，合理设置join_buffer_size.</li><li>走索引OR全表扫描</li><li>结果集大小与运算过程</li><li>查询计划分析</li><li>查询优化技巧<br/><strong>MySQL执行计划</strong></li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> 语法：
EXPLAIN select ...
变体：
1.将执行计划“反翻译”成SELECT 语句，运行show warnings 可得到MySQL优化器优化后的查询语句
EXPLAIN EXTENDED select ...
2.用于分区表的EXPLAIN
EXPLAIN PARTITIONS SELECT ...</code></pre></td></tr></table></div></div><p>执行计划包含的信息</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> id:包含一组数字，标识查询语句中执行SELECT子句或者操作表的顺序。id相同，执行顺序由上至下。若是子查询，id序号递增，id值越大优先级越高，越会被执行
select_type:表示每个select子句的类型（简单或复杂）
SIMPLE：查询中不包含子查询或者UNION
PRIMARY：查询中包含任何复杂的子部分，最外层查询则被标记为该类型
SUBQUERY:在SELECT或where列表中包含了子查询，该子查询就被标记为SUBQUERY
DERIVED：在FROM列表中包含的子查询被标记为DERIVED（衍生）
UNION：若第二个SELECT出现在UNION之后，则被标记为UNION
UNION RESULT：从UNION表获取结果的SELECT被标记为UNION RESULT
type：标识MySQL在表中找到所需行的方式，又称为“访问类型”
这列很重要,显示了连接使用了哪种类别,有无使用索引.</code></pre></td></tr></table></div></div><p>从最好到最差的连接类型为const、eq_reg、ref、range、index和AL
mysql explain用法和结果的含义：https://www.cnblogs.com/yycc/p/7338894.html
MYSQL 5.6.3以前只能EXPLAIN SELECT; MYSQL5.6.3以后就可以EXPLAIN SELECT,UPDATE,DELETE</p><p><strong>不走索引情况</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">select * tb1 where name like ‘%comnn’ %再在前不走索引
select * tb1 where reverse（name） = ‘xu’ 条件出现函数运算不走索引
使用 or 不走索引 特别的： 当or条件中有 未 建立索引的列，会走索引
数据类型不一致 select * tb1 where name = 0999
！= 特别的： 如果是主键 索引生效
&gt; 特别的： 如果是主键 或者索引是int类型 索引生效
order by
选择的映射是索引才生效 特别的： 如果是主键 索引生效</code></pre></td></tr></table></div></div><hr/><p>参考<br/><a href="http://stackoverflow.com/questions/16995616/monogodb-service-cannot-start-after-storage-extension-under-ubuntu-12-04" rel="noopener noreffer" target="_blank">无法启动mongodb的解决方法</a><br/><a href="http://supportcenter.verio.com/KB/questions.php?questionid=494" rel="noopener noreffer" target="_blank">启用远程mysql</a></p></description></item><item><title>ubuntu上安装gcc</title><link/>https://justpic.org/post/2014/04/02/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85gcc/<pubdate>Wed, 02 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/02/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85gcc/</guid><description><p>命令行中输入以下命令安装相关包</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo add-apt-repository ppa:boost-latest/ppa
sudo apt-get update
sudo apt-get install libboost1.55-all-dev
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install gcc-4.8 g++-4.8
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.6
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
sudo update-alternatives --config gcc</code></pre></td></tr></table></div></div><p>安装完gcc-4.8后即可安装llvm-3.4 参考<a href="" rel="noopener noreffer">llvm/apt</a><br/>
下载<a href="" rel="noopener noreffer">osxcross</a><br/>
编译若出现错误： fatal error:limits can’t find?<br/>
使用以下命令进行修正</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$echo '#include &lt;limits.h&gt;' | clang -v -xc -o /dev/null -</code></pre></td></tr></table></div></div><p>使用上述命令排错，依依对照toolchain查找的include顺序，修改include链接，即可解决问题
其实这是一个llvm的bug<br/>
临时解决方案</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> $cd /usr/lib/clang/&lt;clang-version/
$sudo ln -sf ../../llvm-3.4/lib/clang/&lt;clang-version&gt;/include include</code></pre></td></tr></table></div></div><p>再次编译可以通过。
一个查找文件的有用命令:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> $grep notification `find ./*`</code></pre></td></tr></table></div></div><hr/><p>参考：<br/><a href="https://bugs.launchpad.net/ubuntu/+source/llvm-defaults/+bug/1242300" rel="noopener noreffer" target="_blank">https://bugs.launchpad.net/ubuntu/+source/llvm-defaults/+bug/1242300</a>
:</p></description></item><item><title>Ubuntu Server安装World Community Grid</title><link/>https://justpic.org/post/2013/11/19/ubuntu-install-wcg/<pubdate>Tue, 19 Nov 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/11/19/ubuntu-install-wcg/</guid><description><p>Ubuntu Server安装World Community Grid</p><h2 id="在ubuntu上安装boinc">在ubuntu上安装BOINC</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get aptitude install boinc-client</code></pre></td></tr></table></div></div><p>(you can also download it from wcg and install)</p><p>find your account key:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">boinccmd --lookup_account http://www.worldcommunitygrid.org username password</code></pre></td></tr></table></div></div><p>You should get a response something like this
dfb74c9b9…</p><p>attach to your project</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">boinccmd --project_attach http://www.worldcommunitygrid.org dfb74c....</code></pre></td></tr></table></div></div><p>if you want to verify your attached enter the following command:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">boinccmd --get_state</code></pre></td></tr></table></div></div><h3 id="更多资源">更多资源:</h3><p><a href="http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu" rel="noopener noreffer" target="_blank">http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu</a><br/><a href="http://boinc.berkeley.edu/wiki/Client_configuration" rel="noopener noreffer" target="_blank">http://boinc.berkeley.edu/wiki/Client_configuration</a><br/><a href="http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC" rel="noopener noreffer" target="_blank">http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC</a></p><h3 id="参考">参考:</h3><p><a href="http://blog.joelchristian.com/?p=291" rel="noopener noreffer" target="_blank">http://blog.joelchristian.com/?p=291</a><br/><a href="http://misctechmusings.com/linux/boinc-cli-for-world-community-grid/" rel="noopener noreffer" target="_blank">http://misctechmusings.com/linux/boinc-cli-for-world-community-grid/</a></p></description></item><item><title>网站部署记录</title><link/>https://justpic.org/post/2013/10/27/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/<pubdate>Sun, 27 Oct 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/10/27/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</guid><description><p>网站部署记录</p><p>安装基础python环境</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install nginx
sudo apt-get install git
sudo apt-get install mysql-server
sudo apt-get install python-dev
install easy_install on ubuntu:
sudo apt-get install python-setuptools
sudo easy_install virtualenv
sudo easy_install pip
virtualenv ~/trade
source ~/trade/bin/activate
install numpy scipy pandas and ta-lib
sudo pip install Cython</code></pre></td></tr></table></div></div><p><strong>安装 blas libs</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install gfortran libopenblas-dev liblapack-dev g++
pip install numpy
pip install scipy</code></pre></td></tr></table></div></div><p><strong>安装 ta-lib</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">cd ~
wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
sudo apt-get install build-essential
tar -zxvf ta-lib-0.4.0-src.tar.gz
cd ta-lib-0.4.0
./configure --prefix=/usr
make
sudo make install</code></pre></td></tr></table></div></div><p><strong>安装 gevent</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
tar -zxvf
./configure
make
sudo make install
cd ~/www
git clone https://github.com/pydata/pandas.git
git clone https://github.com/mrjbq7/ta-lib.git</code></pre></td></tr></table></div></div><p><strong>update the nginx</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo apt-get install sotware-properties-common
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx</code></pre></td></tr></table></div></div><p><strong>mysql init</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install mysql-server libmysqld-dev
pip install MySQL-python
insert into mysql.user(Host,User,Password) values("localhost","username",password("password"));</code></pre></td></tr></table></div></div><p><strong>用户授权</strong><br/>
给本地用户mql分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123456。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt;grant all privileges on *.* to username@localhost identified by 'password';</code></pre></td></tr></table></div></div><p><strong>安装 redis</strong><br/>
具体参考<a href="http://rubyer.me/blog/638/redis.io" rel="noopener noreffer" target="_blank">install redis</a></p><p><strong>安装uwsgi 或者 gunicorn(可选)</strong></p></description></item><item><title>ubuntu系统安装numpy和scipy</title><link/>https://justpic.org/post/2013/10/18/ubuntu-install-numpy-scipy/<pubdate>Fri, 18 Oct 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/10/18/ubuntu-install-numpy-scipy/</guid><description><p>ubuntu系统安装numpy和scipy</p><h2 id="linux上安装numpy-scipy">linux上安装numpy scipy</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo pip install numpy
sudo apt-get install libatlas-base-dev gfortran
sudo pip install scipy
sudo pip install matplotlib # recommended</code></pre></td></tr></table></div></div></description></item><item><title>sqlalchemy动态映射</title><link/>https://justpic.org/post/2013/07/26/django-sqlalchemy-mapping/<pubdate>Fri, 26 Jul 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/26/django-sqlalchemy-mapping/</guid><description><p>django中使用sqlalchemy进行动态映射</p><h1 id="sqlalchemy动态映射">sqlalchemy动态映射</h1><p>代码如下:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> from sqlalchemy import *
from sqlalchemy.orm import *
metadata=MetaData(create_engine("sqlite://",echo=True)
t1=Table("t1",metadata,Column('id',Integer,primary_key=True))
t2=Table("t2",metadata,Column("id",Integer,primary_key=True))
metadata.create_all()
def map_class_to_some_table(cls,table,entity_name,**kw):
newcls=type(entity_name,(cls,),{})
mapper(newcls,table,**kw)
return newcls
class Foo(object):
pass
T1Foo=map_class_to_some_table(Foo,t1,"T1Foo")
T2Foo=map_class_to_some_table(Foo,t2,"T2Foo")
sess=sessionmaker()()
sess.add_all([T1Foo(),T1Foo(),T2Foo(),T1Foo()])
print sess.query(T1Foo).all()
print sess.query(T2Foo).all()</code></pre></td></tr></table></div></div></description></item><item><title>使用python进行异步网络编程</title><link/>https://justpic.org/post/2013/07/15/python-async-programming/<pubdate>Mon, 15 Jul 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/15/python-async-programming/</guid><description><p>python异步网络编程初探</p><h2 id="使用python进行selectpollepoll-测试">使用python进行select,poll,epoll 测试</h2><h3 id="select测试">select测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># selecttest.py</span><span class="kn">import</span><span class="nn">select</span><span class="kn">import</span><span class="nn">socket</span><span class="kn">import</span><span class="nn">Queue</span><span class="c1">#create a socket</span><span class="n">server</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span><span class="c1">#set option reused</span><span class="n">server</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="n">server_address</span><span class="o">=</span><span class="p">(</span><span class="s1">'localhost'</span><span class="p">,</span><span class="mi">10001</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">server_address</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="c1">#sockets from which we except to read</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">server</span><span class="p">]</span><span class="c1">#sockets from which we expect to write</span><span class="n">outputs</span><span class="o">=</span><span class="p">[]</span><span class="c1">#Outgoing message queues (socket:Queue)</span><span class="n">message_queues</span><span class="o">=</span><span class="p">{}</span><span class="c1">#A optional parameter for select is TIMEOUT</span><span class="n">timeout</span><span class="o">=</span><span class="mi">20</span><span class="k">while</span><span class="n">inputs</span><span class="p">:</span><span class="k">print</span><span class="s2">"waiting for next event"</span><span class="c1">#first parameter--read list,second parameter--write list,third parameter--error list</span><span class="n">readable</span><span class="p">,</span><span class="n">writable</span><span class="p">,</span><span class="n">exceptional</span><span class="o">=</span><span class="n">select</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span><span class="n">outputs</span><span class="p">,</span><span class="n">inputs</span><span class="p">,</span><span class="n">timeout</span><span class="p">)</span><span class="c1">#when timeout reached,select return three empty list</span><span class="k">if</span><span class="ow">not</span><span class="p">(</span><span class="n">readable</span><span class="ow">or</span><span class="n">writable</span><span class="ow">or</span><span class="n">exceptional</span><span class="p">):</span><span class="k">print</span><span class="s2">"Time out!"</span><span class="k">break</span><span class="p">;</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">readable</span><span class="p">:</span><span class="k">if</span><span class="n">s</span><span class="ow">is</span><span class="n">server</span><span class="p">:</span><span class="c1">#A "readable" socket is ready to accept a connection</span><span class="n">connection</span><span class="p">,</span><span class="n">client_address</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="k">print</span><span class="s2">" connection from"</span><span class="p">,</span><span class="n">client_address</span><span class="n">connection</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span><span class="n">message_queues</span><span class="p">[</span><span class="n">connection</span><span class="p">]</span><span class="o">=</span><span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span><span class="k">else</span><span class="p">:</span><span class="n">data</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="k">if</span><span class="n">data</span><span class="p">:</span><span class="k">print</span><span class="s2">"received "</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="s2">"from "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="c1">#Add output channel for response</span><span class="k">if</span><span class="n">s</span><span class="ow">not</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="c1">#Interpret empty result as closed connection</span><span class="k">print</span><span class="s2">" closing"</span><span class="p">,</span><span class="n">client_address</span><span class="k">if</span><span class="n">s</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">inputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="c1">#remove message queue</span><span class="k">del</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">writable</span><span class="p">:</span><span class="k">try</span><span class="p">:</span><span class="n">next_msg</span><span class="o">=</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">get_nowait</span><span class="p">()</span><span class="k">except</span><span class="n">Queue</span><span class="o">.</span><span class="n">Empty</span><span class="p">:</span><span class="k">print</span><span class="s2">" "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">,</span><span class="s2">" queue empty"</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="k">print</span><span class="s2">"sending "</span><span class="p">,</span><span class="n">next_msg</span><span class="p">,</span><span class="s2">" to"</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">next_msg</span><span class="p">)</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">exceptional</span><span class="p">:</span><span class="k">print</span><span class="s2">" exception condition on "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="c1">#stop listening for input on the connection</span><span class="n">inputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">if</span><span class="n">s</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="c1">#Remove message queue</span></code></pre></td></tr></table></div></div><h3 id="poll测试">poll测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket
import select
import Queue
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.setblocking(False)
server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
server_address=("localhost",10001)
print "Starting up on %s port %s" % server_address
server.bind(server_address)
server.listen(5)
message_queues={}
#The timeout value is represente in milliseconds,instead of seconds
timeout=100
#Create a limit for the next
READ_ONLY=(select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR)
READ_WRITE=(READ_ONLY|select.POLLOUT)
#set up the poller
poller=select.poll()
poller.register(server,READ_ONLY)
#map file descriptors to socket objects
fd_to_socket={server.fileno():server,}
while True:
print "Waiting for the next event"
events=poller.poll(timeout)
print "*"*20
print len(events)
print events
print "*"*20
for fd,flag in events:
s=fd_to_socket[fd]
if flag &amp; (select.POLLIN|select.POLLPRI):
if s is server:
#A readable socket is ready to accept a connection
connection,client_address=s.accept()
print "Connection ",client_address
connection.setblocking(False)
fd_to_socket[connection.fileno()]=connection
poller.register(connection,READ_ONLY)
#Give the connection a queue to send data
message_queues[connection]=Queue.Queue
else:
data=s.recv(1024)
if data:
# A readable client socket has data
print " received %s from %s " % (data,s.getpeername())
message_queues[s].put(data)
poller.modify(s,READ_WRITE)
else:
#Close the connection
print " closing ",s.getpeername()
#Stop listening for input on the connection
poller.unregister(s)
s.close()
del message_queues[s]
elif flag &amp; select.POLLHUP:
#A client that "Hang up",to be closed.
print "closing ",s.getpeername,"(HUP)"
poller.unregister(s)
s.close()
elif flag &amp; select.POLLOUT:
#SOCKET is ready to send DATA,if there is any to send
try:
next_msg=message_queues[s].get_nowait()
except Queue.Empty:
#No messages waiting so stop checking
print s.getpeername," queue empty"
poller.modify(s,READ_ONLY)
else:
print " sending %s to %s" %(next_msg,s.getpeername())
s.send(next_msg)
elif flag &amp; select.POLLERR:
#Any events with POLLER cause the server to close the sockets
print " exception on",s.getpeername()
poller.unregister(s)
s.close()
del message_queues[s]</code></pre></td></tr></table></div></div><h3 id="epoll测试">epoll测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span><span class="lnt">82</span><span class="lnt">83</span><span class="lnt">84</span><span class="lnt">85</span><span class="lnt">86</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket,logging
import select,errno
logger=logging.getLogger("network-server")
def InitLog():
logger.setLevel(logging.DEBUG)
fh=logging.FileHandler("network-server.log")
fh.setLevel(logging.DEBUG)
ch=logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -%(message)s")
ch.setFormatter(formatter)
fh.setFormatter(formatter)
logger.addHandler(fh)
logger.addHandler(ch)
if __name__=="__main__":
InitLog()
try:
listen_fd=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
except socket.error,msg:
logger.error("create a socket failed")
try:
listen_fd.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
except socket.error,msg:
logger.error("setsocketopt error")
try:
listen_fd.bind(('',10001))
except socket.error,msg:
logger.error("listen file id bind ip error")
try:
listen_fd.listen(10)
except socket.error,msg:
logger.error(msg)
try:
epoll_fd=select.epoll()
epoll_fd.register(listen_fd.fileno(),select.EPOLLIN)
except select.error,msg:
logger.error(msg)
connections={}
addresses={}
datalist={}
while True:
epoll_list = epoll_fd.poll()
for fd,events in epoll_list:
if fd==listen_fd.fileno():
conn,addr=listen_fd.accept()
logger.debug("accept connction from %s,%d,fd = %d" %(addr[0],addr[1],conn.fileno()))
conn.setblocking(0)
epoll_fd.register(conn.fileno(),select.EPOLLIN|select.EPOLLET)
connections[conn.fileno()]=conn
addresses[conn.fileno()]=addr
elif select.EPOLLIN &amp; events:
datas=''
while True:
try:
data=connections[fd].recv(10)
if not data and not datas:
epoll_fd.unregister(fd)
connections[fd].close()
logger.debug("%s,%d closed" % (addresses[fd][0],addresses[fd][1]))
break
else:
datas+=data
except socket.error,msg:
if msg.errno==errno.EAGAIN:
logger.debug("%s receive %s" % (fd,datas))
datalist[fd]=datas
epoll_fd.modify(fd,select.EPOLLET|select.EPOLLOUT)
break
else:
epoll_fd.unregister(fd)
connections[fd].close()
logger.error(msg)
break
elif select.EPOLLHUP &amp; events:
epoll_fd.unregister(fd)
connections[fd].close()
logger.debug("%s ,%d closed" % (addresses[fd][0],addresses[fd][1]))
elif select.EPOLLOUT &amp; events:
sendLen=0
while True:
sendLen += connections[fd].send(datalist[fd][sendLen:])
if sendLen == len(datalist[fd]):
break
epoll_fd.modify(fd,select.EPOLLIN|select.EPOLLET)
else:
continue</code></pre></td></tr></table></div></div><h1 id="commontestpyclient-code">commontest.py(client code)</h1><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket
messages = ["This is the message",
"It will be send",
"in parts"]
print "Connect to the server"
server_address=("localhost",10001)
#Create a TCP/IP sock
socks=[]
for i in range(10):
socks.append(socket.socket(socket.AF_INET,socket.SOCK_STREAM))
for s in socks:
s.connect(server_address)
counter=0
for message in messages:
for s in socks:
counter+=1
print " %s sending %s "%(s.getpeername(),message+" version "+str(counter))
s.send(message+" version "+str(counter))
for s in socks:
data=s.recv(1024)
print " %s received %s " % (s.getpeername(),data)
if not data:
print "closing socket",s.getpeername()
s.close()</code></pre></td></tr></table></div></div><hr/><p>参考<br/><a href="scotdoyle.com/python-epoll-howto.html" rel="noopener noreffer">epoll的使用</a><br/><a href="blog.csdn.net/livefun/article/details/8721772" rel="noopener noreffer">asyncore的介绍和使用-blog1</a><br/><a href="http://www.nightmare.com/medusa/async_sockets.html" rel="noopener noreffer" target="_blank">asyncore的介绍和使用-blog2</a><br/><a href="https://mp.weixin.qq.com/s/dbZE-zml38WRgiUwGfEoEw" rel="noopener noreffer" target="_blank">unix网络编程io模型</a></p></description></item><item><title>ubuntu系统上安装多版本python语言环境</title><link/>https://justpic.org/post/2013/07/02/ubuntu-install-multi-python/<pubdate>Tue, 02 Jul 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/02/ubuntu-install-multi-python/</guid><description><p>ubuntu系统上安装多版本python语言环境</p><h3 id="ubuntu上安装多个版本的python">ubuntu上安装多个版本的python</h3><ol><li>安装python3.3在ubuntu上</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python3.3</code></pre></td></tr></table></div></div><ol start="2"><li>建立软链接：</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /usr/bin/python3.3 /usr/bin/python3.3m</code></pre></td></tr></table></div></div><ol start="3"><li>安转python2.7.5再ubuntu上:</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python2.4 python2.5 python2.6</code></pre></td></tr></table></div></div><ol start="4"><li>使用virtualenv来定制自己的环境</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">virtualenv -p /usr/bin/python3.3 python3.3env
virtualenv -p /usr/bin/python2.7.5 python2.7.5env</code></pre></td></tr></table></div></div><p>Ok!</p></description></item><item><title>ubuntu上安装hdf5</title><link/>https://justpic.org/post/2013/06/05/ubuntu-install-hdf5/<pubdate>Wed, 05 Jun 2013 11:11:11 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/06/05/ubuntu-install-hdf5/</guid><description><p>ubuntu系统上安装hdf5</p><h3 id="install-hdf5-on-ubuntu-1204">install hdf5 on ubuntu 12.04</h3><p>1.you can probably install the debian libraries into quantal with no issues, precise is less likely to work, but it might possibly you will have to build it from source to get everything right.<br/>
Code:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$apt-get install devscripts equivs ubuntu-dev-tools
$pull-debian-source hdf5 experimental
$cd hdf5-*
$sudo mk-build-deps -ir
$debuild -us -uc</code></pre></td></tr></table></div></div><p>2.上述方法现在已经不适用,Google后发现,可以直接使用hdf5二进制包,由于本机为64bit linux,下载64位下的二进制包:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.9/bin/linux-x86_64/hdf5-1.8.9-linux-x86_64-shared.tar.gz</code></pre></td></tr></table></div></div><ol start="3"><li>解压后，并在.bashrc中设置：</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/hdf5-1.8.9-linux-x86_64-shared/lib
$export HDF5_DIR=$HOME/hdf5-1.8.9-linux-x86_64-shared
$source .bashrc</code></pre></td></tr></table></div></div><p>4.安装 blosc (可选)<br/>
5.安装 lzo2-2 lzo2-dev</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install lzo2-2 lzo2-dev</code></pre></td></tr></table></div></div><p>至此HDF5可用</p></description></item></channel></rss><script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script><script>
const _do_decrypt = function(encrypted, password) {
  let key = CryptoJS.enc.Utf8.parse(password);
  let iv = CryptoJS.enc.Utf8.parse(password.substr(16));
  let decrypted_data = CryptoJS.AES.decrypt(encrypted, key, {
    iv: iv,
    mode: CryptoJS.mode.CBC,
    padding: CryptoJS.pad.Pkcs7
  });
  return decrypted_data.toString(CryptoJS.enc.Utf8);
};
const _click_handler = function(element) {
  let parent = element.parentNode.parentNode;
  let encrypted = parent.querySelector(
    ".hugo-encryptor-cipher-text").innerText;
  let password = parent.querySelector(
    ".hugo-encryptor-input").value;
  password = CryptoJS.MD5(password).toString();
  let index = -1;
  let elements = document.querySelectorAll(
    ".hugo-encryptor-container");
  for (index = 0; index < elements.length; ++index) {
    if (elements[index].isSameNode(parent)) {
      break;
    }
  }
  let decrypted = "";
  try {
    decrypted = _do_decrypt(encrypted, password);
  } catch (err) {
    console.error(err);
    alert("Failed to decrypt.");
    return;
  }
  if (!decrypted.includes("--- DON'T MODIFY THIS LINE ---")) {
    alert("Incorrect password.");
    return;
  }
  let storage = localStorage;
  let key = location.pathname + ".password." + index;
  storage.setItem(key, password);
  parent.innerHTML = decrypted;
}
window.onload = () => {
  let index = -1;
  let elements = document.querySelectorAll(
    ".hugo-encryptor-container");
  while (1) {
    ++index;
    let key = location.pathname + ".password." + index;
    let password = localStorage.getItem(key);
    if (!password) {
      break;
    } else {
      console.log("Found password for part " + index);
      let parent = elements[index];
      let encrypted = parent.querySelector(".hugo-encryptor-cipher-text").innerText;
      let decrypted = _do_decrypt(encrypted, password);
      elements[index].innerHTML = decrypted;
    }
  }
};</script></body></html>