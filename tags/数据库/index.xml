<html><body><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据库 on 桑河一榆</title><link/>https://justpic.org/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/<description>Recent content in 数据库 on 桑河一榆</description><generator>justpic</generator><language>zh-CN</language><managingeditor>matrix.orz@gmail.com (justpic)</managingeditor><webmaster>matrix.orz@gmail.com (justpic)</webmaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastbuilddate>Fri, 04 Apr 2014 00:00:00 +0000</lastbuilddate><atom:link href="https://justpic.org/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml"></atom:link><item><title>MySQL使用总结</title><link/>https://justpic.org/post/2014/04/04/mysql%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/<pubdate>Fri, 04 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/04/mysql%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid><description><p>MySQL使用总结</p><h3 id="mysql创建数据库">Mysql创建数据库</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">create database sina default character set utf8mb4 collate utf8mb4_unicode_ci;
ALTER DATABASE db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code></pre></td></tr></table></div></div><blockquote><p>使用utf8mb4而不是utf8 ，应为utf8的长度不确定，utf8编码占用3个字节，utf8mb4能保证长度的够用， 5.5.3 版本以后的mysql版本开始支持utf8mb4</p></blockquote><h3 id="mysql导入导出">Mysql导入导出</h3><ol><li><p>导出所有库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysqldump -uusername -ppassword --all-databases&gt;all.sql</code></pre></td></tr></table></div></div></li><li><p>导入所有库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt;source all.sql;</code></pre></td></tr></table></div></div></li><li><p>导出某些库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysqldump -uusername -ppassword --databases db1 db2 &gt;db1db2.sql</code></pre></td></tr></table></div></div></li><li><p>导入某些库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt;source db1db2.sql</code></pre></td></tr></table></div></div></li><li><p>导入某个库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql -uusername -ppassword db1&lt;db1.sql; mysql&gt;source db1.sql;</code></pre></td></tr></table></div></div></li><li><p>导出某个库</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysqldump -uusername -ppassword db1 table1 table2&gt;tb1tb2.sql</code></pre></td></tr></table></div></div></li><li><p>导入某些数据表</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql -uusername -ppassword db1&lt;tb1tb2.sql
mysql&gt;user db1;
mysql&gt;source tb1tb2.sql;</code></pre></td></tr></table></div></div></li><li><p>mysqldump字符集设置</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$mysqldump -uusername -ppassword --default-character-set=utf-8 db1 table1&gt;tb1.sql</code></pre></td></tr></table></div></div></li></ol><h3 id="mysql用户管理">Mysql用户管理</h3><ol><li>创建用户<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt; insert into mysql.user(Host,User,Password) values("localhost","phplamp",password("1234"));
mysql&gt;grant all privileges on *.* to jee@localhost identified by ‘123′；</code></pre></td></tr></table></div></div></li><li>修改用户密码<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql&gt; UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;
mysql&gt; FLUSH PRIVILEGES;</code></pre></td></tr></table></div></div></li><li>显示当前用户<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">mysql&gt;select USER<span class="o">()</span><span class="p">;</span></code></pre></td></tr></table></div></div></li></ol><h3 id="mysql大小写敏感配置">mysql大小写敏感配置</h3><ol><li>查看<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">show global variables like<span class="s1">'%lower_case%'</span></code></pre></td></tr></table></div></div></li><li>配置<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#0-大小写敏感，1-不敏感（先把表名转为小写，再执行操作）。</span><span class="nv">low_case_table_names</span><span class="o">=</span><span class="m">0</span><span class="nv">或lower_low_case_table_names_low_case_table_names</span><span class="o">=</span><span class="m">1</span><span class="c1">#my.cnf文件下</span></code></pre></td></tr></table></div></div></li></ol><h3 id="mysql启用远程">Mysql启用远程</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">cd /etc/mysql
vi my.cnf #注释bind-address
mysql -uusername -ppassword #进入到mysql
grant all privileges on *.* to username@'deniedhost' identified by 'password';
GRANT ALL PRIVILEGES ON *.* TO user_name@'%' IDENTIFIED BY ‘pass_word’; #if dynamic ip
flush privileges;
quit;</code></pre></td></tr></table></div></div><h3 id="mysql-主从复制">Mysql 主从复制</h3><ul><li>mysql复制的用途:</li></ul><ul><li>读取扩展</li><li>主备份服务器</li><li>故障转移服务器</li><li>地理空间冗余</li><li>数据仓库</li><li>基准测试</li><li>软件更新</li><li>复制配置(my.cnf):</li><li>主服务器配置(Alpha)</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">[mysqld]
log-bin=binary-log #log-bin参数启动二进制日志.二进制日志在MySQL环境中提供了多种用途.它为MySQL复制提供了DDL和DML语句流,能够重新应用于复制的从服务器.
server-id=1
重新启动MySQL后 ,使用SQL命令show master status;进行验证.(对于配置复制的从服务器是必要的)
从服务器配置(Beta)
[mysqld]
server-id=2
read_only=TRUE
show slave status;
change master to
MASTER_HOST='192.168.100.1',#主服务器上的用户名和密码
MASTER_USER='rep1',
MASTER_PASSWORD='rep12009';
change master to
MASTER_LOG_FILE='binary-log.00001',#主服务器上运行show
master status命令所检索到的日志文件名称和位置.
MASTER_LOG_POS=106;
slave start;#启动从服务器验证其操作
show slave status;#Slave_IO_Running和Slave_SQL_Running的值为Yes,就证明"主服务器-从服务器"式的MySQL拓扑已经正常运行.</code></pre></td></tr></table></div></div><h3 id="测试mysql复制">测试MySQL复制</h3><p>在alpha上测试下面的代码:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">PROMPT alpha&gt;;
alpha&gt;</code></pre></td></tr></table></div></div><p>确认从服务器上什么都不存在:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">beta&gt; show schemas;</code></pre></td></tr></table></div></div><h3 id="mysql-创建视图">Mysql 创建视图</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">create view v as select * from table;
create view v as select id,name,age from table;
create view v[vid,vname,vage] as select id,name,age from table;</code></pre></td></tr></table></div></div><h3 id="ubuntu-mysql57解决不用密码也能登陆">ubuntu mysql5.7解决不用密码也能登陆:</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">登录mysql    mysql -u root -p 或 mysql
use mysql;
update user set authentication_string=PASSWORD("密码") where user='root';
update user set plugin="mysql_native_password";
flush privileges;
quit;
/etc/init.d/mysql restart;
mysql -u root -p 密码;</code></pre></td></tr></table></div></div><h3 id="onwherehaving的区别">on,where,having的区别</h3><blockquote><p>on,where,having这三个都可以加条件的子句中,on是最先执行,where次之,having最后.有时候如果这先后顺序不影响中间结果的话,那最终结果是相同的.但因为on是先把不符合条件的记录过滤后才进行统计,它就可以减少中间运算要处理的数据,按理说应该速度是最快的.
根据上面的分析,可以知道where应该比having快一点,应为它过滤数据后才进行sum,所以having是最慢的.但也不是说having没用,因为有时在步骤三还没有出来都不知道那个记录才符合要求时,就要用having了.
left join加上where 条件<br/>
用where是先连接然后再筛选<br/>
用and是先筛选再连接<br/>
数据库范式:<br/>
第一范式:强调的是列的原子性.<br/>
第二范式:首先使1NF,另外包含两部分内容,一是表必须有一个主键;二是没有包含在主键中的列必须完全依赖于主键,而不能只依赖于主键的一部分.<br/>
第三范式:首先是2NF,另外非主键列必须直接依赖于主键,不能存在传递依赖.即不能存在:非主键列A依赖于非主键列B,非主键列B依赖于主键的情况.</p></blockquote><h2 id="查询优化">查询优化</h2><ol><li>jvm调优，内存结构</li><li>内存碎片问题<br/>
MajorGC是清理老年代
MinorGC是从年轻代空间（包括Eden和Survivor区域）回收内存。
FullGC是清理整个堆空间包括年轻代和老年代。</li><li>mysql执行计划，查询慢</li></ol><ul><li>MySQL查询优化：</li><li>查询性能衡量标准<ul><li>查询时间</li><li>慢查询（几乎所有大道秒级别的查询都可以认为比较慢）</li><li>执行计划<ul><li>type查询的方式</li><li>key使用的索引</li><li>Rows结果集大小</li><li>Extra提示信息</li></ul></li></ul></li><li>影响查询性能的因素<ul><li>SQL解析时间#使用prepared stmt语句减少重复SQL的解析</li><li>查询优化算法<ul><li>执行计划分析</li><li>索引优化<ul><li>表优化（建主键unsigned int）</li><li>表优化（字段尽量使用NOT NULL）</li><li>表优化（能使用enum的尽量不要使用varchar）</li><li>表优化（ip字段使用unsigned int并使用INET_NTOA和INET_ATON)</li><li>索引优化（为频繁搜索的字段建立索引）</li><li>索引优化（为varchar text建立全文索引，避免使用 like)</li><li>索引优化（避免使用blob字段，该字段只能建立前缀索引）</li><li>索引优化（最多匹配原则和最高区分度原则）</li></ul></li><li>查询优化<ul><li>索引字段不参与计算，否则索引失效</li><li>避免使用 select*，select count(*)等</li><li>知道结果数量的使用，使用limit，尽早结果过程。</li></ul></li></ul></li></ul></li><li>Query Cache的使用#关了吧<ul><li>磁盘IO次数#IO优化，增大buffer pool，开取MRR，避免select *</li><li>事务键锁的影响#锁优化：避免使用大事务，RC比RR好，不适用GAP锁，避免使用select *，可能会锁权标</li></ul></li><li>join优化#利用index nexted-loop join算法，在没有索引的情况下，合理设置join_buffer_size.</li><li>走索引OR全表扫描</li><li>结果集大小与运算过程</li><li>查询计划分析</li><li>查询优化技巧<br/><strong>MySQL执行计划</strong></li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> 语法：
EXPLAIN select ...
变体：
1.将执行计划“反翻译”成SELECT 语句，运行show warnings 可得到MySQL优化器优化后的查询语句
EXPLAIN EXTENDED select ...
2.用于分区表的EXPLAIN
EXPLAIN PARTITIONS SELECT ...</code></pre></td></tr></table></div></div><p>执行计划包含的信息</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> id:包含一组数字，标识查询语句中执行SELECT子句或者操作表的顺序。id相同，执行顺序由上至下。若是子查询，id序号递增，id值越大优先级越高，越会被执行
select_type:表示每个select子句的类型（简单或复杂）
SIMPLE：查询中不包含子查询或者UNION
PRIMARY：查询中包含任何复杂的子部分，最外层查询则被标记为该类型
SUBQUERY:在SELECT或where列表中包含了子查询，该子查询就被标记为SUBQUERY
DERIVED：在FROM列表中包含的子查询被标记为DERIVED（衍生）
UNION：若第二个SELECT出现在UNION之后，则被标记为UNION
UNION RESULT：从UNION表获取结果的SELECT被标记为UNION RESULT
type：标识MySQL在表中找到所需行的方式，又称为“访问类型”
这列很重要,显示了连接使用了哪种类别,有无使用索引.</code></pre></td></tr></table></div></div><p>从最好到最差的连接类型为const、eq_reg、ref、range、index和AL
mysql explain用法和结果的含义：https://www.cnblogs.com/yycc/p/7338894.html
MYSQL 5.6.3以前只能EXPLAIN SELECT; MYSQL5.6.3以后就可以EXPLAIN SELECT,UPDATE,DELETE</p><p><strong>不走索引情况</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">select * tb1 where name like ‘%comnn’ %再在前不走索引
select * tb1 where reverse（name） = ‘xu’ 条件出现函数运算不走索引
使用 or 不走索引 特别的： 当or条件中有 未 建立索引的列，会走索引
数据类型不一致 select * tb1 where name = 0999
！= 特别的： 如果是主键 索引生效
&gt; 特别的： 如果是主键 或者索引是int类型 索引生效
order by
选择的映射是索引才生效 特别的： 如果是主键 索引生效</code></pre></td></tr></table></div></div><hr/><p>参考<br/><a href="http://stackoverflow.com/questions/16995616/monogodb-service-cannot-start-after-storage-extension-under-ubuntu-12-04" rel="noopener noreffer" target="_blank">无法启动mongodb的解决方法</a><br/><a href="http://supportcenter.verio.com/KB/questions.php?questionid=494" rel="noopener noreffer" target="_blank">启用远程mysql</a></p></description></item><item><title>sqlalchemy动态映射</title><link/>https://justpic.org/post/2013/07/26/django-sqlalchemy-mapping/<pubdate>Fri, 26 Jul 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/26/django-sqlalchemy-mapping/</guid><description><p>django中使用sqlalchemy进行动态映射</p><h1 id="sqlalchemy动态映射">sqlalchemy动态映射</h1><p>代码如下:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> from sqlalchemy import *
from sqlalchemy.orm import *
metadata=MetaData(create_engine("sqlite://",echo=True)
t1=Table("t1",metadata,Column('id',Integer,primary_key=True))
t2=Table("t2",metadata,Column("id",Integer,primary_key=True))
metadata.create_all()
def map_class_to_some_table(cls,table,entity_name,**kw):
newcls=type(entity_name,(cls,),{})
mapper(newcls,table,**kw)
return newcls
class Foo(object):
pass
T1Foo=map_class_to_some_table(Foo,t1,"T1Foo")
T2Foo=map_class_to_some_table(Foo,t2,"T2Foo")
sess=sessionmaker()()
sess.add_all([T1Foo(),T1Foo(),T2Foo(),T1Foo()])
print sess.query(T1Foo).all()
print sess.query(T2Foo).all()</code></pre></td></tr></table></div></div></description></item></channel></rss></body></html>