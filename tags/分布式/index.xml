<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式 on 桑河一榆</title><link>https://justpic.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link><description>Recent content in 分布式 on 桑河一榆</description><generator>justpic</generator><language>zh-CN</language><managingEditor>matrix.orz@gmail.com (justpic)</managingEditor><webMaster>matrix.orz@gmail.com (justpic)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 15 Jul 2013 00:00:00 +0000</lastBuildDate><atom:link href="https://justpic.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>使用python进行异步网络编程</title><link>https://justpic.org/post/2013/07/15/python-async-programming/</link><pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/15/python-async-programming/</guid><description><p>python异步网络编程初探</p><h2 id="使用python进行selectpollepoll-测试">使用python进行select,poll,epoll 测试</h2><h3 id="select测试">select测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># selecttest.py</span><span class="kn">import</span><span class="nn">select</span><span class="kn">import</span><span class="nn">socket</span><span class="kn">import</span><span class="nn">Queue</span><span class="c1">#create a socket</span><span class="n">server</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span><span class="c1">#set option reused</span><span class="n">server</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="n">server_address</span><span class="o">=</span><span class="p">(</span><span class="s1">'localhost'</span><span class="p">,</span><span class="mi">10001</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">server_address</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="c1">#sockets from which we except to read</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">server</span><span class="p">]</span><span class="c1">#sockets from which we expect to write</span><span class="n">outputs</span><span class="o">=</span><span class="p">[]</span><span class="c1">#Outgoing message queues (socket:Queue)</span><span class="n">message_queues</span><span class="o">=</span><span class="p">{}</span><span class="c1">#A optional parameter for select is TIMEOUT</span><span class="n">timeout</span><span class="o">=</span><span class="mi">20</span><span class="k">while</span><span class="n">inputs</span><span class="p">:</span><span class="k">print</span><span class="s2">"waiting for next event"</span><span class="c1">#first parameter--read list,second parameter--write list,third parameter--error list</span><span class="n">readable</span><span class="p">,</span><span class="n">writable</span><span class="p">,</span><span class="n">exceptional</span><span class="o">=</span><span class="n">select</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span><span class="n">outputs</span><span class="p">,</span><span class="n">inputs</span><span class="p">,</span><span class="n">timeout</span><span class="p">)</span><span class="c1">#when timeout reached,select return three empty list</span><span class="k">if</span><span class="ow">not</span><span class="p">(</span><span class="n">readable</span><span class="ow">or</span><span class="n">writable</span><span class="ow">or</span><span class="n">exceptional</span><span class="p">):</span><span class="k">print</span><span class="s2">"Time out!"</span><span class="k">break</span><span class="p">;</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">readable</span><span class="p">:</span><span class="k">if</span><span class="n">s</span><span class="ow">is</span><span class="n">server</span><span class="p">:</span><span class="c1">#A "readable" socket is ready to accept a connection</span><span class="n">connection</span><span class="p">,</span><span class="n">client_address</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="k">print</span><span class="s2">" connection from"</span><span class="p">,</span><span class="n">client_address</span><span class="n">connection</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span><span class="n">message_queues</span><span class="p">[</span><span class="n">connection</span><span class="p">]</span><span class="o">=</span><span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span><span class="k">else</span><span class="p">:</span><span class="n">data</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="k">if</span><span class="n">data</span><span class="p">:</span><span class="k">print</span><span class="s2">"received "</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="s2">"from "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="c1">#Add output channel for response</span><span class="k">if</span><span class="n">s</span><span class="ow">not</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="c1">#Interpret empty result as closed connection</span><span class="k">print</span><span class="s2">" closing"</span><span class="p">,</span><span class="n">client_address</span><span class="k">if</span><span class="n">s</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">inputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="c1">#remove message queue</span><span class="k">del</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">writable</span><span class="p">:</span><span class="k">try</span><span class="p">:</span><span class="n">next_msg</span><span class="o">=</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">get_nowait</span><span class="p">()</span><span class="k">except</span><span class="n">Queue</span><span class="o">.</span><span class="n">Empty</span><span class="p">:</span><span class="k">print</span><span class="s2">" "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">,</span><span class="s2">" queue empty"</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="k">print</span><span class="s2">"sending "</span><span class="p">,</span><span class="n">next_msg</span><span class="p">,</span><span class="s2">" to"</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">next_msg</span><span class="p">)</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">exceptional</span><span class="p">:</span><span class="k">print</span><span class="s2">" exception condition on "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="c1">#stop listening for input on the connection</span><span class="n">inputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">if</span><span class="n">s</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="c1">#Remove message queue</span></code></pre></td></tr></table></div></div><h3 id="poll测试">poll测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket
import select
import Queue
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.setblocking(False)
server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
server_address=("localhost",10001)
print "Starting up on %s port %s" % server_address
server.bind(server_address)
server.listen(5)
message_queues={}
#The timeout value is represente in milliseconds,instead of seconds
timeout=100
#Create a limit for the next
READ_ONLY=(select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR)
READ_WRITE=(READ_ONLY|select.POLLOUT)
#set up the poller
poller=select.poll()
poller.register(server,READ_ONLY)
#map file descriptors to socket objects
fd_to_socket={server.fileno():server,}
while True:
print "Waiting for the next event"
events=poller.poll(timeout)
print "*"*20
print len(events)
print events
print "*"*20
for fd,flag in events:
s=fd_to_socket[fd]
if flag &amp; (select.POLLIN|select.POLLPRI):
if s is server:
#A readable socket is ready to accept a connection
connection,client_address=s.accept()
print "Connection ",client_address
connection.setblocking(False)
fd_to_socket[connection.fileno()]=connection
poller.register(connection,READ_ONLY)
#Give the connection a queue to send data
message_queues[connection]=Queue.Queue
else:
data=s.recv(1024)
if data:
# A readable client socket has data
print " received %s from %s " % (data,s.getpeername())
message_queues[s].put(data)
poller.modify(s,READ_WRITE)
else:
#Close the connection
print " closing ",s.getpeername()
#Stop listening for input on the connection
poller.unregister(s)
s.close()
del message_queues[s]
elif flag &amp; select.POLLHUP:
#A client that "Hang up",to be closed.
print "closing ",s.getpeername,"(HUP)"
poller.unregister(s)
s.close()
elif flag &amp; select.POLLOUT:
#SOCKET is ready to send DATA,if there is any to send
try:
next_msg=message_queues[s].get_nowait()
except Queue.Empty:
#No messages waiting so stop checking
print s.getpeername," queue empty"
poller.modify(s,READ_ONLY)
else:
print " sending %s to %s" %(next_msg,s.getpeername())
s.send(next_msg)
elif flag &amp; select.POLLERR:
#Any events with POLLER cause the server to close the sockets
print " exception on",s.getpeername()
poller.unregister(s)
s.close()
del message_queues[s]</code></pre></td></tr></table></div></div><h3 id="epoll测试">epoll测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span><span class="lnt">82</span><span class="lnt">83</span><span class="lnt">84</span><span class="lnt">85</span><span class="lnt">86</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket,logging
import select,errno
logger=logging.getLogger("network-server")
def InitLog():
logger.setLevel(logging.DEBUG)
fh=logging.FileHandler("network-server.log")
fh.setLevel(logging.DEBUG)
ch=logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -%(message)s")
ch.setFormatter(formatter)
fh.setFormatter(formatter)
logger.addHandler(fh)
logger.addHandler(ch)
if __name__=="__main__":
InitLog()
try:
listen_fd=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
except socket.error,msg:
logger.error("create a socket failed")
try:
listen_fd.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
except socket.error,msg:
logger.error("setsocketopt error")
try:
listen_fd.bind(('',10001))
except socket.error,msg:
logger.error("listen file id bind ip error")
try:
listen_fd.listen(10)
except socket.error,msg:
logger.error(msg)
try:
epoll_fd=select.epoll()
epoll_fd.register(listen_fd.fileno(),select.EPOLLIN)
except select.error,msg:
logger.error(msg)
connections={}
addresses={}
datalist={}
while True:
epoll_list = epoll_fd.poll()
for fd,events in epoll_list:
if fd==listen_fd.fileno():
conn,addr=listen_fd.accept()
logger.debug("accept connction from %s,%d,fd = %d" %(addr[0],addr[1],conn.fileno()))
conn.setblocking(0)
epoll_fd.register(conn.fileno(),select.EPOLLIN|select.EPOLLET)
connections[conn.fileno()]=conn
addresses[conn.fileno()]=addr
elif select.EPOLLIN &amp; events:
datas=''
while True:
try:
data=connections[fd].recv(10)
if not data and not datas:
epoll_fd.unregister(fd)
connections[fd].close()
logger.debug("%s,%d closed" % (addresses[fd][0],addresses[fd][1]))
break
else:
datas+=data
except socket.error,msg:
if msg.errno==errno.EAGAIN:
logger.debug("%s receive %s" % (fd,datas))
datalist[fd]=datas
epoll_fd.modify(fd,select.EPOLLET|select.EPOLLOUT)
break
else:
epoll_fd.unregister(fd)
connections[fd].close()
logger.error(msg)
break
elif select.EPOLLHUP &amp; events:
epoll_fd.unregister(fd)
connections[fd].close()
logger.debug("%s ,%d closed" % (addresses[fd][0],addresses[fd][1]))
elif select.EPOLLOUT &amp; events:
sendLen=0
while True:
sendLen += connections[fd].send(datalist[fd][sendLen:])
if sendLen == len(datalist[fd]):
break
epoll_fd.modify(fd,select.EPOLLIN|select.EPOLLET)
else:
continue</code></pre></td></tr></table></div></div><h1 id="commontestpyclient-code">commontest.py(client code)</h1><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket
messages = ["This is the message",
"It will be send",
"in parts"]
print "Connect to the server"
server_address=("localhost",10001)
#Create a TCP/IP sock
socks=[]
for i in range(10):
socks.append(socket.socket(socket.AF_INET,socket.SOCK_STREAM))
for s in socks:
s.connect(server_address)
counter=0
for message in messages:
for s in socks:
counter+=1
print " %s sending %s "%(s.getpeername(),message+" version "+str(counter))
s.send(message+" version "+str(counter))
for s in socks:
data=s.recv(1024)
print " %s received %s " % (s.getpeername(),data)
if not data:
print "closing socket",s.getpeername()
s.close()</code></pre></td></tr></table></div></div><hr><p>参考<br><a href="scotdoyle.com/python-epoll-howto.html" rel="noopener noreffer">epoll的使用</a><br><a href="blog.csdn.net/livefun/article/details/8721772" rel="noopener noreffer">asyncore的介绍和使用-blog1</a><br><a href="http://www.nightmare.com/medusa/async_sockets.html" target="_blank" rel="noopener noreffer">asyncore的介绍和使用-blog2</a><br><a href="https://mp.weixin.qq.com/s/dbZE-zml38WRgiUwGfEoEw" target="_blank" rel="noopener noreffer">unix网络编程io模型</a></p></description></item></channel></rss>