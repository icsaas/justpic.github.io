<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on 桑河一榆</title><link>https://justpic.org/tags/linux/</link><description>Recent content in linux on 桑河一榆</description><generator>justpic</generator><language>zh-CN</language><managingEditor>matrix.orz@gmail.com (justpic)</managingEditor><webMaster>matrix.orz@gmail.com (justpic)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 27 Mar 2020 11:47:38 +0800</lastBuildDate><atom:link href="https://justpic.org/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>ubuntu 18.04系统安装OpenCV 4.2.0</title><link>https://justpic.org/post/2020/03/27/ubuntu-18.04-install-opencv-4.2.0/</link><pubDate>Fri, 27 Mar 2020 11:47:38 +0800</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/27/ubuntu-18.04-install-opencv-4.2.0/</guid><description><p>主要介绍ubuntu 18.04安装OpenCV 4.2.0</p><h2 id="更新系统">更新系统</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt update
$ sudo apt upgrade</code></pre></td></tr></table></div></div><h2 id="安装前置依赖包">安装前置依赖包</h2><ul><li>通用工具</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"> $ sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall</code></pre></td></tr></table></div></div><ul><li>图像I/O库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libjpeg-dev libpng-dev libtiff-dev</code></pre></td></tr></table></div></div><ul><li>视频/音频库-FFMPEG,GSTREAMER,x264等等</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev
$ sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
$ sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev
$ sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev</code></pre></td></tr></table></div></div><ul><li>OpenCore-</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev</code></pre></td></tr></table></div></div><ul><li>照相编程接口库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils
$<span class="nb">cd</span> /usr/include/linux
$ sudo ln -s -f ../libv4l1-videodev.h videodev.h
$<span class="nb">cd</span> ~</code></pre></td></tr></table></div></div><ul><li>GTK库－图形用户界面</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libgtk-3-dev</code></pre></td></tr></table></div></div><ul><li>python3所使用的库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install python3-dev python3-pip
$ sudo -H pip3 install -U pip numpy
$ sudo apt install python3-testresources</code></pre></td></tr></table></div></div><ul><li>用于CPU的C++并行库</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libtbb-dev</code></pre></td></tr></table></div></div><ul><li>用于OpenCV的优化库　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt-get install libatlas-base-dev gfortran</code></pre></td></tr></table></div></div><ul><li>可选安装　</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo apt-get install libprotobuf-dev protobuf-compiler
$ sudo apt-get install libgoogle-glog-dev libgflags-dev
$ sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen</code></pre></td></tr></table></div></div><h2 id="正式安装opencv-420步骤">正式安装Opencv 4.2.0步骤</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$<span class="nb">cd</span> ~
$ mkdir -p installcv1
$<span class="nb">cd</span> installcv1
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.1.zip
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.1.zip
$ unzip opencv.zip
$ unzip opencv_contrib.zip
$<span class="nb">echo</span><span class="s2">"Create a virtual environtment for the python binding module"</span>
$ sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip
$<span class="nb">echo</span><span class="s2">"Edit ~/.bashrc"</span>
$<span class="nb">export</span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
$<span class="nb">export</span><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python3
$<span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv cv -p python3
$ pip install numpy
$<span class="nb">echo</span><span class="s2">"Procced with the installation"</span>
$<span class="nb">cd</span> opencv-4.2.0
$ mkdir build
$<span class="nb">cd</span> build
$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE
-D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc
-D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv
-D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON
-D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF
-D<span class="nv">WITH_TBB</span><span class="o">=</span>ON
-D<span class="nv">WITH_CUDA</span><span class="o">=</span>ON
-D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF
-D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span>
-D<span class="nv">WITH_V4L</span><span class="o">=</span>ON
-D<span class="nv">WITH_QT</span><span class="o">=</span>OFF
-D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON
-D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc
-D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages
-D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/installcv/opencv_contrib-4.2.0/modules
-D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python
-D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON　-D<span class="nv">WITH_CUDNN</span><span class="o">=</span>ON
-D<span class="nv">OPENCV_DNN_CUDA</span><span class="o">=</span>ON
-D<span class="nv">CUDA_ARCH_BIN</span><span class="o">=</span>6.1
-D<span class="nv">WITH_INF_ENGINE</span><span class="o">=</span>ON
-D<span class="nv">ENABLE_CXX11</span><span class="o">=</span>ON
-D<span class="nv">INTEL_CVSDK_DIR</span><span class="o">=</span>/home/sn0w/intel/openvino_2020.1.023/deployment_tools
-D<span class="nv">IE_PLUGINS_PATH</span><span class="o">=</span>/home/sn0w/intel/openvino_2020.1.023/deployment_tools/inference_engine/lib/intel64/
-D<span class="nv">INF_ENGINE_RELEASE</span><span class="o">=</span><span class="m">2020010000</span>
-D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON
-D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..</code></pre></td></tr></table></div></div><p><strong>如果你只是想编译静态库，只需要在Cmake时附加<code> -D BUILD_SHARED_LIBS=OFF</code></strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc -D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/usr/local -D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF -D<span class="nv">WITH_TBB</span><span class="o">=</span>ON -D<span class="nv">WITH_CUDA</span><span class="o">=</span>ON -D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF -D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_V4L</span><span class="o">=</span>ON -D<span class="nv">WITH_QT</span><span class="o">=</span>OFF -D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON -D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON -D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc -D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages -D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~／installcv/opencv_contrib-4.2.0/modules -D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python -D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">BUILD_SHARED_LIBS</span><span class="o">=</span>OFF ..</code></pre></td></tr></table></div></div><p><strong>如果你不想包括CUDA，只需要设置<code>-D WITH_CUDA=OFF</code></strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ cmake -D<span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE -D<span class="nv">CMAKE_C_COMPILER</span><span class="o">=</span>/usr/bin/gcc-6 -D<span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv -D<span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON -D<span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>OFF -D<span class="nv">WITH_TBB</span><span class="o">=</span>ON -D<span class="nv">WITH_CUDA</span><span class="o">=</span>OFF -D<span class="nv">BUILD_opencv_cudacodec</span><span class="o">=</span>OFF -D<span class="nv">ENABLE_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">CUDA_FAST_MATH</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_CUBLAS</span><span class="o">=</span><span class="m">1</span> -D<span class="nv">WITH_V4L</span><span class="o">=</span>ON -D<span class="nv">WITH_QT</span><span class="o">=</span>OFF -D<span class="nv">WITH_OPENGL</span><span class="o">=</span>ON -D<span class="nv">WITH_GSTREAMER</span><span class="o">=</span>ON -D<span class="nv">OPENCV_GENERATE_PKGCONFIG</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PC_FILE_NAME</span><span class="o">=</span>opencv.pc -D<span class="nv">OPENCV_ENABLE_NONFREE</span><span class="o">=</span>ON -D<span class="nv">OPENCV_PYTHON3_INSTALL_PATH</span><span class="o">=</span>~/.virtualenvs/cv/lib/python3.6/site-packages -D<span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/installcv1/opencv_contrib-4.2.0/modules -D<span class="nv">PYTHON_EXECUTABLE</span><span class="o">=</span>~/.virtualenvs/cv/bin/python -D<span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..</code></pre></td></tr></table></div></div><p><strong>如果你想使用CUDNN，你必须在Cmake时包含这些标记（正确的设置CUDA_ARCH_BIN的值)</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">-D<span class="nv">WITH_CUDNN</span><span class="o">=</span>ON<span class="se">\</span><span class="se"/>-D<span class="nv">OPENCV_DNN_CUDA</span><span class="o">=</span>ON<span class="se">\</span><span class="se"/>-D<span class="nv">CUDA_ARCH_BIN</span><span class="o">=</span>6.1<span class="se">\</span></code></pre></td></tr></table></div></div><p>在<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener noreffer">https://developer.nvidia.com/cuda-gpus</a>
网站上可以看到自己网卡可兼容的CUDA版本情况．</p><p><strong>正式编译前，你必须检查CUDA在Cmake输出时是否启用</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">-- NVIDIA CUDA: YES (ver 10.0, CUFFT CUBLAS NVCUVID FAST_MATH)
-- NVIDIA GPU arch: 30 35 37 50 52 60 61 70 75
-- NVIDIA PTX archs:</code></pre></td></tr></table></div></div><p><strong>正式编译和安装</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ nproc
$ make -j8<span class="c1">#！ubuntu 18.04编译过程中出现错误：sudo ln -s /usr/include/eigen3/Eigen /usr/include/Eigen</span>
$ sudo make install</code></pre></td></tr></table></div></div><p><strong>配置环境变量</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo /bin/bash -c<span class="s1">'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'</span>
$ sudo ldconfig
$</code></pre></td></tr></table></div></div><p><strong>如果你想让python的cv包能够在系统环境下使用，必须要下面的复制工作</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">$ sudo cp -r ~/.virtualenvs/cv/lib/python3.6/site-packages/cv2 /usr/local/lib/python3.6/dist-packages
$<span class="nb">export</span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/ev_sdk/lib:/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv/lib:/usr/local/lib:/usr/local/cuda-10.0/lib64<span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="p">:+:</span><span class="si">${</span><span class="nv">LD_LIBRARY_PATH</span><span class="si">}}</span>
$<span class="nb">export</span><span class="nv">OpenCV_DIR</span><span class="o">=</span>/home/<span class="o">{</span>youraccount<span class="o">}</span>/opencv
$<span class="nb">echo</span><span class="s2">"Modify config-3.6.py to point to the target directory"</span>
$ sudo nano /usr/local/lib/python3.6/dist-packages/cv2/config-3.6.py<span class="sb">```</span><span class="nv">PYTHON_EXTENSIONS_PATHS</span><span class="o">=</span><span class="o">[</span>
os.path.join<span class="o">(</span><span class="s1">'/usr/local/lib/python3.6/dist-packages/cv2'</span>,<span class="s1">'python-3.6'</span><span class="o">)</span><span class="o">]</span> + PYTHON_EXTENSIONS_PATHS<span class="sb">```</span></code></pre></td></tr></table></div></div><h2 id="测试安装">测试安装　　</h2><p>案例程序</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//test.cpp</span><span class="c1"/><span class="cp">#include</span><span class="cpf">&lt;iostream></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;ctime></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;cmath></span><span class="cp"/><span class="cp">#include</span><span class="cpf">"bits/time.h"</span><span class="cp"/><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/core.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/highgui.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/imgproc.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/imgcodecs.hpp></span><span class="cp"/><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/core/cuda.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/cudaarithm.hpp></span><span class="cp"/><span class="cp">#include</span><span class="cpf">&lt;opencv2/cudaimgproc.hpp></span><span class="cp"/><span class="cp"/><span class="cp">#define TestCUDA true</span><span class="cp"/><span class="kt">int</span><span class="nf">main</span><span class="p">()</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">clock_t</span><span class="n">begin</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span><span class="k">try</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">String</span><span class="n">filename</span><span class="o">=</span><span class="s">"/home/raul/Pictures/Screenshot_20170317_105454.png"</span><span class="p">;</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">srcHost</span><span class="o">=</span><span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="n">cv</span><span class="o">::</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="n">TestCUDA</span><span class="p">)</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">cuda</span><span class="o">::</span><span class="n">GpuMat</span><span class="n">dst</span><span class="p">,</span><span class="n">src</span><span class="p">;</span><span class="n">src</span><span class="p">.</span><span class="n">upload</span><span class="p">(</span><span class="n">srcHost</span><span class="p">);</span><span class="c1">//cv::cuda::threshold(src,dst,128.0,255.0, CV_THRESH_BINARY);</span><span class="c1"/><span class="n">cv</span><span class="o">::</span><span class="n">cuda</span><span class="o">::</span><span class="n">bilateralFilter</span><span class="p">(</span><span class="n">src</span><span class="p">,</span><span class="n">dst</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">resultHost</span><span class="p">;</span><span class="n">dst</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="n">resultHost</span><span class="p">);</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span><span class="n">dst</span><span class="p">;</span><span class="n">cv</span><span class="o">::</span><span class="n">bilateralFilter</span><span class="p">(</span><span class="n">srcHost</span><span class="p">,</span><span class="n">dst</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="p">}</span><span class="p">}</span><span class="c1">//cv::imshow("Result",resultHost);</span><span class="c1"/><span class="c1">//cv::waitKey();</span><span class="c1"/><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="k">const</span><span class="n">cv</span><span class="o">::</span><span class="n">Exception</span><span class="o">&amp;</span><span class="n">ex</span><span class="p">)</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Error: "</span><span class="o">&lt;&lt;</span><span class="n">ex</span><span class="p">.</span><span class="n">what</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="p">}</span><span class="n">std</span><span class="o">::</span><span class="n">clock_t</span><span class="n">end</span><span class="o">=</span><span class="n">std</span><span class="o">::</span><span class="n">clock</span><span class="p">();</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="kt">double</span><span class="p">(</span><span class="n">end</span><span class="o">-</span><span class="n">begin</span><span class="p">)</span><span class="o">/</span><span class="n">CLOCKS_PER_SEC</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="p">}</span></code></pre></td></tr></table></div></div><p><strong>编译和执行</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$ g++ -o test test.cpp `pkg-config opencv --cflags --libs`
$ ./test</code></pre></td></tr></table></div></div><h2 id="faq">FAQ</h2><p>编译过程中如果出现如下错误，说明显卡不支持CUDA的最低要求</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">CUDA backend for DNN module requires CC 5.3 or higher. Please remove unsupported architectures from CUDA_ARCH_BIN option.</code></pre></td></tr></table></div></div><h2 id="安装或者编译错误">安装或者编译错误　　</h2><p>opencv_contrib-4.1.1/modules/cudaimgproc/src/cuda/bilateral_filter.cu:140: error: (-217:Gpu API call) invalid configuration argument in function &lsquo;bilateral_caller&rsquo;</p><p>cmake项目编译出现undefined reference to `cv::freetype::createFreeType2()　　</p><p><strong>参考</strong><br><a href="https://medium.com/repro-repo/install-cuda-10-1-and-cudnn-7-5-0-for-pytorch-on-ubuntu-18-04-lts-9b6124c44cc" target="_blank" rel="noopener noreffer">https://medium.com/repro-repo/install-cuda-10-1-and-cudnn-7-5-0-for-pytorch-on-ubuntu-18-04-lts-9b6124c44cc</a><br><a href="https://gist.github.com/raulqf/f42c718a658cddc16f9df07ecc627be7" target="_blank" rel="noopener noreffer">https://gist.github.com/raulqf/f42c718a658cddc16f9df07ecc627be7</a></p></description></item><item><title>配置反向代理</title><link>https://justpic.org/post/2014/06/05/reverse-proxy-setup/</link><pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/06/05/reverse-proxy-setup/</guid><description><p>配置反向代理</p><h2 id="建立一个简单的反向http代理">建立一个简单的反向http代理</h2><p>nginx 配置情况</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">upstream tunnel{
server 127.0.0.1:8080;
}
server {
listen 80;
server_name &lt;url>;
location /{
proxy_set_header Host $http_host;
proxy_pass tunnel;
}
}
#ssh reverse
ssh -R 8080:localhost:&lt;port> &lt;user_name>@&lt;server>
#port is your local application used ,and url is the url you will to visit public</code></pre></td></tr></table></div></div></description></item><item><title>ubuntu上构建ios交叉编译环境</title><link>https://justpic.org/post/2014/04/12/ubuntu-install-ios-llvm-chain/</link><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/12/ubuntu-install-ios-llvm-chain/</guid><description><p>ubuntu上构建ios交叉编译环境</p><h3 id="ubuntu-1204-安装llvm34ios-lang交叉编译环境">ubuntu 12.04 安装llvm3.4、ios-lang交叉编译环境</h3><p>在ubuntu 12.04上先安装gcc-4.8，然后安装llvm,clang,libcxx,libcxxabi.由于libcxx和libcxxabi相互依赖，需要两次安装libcxx。最后安装theos等开放的ios开发工具链<br>
安装gcc-4.8如前文所述<a href="/2014/04/02/gcc-48-on-ubuntu/" rel="noopener noreffer">install gcc4.8 on ubuntu 12.04</a></p><h3 id="安装llvmclang">安装llvm,clang</h3><p>/etc/apt/sources.list中添加如下两行：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main
deb-src http://llvm.org/apt/precise/ llvm-toolchain-precise-3.4 main</code></pre></td></tr></table></div></div><h3 id="检索签名">检索签名：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|sudo apt-key add -</code></pre></td></tr></table></div></div><h3 id="安装与llvm-34clang-34相关的所有包">安装与llvm-3.4,clang-3.4相关的所有包：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">apt-get install clang-3.4 clang-3.4-doc libclang-common-3.4-dev libclang-3.4-dev libclang1-3.4 libclang1-3.4-dbg libllvm-3.4-ocaml-dev libllvm3.4 libllvm3.4-dbg lldb-3.4 llvm-3.4 llvm-3.4-dev llvm-3.4-doc llvm-3.4-examples llvm-3.4-runtime clang-modernize-3.4 clang-format-3.4 python-clang-3.4 lldb-3.4-dev</code></pre></td></tr></table></div></div><h3 id="安装libcxx">安装libcxx：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx</code></pre></td></tr></table></div></div><h3 id="查看g使用的头文件">查看g++使用的头文件:</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">echo | g++ -Wp,-v -x c++ - -fsyntax-only</code></pre></td></tr></table></div></div><h3 id="将会输出类似如下结果">将会输出类似如下结果：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"
ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux- gnu/4.8/../../../../x86_64-linux-gnu/include"
### #include "..." search starts here:
### include &lt;...> search starts here:
/usr/include/c++/4.8
/usr/include/c++/4.8/x86_64-linux-gnu
/usr/include/c++/4.8/backward
/usr/lib/gcc/x86_64-linux-gnu/4.8/include
/usr/local/include
/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed
/usr/include/x86_64-linux-gnu
/usr/include
End of search list.</code></pre></td></tr></table></div></div><h3 id="编译安装libcxx">编译安装libcxx：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DLIBCXX_CXX_ABI=libsupc++ - DLIBCXX_LIBSUPCXX_INCLUDE_PATHS="/usr/include/c++/4.7/;/usr/include/x86_64-linux- gnu/c++/4.7/" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr &lt;libc++-source-dir>
make
sudo make install</code></pre></td></tr></table></div></div><h3 id="安装libcxxabi">安装libcxxabi</h3><p>首先安装相关依赖：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install g++ subversion cmake swig python-dev libedit-dev libunwind8 libunwind8-dev</code></pre></td></tr></table></div></div><h3 id="下载源码并编译">下载源码并编译：</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">svn co http://llvm.org/svn/llvm-project/libcxxabi/trunk libcxxabi
cd libcxxabi/lib
./buildit
sudo cp libc++abi.so.1.0 /usr/lib
sudo ln -s /usr/lib/libc++abi.so.1.0 /usr/lib/libc++abi.so.1
sudo ln -s /usr/lib/libc++abi.so.1 /usr/lib/libc++abi.so</code></pre></td></tr></table></div></div><h3 id="使用libcabi来安装libc">使用libc++abi来安装libc++</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">svn co http://llvm.org/svn/llvm-project/libcxx/trunk libcxx
cd libcxx
mkdir build
cd build
CC=clang CXX=clang++ cmake -G "Unix Makefiles" -DLIBCXX_CXX_ABI=libcxxabi - DLIBCXX_LIBCXXABI_INCLUDE_PATHS="&lt;libc++abi-source-dir>/include" - DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr ../
make
sudo make install</code></pre></td></tr></table></div></div><p>至此ubuntu 12.04上的LLVM环境就算搭建好了。</p></description></item><item><title>ubuntu上安装gcc</title><link>https://justpic.org/post/2014/04/02/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85gcc/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/02/ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85gcc/</guid><description><p>命令行中输入以下命令安装相关包</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo add-apt-repository ppa:boost-latest/ppa
sudo apt-get update
sudo apt-get install libboost1.55-all-dev
sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt-get update
sudo apt-get install gcc-4.8 g++-4.8
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-4.6
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
sudo update-alternatives --config gcc</code></pre></td></tr></table></div></div><p>安装完gcc-4.8后即可安装llvm-3.4 参考<a href="" rel="noopener noreffer">llvm/apt</a><br>
下载<a href="" rel="noopener noreffer">osxcross</a><br>
编译若出现错误： fatal error:limits can&rsquo;t find?<br>
使用以下命令进行修正</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$echo '#include &lt;limits.h>' | clang -v -xc -o /dev/null -</code></pre></td></tr></table></div></div><p>使用上述命令排错，依依对照toolchain查找的include顺序，修改include链接，即可解决问题
其实这是一个llvm的bug<br>
临时解决方案</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> $cd /usr/lib/clang/&lt;clang-version/
$sudo ln -sf ../../llvm-3.4/lib/clang/&lt;clang-version>/include include</code></pre></td></tr></table></div></div><p>再次编译可以通过。
一个查找文件的有用命令:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> $grep notification `find ./*`</code></pre></td></tr></table></div></div><hr><p>参考：<br><a href="https://bugs.launchpad.net/ubuntu/+source/llvm-defaults/+bug/1242300" target="_blank" rel="noopener noreffer">https://bugs.launchpad.net/ubuntu/+source/llvm-defaults/+bug/1242300</a>
:</p></description></item><item><title>Ubuntu Server安装World Community Grid</title><link>https://justpic.org/post/2013/11/19/ubuntu-install-wcg/</link><pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/11/19/ubuntu-install-wcg/</guid><description><p>Ubuntu Server安装World Community Grid</p><h2 id="在ubuntu上安装boinc">在ubuntu上安装BOINC</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get aptitude install boinc-client</code></pre></td></tr></table></div></div><p>(you can also download it from wcg and install)</p><p>find your account key:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">boinccmd --lookup_account http://www.worldcommunitygrid.org username password</code></pre></td></tr></table></div></div><p>You should get a response something like this
dfb74c9b9&hellip;</p><p>attach to your project</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">boinccmd --project_attach http://www.worldcommunitygrid.org dfb74c....</code></pre></td></tr></table></div></div><p>if you want to verify your attached enter the following command:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">boinccmd --get_state</code></pre></td></tr></table></div></div><h3 id="更多资源">更多资源:</h3><p><a href="http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu" target="_blank" rel="noopener noreffer">http://boinc.berkeley.edu/wiki/installing_BOINC_ON_Ubuntu</a><br><a href="http://boinc.berkeley.edu/wiki/Client_configuration" target="_blank" rel="noopener noreffer">http://boinc.berkeley.edu/wiki/Client_configuration</a><br><a href="http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC" target="_blank" rel="noopener noreffer">http://boinc.berkeley.edu/wiki/Stop_or_start_BOINC</a></p><h3 id="参考">参考:</h3><p><a href="http://blog.joelchristian.com/?p=291" target="_blank" rel="noopener noreffer">http://blog.joelchristian.com/?p=291</a><br><a href="http://misctechmusings.com/linux/boinc-cli-for-world-community-grid/" target="_blank" rel="noopener noreffer">http://misctechmusings.com/linux/boinc-cli-for-world-community-grid/</a></p></description></item><item><title>网站部署记录</title><link>https://justpic.org/post/2013/10/27/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</link><pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/10/27/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/</guid><description><p>网站部署记录</p><p>安装基础python环境</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install nginx
sudo apt-get install git
sudo apt-get install mysql-server
sudo apt-get install python-dev
install easy_install on ubuntu:
sudo apt-get install python-setuptools
sudo easy_install virtualenv
sudo easy_install pip
virtualenv ~/trade
source ~/trade/bin/activate
install numpy scipy pandas and ta-lib
sudo pip install Cython</code></pre></td></tr></table></div></div><p><strong>安装 blas libs</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install gfortran libopenblas-dev liblapack-dev g++
pip install numpy
pip install scipy</code></pre></td></tr></table></div></div><p><strong>安装 ta-lib</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">cd ~
wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
sudo apt-get install build-essential
tar -zxvf ta-lib-0.4.0-src.tar.gz
cd ta-lib-0.4.0
./configure --prefix=/usr
make
sudo make install</code></pre></td></tr></table></div></div><p><strong>安装 gevent</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span><span class="lnt">8</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
tar -zxvf
./configure
make
sudo make install
cd ~/www
git clone https://github.com/pydata/pandas.git
git clone https://github.com/mrjbq7/ta-lib.git</code></pre></td></tr></table></div></div><p><strong>update the nginx</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo apt-get install sotware-properties-common
sudo add-apt-repository ppa:nginx/stable
sudo apt-get update
sudo apt-get install nginx</code></pre></td></tr></table></div></div><p><strong>mysql init</strong></p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install mysql-server libmysqld-dev
pip install MySQL-python
insert into mysql.user(Host,User,Password) values("localhost","username",password("password"));</code></pre></td></tr></table></div></div><p><strong>用户授权</strong><br>
给本地用户mql分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123456。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mysql>grant all privileges on *.* to username@localhost identified by 'password';</code></pre></td></tr></table></div></div><p><strong>安装 redis</strong><br>
具体参考<a href="http://rubyer.me/blog/638/redis.io" target="_blank" rel="noopener noreffer">install redis</a></p><p><strong>安装uwsgi 或者 gunicorn(可选)</strong></p></description></item><item><title>ubuntu系统安装numpy和scipy</title><link>https://justpic.org/post/2013/10/18/ubuntu-install-numpy-scipy/</link><pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/10/18/ubuntu-install-numpy-scipy/</guid><description><p>ubuntu系统安装numpy和scipy</p><h2 id="linux上安装numpy-scipy">linux上安装numpy scipy</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo pip install numpy
sudo apt-get install libatlas-base-dev gfortran
sudo pip install scipy
sudo pip install matplotlib # recommended</code></pre></td></tr></table></div></div></description></item><item><title>ubuntu系统上安装多版本python语言环境</title><link>https://justpic.org/post/2013/07/02/ubuntu-install-multi-python/</link><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/02/ubuntu-install-multi-python/</guid><description><p>ubuntu系统上安装多版本python语言环境</p><h3 id="ubuntu上安装多个版本的python">ubuntu上安装多个版本的python</h3><ol><li>安装python3.3在ubuntu上</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install python-software-properties
sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python3.3</code></pre></td></tr></table></div></div><ol start="2"><li>建立软链接：</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">ln -s /usr/bin/python3.3 /usr/bin/python3.3m</code></pre></td></tr></table></div></div><ol start="3"><li>安转python2.7.5再ubuntu上:</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo add-apt-repository ppa:fkrull/deadsnakes
sudo apt-get update
sudo apt-get install python2.4 python2.5 python2.6</code></pre></td></tr></table></div></div><ol start="4"><li>使用virtualenv来定制自己的环境</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">virtualenv -p /usr/bin/python3.3 python3.3env
virtualenv -p /usr/bin/python2.7.5 python2.7.5env</code></pre></td></tr></table></div></div><p>Ok!</p></description></item><item><title>ubuntu上安装hdf5</title><link>https://justpic.org/post/2013/06/05/ubuntu-install-hdf5/</link><pubDate>Wed, 05 Jun 2013 11:11:11 +0000</pubDate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/06/05/ubuntu-install-hdf5/</guid><description><p>ubuntu系统上安装hdf5</p><h3 id="install-hdf5-on-ubuntu-1204">install hdf5 on ubuntu 12.04</h3><p>1.you can probably install the debian libraries into quantal with no issues, precise is less likely to work, but it might possibly you will have to build it from source to get everything right.<br>
Code:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$apt-get install devscripts equivs ubuntu-dev-tools
$pull-debian-source hdf5 experimental
$cd hdf5-*
$sudo mk-build-deps -ir
$debuild -us -uc</code></pre></td></tr></table></div></div><p>2.上述方法现在已经不适用,Google后发现,可以直接使用hdf5二进制包,由于本机为64bit linux,下载64位下的二进制包:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$wget http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.9/bin/linux-x86_64/hdf5-1.8.9-linux-x86_64-shared.tar.gz</code></pre></td></tr></table></div></div><ol start="3"><li>解压后，并在.bashrc中设置：</li></ol><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">$export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:$HOME/hdf5-1.8.9-linux-x86_64-shared/lib
$export HDF5_DIR=$HOME/hdf5-1.8.9-linux-x86_64-shared
$source .bashrc</code></pre></td></tr></table></div></div><p>4.安装 blosc (可选)<br>
5.安装 lzo2-2 lzo2-dev</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo apt-get install lzo2-2 lzo2-dev</code></pre></td></tr></table></div></div><p>至此HDF5可用</p></description></item></channel></rss>