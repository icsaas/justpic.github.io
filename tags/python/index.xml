<html><body><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on 桑河一榆</title><link/>https://justpic.org/tags/python/<description>Recent content in python on 桑河一榆</description><generator>justpic</generator><language>zh-CN</language><managingeditor>matrix.orz@gmail.com (justpic)</managingeditor><webmaster>matrix.orz@gmail.com (justpic)</webmaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastbuilddate>Thu, 12 Mar 2020 22:21:33 +0800</lastbuilddate><atom:link href="https://justpic.org/tags/python/index.xml" rel="self" type="application/rss+xml"></atom:link><item><title>requests库中的那些高级用法</title><link/>https://justpic.org/post/2020/03/12/requsts-advance-usage/<pubdate>Thu, 12 Mar 2020 22:21:33 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/12/requsts-advance-usage/</guid><description><p>作为python中最通用的http工具库之一——requests，具有简洁、直观和全面的特点，一般来说，requests与python中的内置模块urllib3已经逐渐成为程序员处理HTTP请求的首选工具。</p><p>得益于requests简洁的API接口，在生产环境下得到了非常普遍的应用，即使在复杂的应用场景下，request的扩展性也非常好。如果你正在写一个API客户端或者网络爬虫，同时对断网情况比较棘手，那么下面所介绍的requests高级技巧可能会帮助你更好的进行程序调试。</p><h2 id="请求钩子">请求钩子</h2><p>应用第三方API时，需要验证应答内容是否合法，requests提供了raise_for_status()方法来判断应答内容的HTTP状态码是不是4xx或者5xx，表明请求产生了客户端或者服务器错误。</p><p>例如：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.github.com/user/repos?page=1'</span><span class="p">)</span><span class="c1"># 判断是否有无错误</span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span></code></pre></td></tr></table></div></div><p>每一次请求都调用raise_for_status会非常繁琐，requests非常贴心的提供了一个'钩子(hook)‘接口（通过在请求过程的特定部分指定回调函数）。
下面请看案例代码，通过使用hook来确保每次服务应答后，raise_for_status能被调用。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">assert_status_hook</span><span class="o">=</span><span class="k">lambda</span><span class="n">response</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">:</span><span class="n">response</span><span class="o">.</span><span class="n">raise_for_status</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">hooks</span><span class="p">[</span><span class="s1">'response'</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">assert_status_hook</span><span class="p">]</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.github.com/user/repos?page=1")</span><span class="o">&gt;</span><span class="n">HTTPError</span><span class="p">:</span><span class="mi">401</span><span class="n">Client</span><span class="n">Error</span><span class="p">:</span><span class="n">Unauthorized</span><span class="k">for</span><span class="n">url</span><span class="p">:</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">repos</span><span class="err">?</span><span class="n">page</span><span class="o">=</span><span class="mi">1</span></code></pre></td></tr></table></div></div><h2 id="设置基链接">设置基链接</h2><p>假设你只使用api.org上的一个api，你可能在每次调用时都要重复编写http协议和域名。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.org/list'</span><span class="p">)</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.org/list/3/item'</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>使用BaseUrlSession可以避免敲下这些重复的内容。
下面看案例代码，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">form</span><span class="n">requests_toolbelt</span><span class="kn">import</span><span class="nn">sessions</span><span class="n">http</span><span class="o">=</span><span class="n">sessions</span><span class="o">.</span><span class="n">BaseUrlSession</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="s2">"https://api.org"</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"/list"</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"/list/item"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p><strong>！注意requests_toolbelt没有默认包含在requests中的，使用时是需要额外安装的</strong></p><h2 id="设置默认超时">设置默认超时</h2><p>requests文档中推荐在生产环境下设置超时，如果你忘记设置超时，应用程序可能会当掉，尤其是在同步环境下，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://github.com/'</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>但是每次设置超时时间会非常繁琐，偶尔忘记设置超时会非常恼火。<img alt="giphy" class="lazyload" data-sizes="auto" data-src="" data-srcset="/images/posts/giphy.gif,  1.5x,  2x" src="/svg/loading.small.min.svg" title="giphy"/></p><p>使用Transport Adapters可以为所有的HTTP调用设置默认超时时间，当然使用后也是可以通过再定义覆盖默认配置，
下面看案例代码，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">requests.adapters</span><span class="kn">import</span><span class="n">HTTPAdapter</span><span class="n">DEFAULT_TIMEOUT</span><span class="o">=</span><span class="mi">5</span><span class="k">class</span><span class="nc">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">HTTPAdapter</span><span class="p">):</span><span class="k">def</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="o">=</span><span class="n">DEFAULT_TIMEOUT</span><span class="k">if</span><span class="s2">"timeout"</span><span class="ow">in</span><span class="n">kwargs</span><span class="p">:</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="o">=</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="k">del</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="k">def</span><span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">request</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="n">timeout</span><span class="o">=</span><span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"timeout"</span><span class="p">)</span><span class="k">if</span><span class="n">timeout</span><span class="ow">is</span><span class="bp">None</span><span class="p">:</span><span class="n">kwargs</span><span class="p">[</span><span class="s2">"timeout"</span><span class="p">]</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">timeout</span><span class="k">return</span><span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">request</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span><span class="c1">#使用</span><span class="kn">import</span><span class="nn">requests</span><span class="n">http</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">adapter</span><span class="o">=</span><span class="n">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">2.5</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"http://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="c1">#使用默认配置</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.weibo.com'</span><span class="p">)</span><span class="c1">#覆盖默认配置</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'https://api.weibo.com'</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span></code></pre></td></tr></table></div></div><h2 id="失败后的重试">失败后的重试</h2><p>服务器当掉后，网络连接会变得拥塞或者有损，如果想要建立更具鲁棒性的系统，那么必须考虑网络连接失败，以及建立重试策略。
在Http客户端上添加重试策略是非常直接的，我们来创建一个HTTPAdapter，然后在adapter上添加策略</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">requests.adapter</span><span class="kn">import</span><span class="n">HTTPAdapter</span><span class="kn">from</span><span class="nn">requests.packages.urllib3.util.retry</span><span class="kn">import</span><span class="n">Retry</span><span class="n">retry_strategy</span><span class="o">=</span><span class="n">Retry</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">429</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">502</span><span class="p">,</span><span class="mi">503</span><span class="p">,</span><span class="mi">504</span><span class="p">],</span><span class="n">method_whitelist</span><span class="o">=</span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="s2">"GET"</span><span class="p">,</span><span class="s2">"OPTIONS"</span><span class="p">]</span><span class="p">)</span><span class="n">adapter</span><span class="o">=</span><span class="n">HTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retry_strategy</span><span class="p">)</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"http://"</span><span class="p">,</span><span class="n">adapter</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://en.wikipedia.org/w/api.php"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>默认的 Retry 类提供了健全的默认值，但是是高度可配置的，所以这里是我使用的最常见参数的纲要。
其中</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">total</span><span class="o">=</span><span class="mi">3</span></code></pre></td></tr></table></div></div><p>total代表重试的总次数，如果失败的请求或者重定向的次数超过这个数字，客户端将抛出 urllib3.exceptions.Maxretryerror 异常。通常3次重试就足够了。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">413</span><span class="p">,</span><span class="mi">429</span><span class="p">,</span><span class="mi">503</span><span class="p">]</span></code></pre></td></tr></table></div></div><p>要重试的 HTTP 响应代码。 您可能希望对常见的服务器错误(500、502、503、504)进行重试，因为服务器和反向代理并不总是遵循 HTTP 规范。 总是在超出429速率限制的情况下重试，因为默认情况下，urllib 库应该在失败请求时增量地退出。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">method_whitelist</span><span class="o">=</span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="s2">"GET"</span><span class="p">,</span><span class="s2">"PUT"</span><span class="p">,</span><span class="s2">"DELETE"</span><span class="p">,</span><span class="s2">"OPTIONS"</span><span class="p">,</span><span class="s2">"TRACE"</span><span class="p">]</span></code></pre></td></tr></table></div></div><p>要重试的 HTTP 方法。 默认情况下，这包括除 POST 以外的所有 HTTP 方法，因为 POST 可能导致新的插入。 修改此参数以包含 POST，因为大多数 i 处理的 API 不返回错误代码并在同一调用中执行插入操作。 如果他们这样做了，您可能应该发布一个 bug 报告。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">backoff_factor</span><span class="o">=</span><span class="mi">0</span></code></pre></td></tr></table></div></div><p>backoff_factor(退避因子)与失败的请求之间休眠的时间有关，其算法如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">{</span><span class="n">backoff</span><span class="n">factor</span><span class="p">}</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="p">({</span><span class="n">number</span><span class="n">of</span><span class="n">total</span><span class="n">retries</span><span class="p">}</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span></code></pre></td></tr></table></div></div><p>例如，如果退避因子设置为:
1：连续睡眠：0.5，1，2，4，8，16，32，64，128，256
2：连续睡眠：1，2，4，8，16，32，64，128，256，512
10：连续睡眠：5，10，20，40，80，160，320，640，1280，2560
作为重试策略的合理默认实现，连续睡眠值是呈指数增长的，通过设置退避因子，可以决定每个睡眠乘以多少。这个值默认为0，表示不会设置截断二进制指数退避算法，重试将立即执行。</p><h3 id="结合超时和重试">结合超时和重试</h3><p>由于 HTTPAdapter 具有类比的特性，我们可以像下面这样将重试和超时结合起来:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">retries</span><span class="o">=</span><span class="n">Retry</span><span class="p">(</span><span class="n">total</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">backoff_factor</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">status_forcelist</span><span class="o">=</span><span class="p">[</span><span class="mi">429</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">502</span><span class="p">,</span><span class="mi">503</span><span class="p">,</span><span class="mi">504</span><span class="p">])</span><span class="n">http</span><span class="o">.</span><span class="n">mount</span><span class="p">(</span><span class="s2">"https://"</span><span class="p">,</span><span class="n">TimeoutHTTPAdapter</span><span class="p">(</span><span class="n">max_retries</span><span class="o">=</span><span class="n">retries</span><span class="p">))</span></code></pre></td></tr></table></div></div><h2 id="调试http请求">调试HTTP请求</h2><p>有时候请求会失败，而你却不知道为什么。 记录请求和响应可以帮助您了解故障。 有两种方法可以做到这一点——要么使用内置的调试日志记录设置，要么使用请求钩子。</p><h3 id="打印http头文件">打印HTTP头文件</h3><p>更改大于0的日志记录调试级别将记录响应 HTTP 报头。 这是最简单的选项，但它不允许您查看 HTTP 请求或响应体。 如果您处理的 API 返回一个不适合日志记录或包含二进制内容的大体有效负载，那么它是有用的。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="kn">import</span><span class="nn">http</span><span class="n">http</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">HTTPConnection</span><span class="o">.</span><span class="n">debuglevel</span><span class="o">=</span><span class="mi">1</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://www.google.com/"</span><span class="p">)</span><span class="c1"># Output</span><span class="n">send</span><span class="p">:</span><span class="sa">b</span><span class="s1">'GET / HTTP/1.1</span><span class="se">\r\n</span><span class="s1">Host: www.google.com</span><span class="se">\r\n</span><span class="s1">User-Agent: python-requests/2.22.0</span><span class="se">\r\n</span><span class="s1">Accept-Encoding: gzip, deflate</span><span class="se">\r\n</span><span class="s1">Accept: */*</span><span class="se">\r\n</span><span class="s1">Connection: keep-alive</span><span class="se">\r\n\r\n</span><span class="s1">'</span><span class="n">reply</span><span class="p">:</span><span class="s1">'HTTP/1.1 200 OK</span><span class="se">\r\n</span><span class="s1">'</span><span class="n">header</span><span class="p">:</span><span class="n">Date</span><span class="p">:</span><span class="n">Fri</span><span class="p">,</span><span class="mi">28</span><span class="n">Feb</span><span class="mi">2020</span><span class="mi">12</span><span class="p">:</span><span class="mi">13</span><span class="p">:</span><span class="mi">26</span><span class="n">GMT</span><span class="n">header</span><span class="p">:</span><span class="n">Expires</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="n">header</span><span class="p">:</span><span class="n">Cache</span><span class="o">-</span><span class="n">Control</span><span class="p">:</span><span class="n">private</span><span class="p">,</span><span class="nb">max</span><span class="o">-</span><span class="n">age</span><span class="o">=</span><span class="mi">0</span></code></pre></td></tr></table></div></div><h3 id="打印所有">打印所有</h3><p>如果您想记录整个 HTTP 生命周期，包括请求和响应的文本表示，那么您可以使用请求钩子和请求工具自带的转储组件。
在处理基于 REST 的 API 时，我更喜欢这个选项，因为它不会返回非常大的响应。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="kn">from</span><span class="nn">requests_toolbelt.utils</span><span class="kn">import</span><span class="n">dump</span><span class="k">def</span><span class="nf">logging_hook</span><span class="p">(</span><span class="n">response</span><span class="p">,</span><span class="o">*</span><span class="n">args</span><span class="p">,</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span><span class="n">data</span><span class="o">=</span><span class="n">dump</span><span class="o">.</span><span class="n">dump_all</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">'utf-8'</span><span class="p">))</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">hooks</span><span class="p">[</span><span class="s2">"response"</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="n">logging_hook</span><span class="p">]</span><span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://api.openaq.org/v1/cities"</span><span class="p">,</span><span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"BA"</span><span class="p">})</span><span class="c1"># Output</span><span class="o">&lt;</span><span class="n">GET</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">cities</span><span class="err">?</span><span class="n">country</span><span class="o">=</span><span class="n">BA</span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span><span class="o">&lt;</span><span class="n">Host</span><span class="p">:</span><span class="n">api</span><span class="o">.</span><span class="n">openaq</span><span class="o">.</span><span class="n">org</span><span class="o">&gt;</span><span class="n">HTTP</span><span class="o">/</span><span class="mf">1.1</span><span class="mi">200</span><span class="n">OK</span><span class="o">&gt;</span><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="p">:</span><span class="n">application</span><span class="o">/</span><span class="n">json</span><span class="p">;</span><span class="n">charset</span><span class="o">=</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&gt;</span><span class="n">Transfer</span><span class="o">-</span><span class="n">Encoding</span><span class="p">:</span><span class="n">chunked</span><span class="o">&gt;</span><span class="n">Connection</span><span class="p">:</span><span class="n">keep</span><span class="o">-</span><span class="n">alive</span><span class="o">&gt;</span><span class="p">{</span><span class="s2">"meta"</span><span class="p">:{</span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"openaq-api"</span><span class="p">,</span><span class="s2">"license"</span><span class="p">:</span><span class="s2">"CC BY 4.0"</span><span class="p">,</span><span class="s2">"website"</span><span class="p">:</span><span class="s2">"https://docs.openaq.org/"</span><span class="p">,</span><span class="s2">"page"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="s2">"limit"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="s2">"found"</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span><span class="s2">"results"</span><span class="p">:[</span><span class="p">{</span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"BA"</span><span class="p">,</span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Goražde"</span><span class="p">,</span><span class="s2">"city"</span><span class="p">:</span><span class="s2">"Goražde"</span><span class="p">,</span><span class="s2">"count"</span><span class="p">:</span><span class="mi">70797</span><span class="p">,</span><span class="s2">"locations"</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span><span class="p">]</span><span class="p">}</span></code></pre></td></tr></table></div></div><h2 id="测试和模拟请求">测试和模拟请求</h2><p>在开发中使用第三方 API 会引入一个痛点——很难进行单元测试。 为减轻这种痛苦，Sentry 的工程师在开发过程中编写了一个模拟请求的库。</p><blockquote><p>不是将 HTTP 响应发送给服务器 getsentry / responses，而是截取 HTTP 请求，在应答时，测试过程中添加预定义的响应内容。</p></blockquote><p>下面请看案例代码</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">unittest</span><span class="kn">import</span><span class="nn">requests</span><span class="kn">import</span><span class="nn">responses</span><span class="k">class</span><span class="nc">TestAPI</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="nd">@responses.activate</span><span class="c1"># intercept HTTP calls within this method</span><span class="k">def</span><span class="nf">test_simple</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">response_data</span><span class="o">=</span><span class="p">{</span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"ch_1GH8so2eZvKYlo2CSMeAfRqt"</span><span class="p">,</span><span class="s2">"object"</span><span class="p">:</span><span class="s2">"charge"</span><span class="p">,</span><span class="s2">"customer"</span><span class="p">:</span><span class="p">{</span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"cu_1GGwoc2eZvKYlo2CL2m31GRn"</span><span class="p">,</span><span class="s2">"object"</span><span class="p">:</span><span class="s2">"customer"</span><span class="p">},</span><span class="p">}</span><span class="c1"># mock the Stripe API</span><span class="n">responses</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">responses</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">,</span><span class="n">json</span><span class="o">=</span><span class="n">response_data</span><span class="p">,</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">)</span><span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">json</span><span class="p">(),</span><span class="n">response_data</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>如果发出的 HTTP 请求与模拟响应不匹配，则会抛出 ConnectionError。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span><span class="nc">TestAPI</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span><span class="nd">@responses.activate</span><span class="k">def</span><span class="nf">test_simple</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span><span class="n">responses</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">responses</span><span class="o">.</span><span class="n">GET</span><span class="p">,</span><span class="s2">"https://api.stripe.com/v1/charges"</span><span class="p">)</span><span class="n">response</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"https://invalid-request.com"</span><span class="p">)</span></code></pre></td></tr></table></div></div><p>输出：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span><span class="lnt">6</span><span class="lnt">7</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">requests</span><span class="o">.</span><span class="n">exceptions</span><span class="o">.</span><span class="n">ConnectionError</span><span class="p">:</span><span class="n">Connection</span><span class="n">refused</span><span class="n">by</span><span class="n">Responses</span><span class="o">-</span><span class="n">the</span><span class="n">call</span><span class="n">doesn</span><span class="s1">'t match any registered mock.</span><span class="n">Request</span><span class="p">:</span><span class="o">-</span><span class="n">GET</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">invalid</span><span class="o">-</span><span class="n">request</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">Available</span><span class="n">matches</span><span class="p">:</span><span class="o">-</span><span class="n">GET</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">api</span><span class="o">.</span><span class="n">stripe</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">v1</span><span class="o">/</span><span class="n">charges</span></code></pre></td></tr></table></div></div><h2 id="模仿浏览器行为">模仿浏览器行为</h2><p>如果你已经写了足够多的网络爬虫代码，你将会注意到某些网站会根据浏览器或者请求方式返回不同的 HTML内容。 有时这是一种反抓取措施，但通常服务器会进行用户代理嗅探，以找出最适合设备的内容(例如桌面或移动设备)。
如果你想返回与浏览器显示的内容相同的内容，你可以使用 Firefox 或 Chrome 发送的内容覆盖默认的 User-Agent 头请求集。</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span><span class="lnt">5</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span><span class="nn">requests</span><span class="n">http</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">Session</span><span class="p">()</span><span class="n">http</span><span class="o">.</span><span class="n">headers</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"User-Agent"</span><span class="p">:</span><span class="s2">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0"</span><span class="p">})</span></code></pre></td></tr></table></div></div><hr/><p>参考：</p><ul><li><a href="https://hodovi.ch/blog/advanced-usage-python-requests-timeouts-retries-hooks/" rel="noopener noreffer" target="_blank">Advanced usage of Python requests - timeouts, retries, hooks</a></li></ul></description></item><item><title>Jupyter最佳实践</title><link/>https://justpic.org/post/2020/03/09/jupyter-best-practice/<pubdate>Mon, 09 Mar 2020 23:30:29 +0800</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2020/03/09/jupyter-best-practice/</guid><description><p>广受各大企业赞助的<a href="https://jupyter.org/about" rel="noopener noreffer" target="_blank">jupyter团队</a>
所开发的jupyter系列产品(主要包括jupyter notebook、jupyterlab和jupyterhub)，在数据科学领域变得越来越火热，依托python强大的语言生态，得益于其良好的扩展性和友好的用户交互，jupyter逐渐成为数据分析可视化的首选开源工具之一，下面将对数据分析实践过程中针对jupyter的调研分析进行小结.如果你正在使用python语言进行相关数据分析，本文所记录的jupyter相关实践可能对你会有所帮助。</p><div class="hugo-encryptor-container"><div class="hugo-encryptor-prompt"><p>文章的部分内容被密码保护：</p></div><div class="hugo-encryptor-form"><input class="hugo-encryptor-input" placeholder="请输入密码"/><input class="hugo-encryptor-button" onclick="_click_handler(this)" type="button" value="点击验证"/></div><div class="hugo-encryptor-cipher-text" style="display: none;">H+LJ0OExuMhwMkllHSMz+R7otx8cAgXPuZONswo/X9sqJRUa5wieJ20pi7ajp3kNNmjR1C+Y2KPueoJqY8+lGg8BZvOZkXMpT7tyQpAoovMV2qunM1As+b7z4Rmt2D3H</div></div><hr/><blockquote><p>本文将主要从jupyter产品介绍、产品（jupyter notebook、jupyter lab和jupyterhub）的安装试用、jupyter 扩展优化、以及jupyter竞品分析等四大方面对jupyter的实践进行一个简短的介绍和回顾：</p></blockquote><h2 id="jupyter产品介绍">jupyter产品介绍：</h2><p>根据jupyter官方网站，jupyter产品主要包括jupyter notebook、jupyter lab和jupyterhub三款产品，根据文章<code>jupyter notebook、jupyterlab与jupyterhub的区别与联系</code><sup id="fnref:1"><a class="footnote-ref" href="#fn:1" role="doc-noteref">1</a></sup>,三者的联系和区别如下：</p><ol><li>jupyter notebook提供了一个交互友好的类webIDE环境，但Jupyter Notebook 是传统的单体服务架构模式, 缺少多用户管理和访问认证等方面的功能, 无法直接部署于计算集群上, 难以充分利用和调度计算中心的计算资源 。</li><li>jupyter lab提供了单用户管理和认证，没有提供独立的工作空间，与jupyter notebook相比，功能更为丰富。</li><li>jupyter hub提供了多用户管理和认证，支持OAuth协议，为用户提供了独立的工作空间，工作内容可以私有不共享。</li></ol><p>在了解了jupyter系列产品后，就可以进行产品的安装和使用了。当然你也可以参考这些文章2<sup id="fnref:2"><a class="footnote-ref" href="#fn:2" role="doc-noteref">2</a></sup>和3<sup id="fnref:3"><a class="footnote-ref" href="#fn:3" role="doc-noteref">3</a></sup>、4<sup id="fnref:4"><a class="footnote-ref" href="#fn:4" role="doc-noteref">4</a></sup>、5<sup id="fnref:5"><a class="footnote-ref" href="#fn:5" role="doc-noteref">5</a></sup>来快速入门jupyter的使用.</p><h2 id="产品安装使用">产品安装使用</h2><h3 id="安装">安装</h3><blockquote><p>根据以上的产品介绍，可以根据自己的需求选择安装jupyter notebook、jupyter lab还是jupyterhub。具体参考建议如下：</p><ol><li>个人本地使用，安装快速方便–jupyter notebook</li><li>个人使用，可能会远程操作，需要额外的安装工作–jupyter lab</li><li>小型团队使用，可能需要额外的运维工作– jupyter hub</li></ol></blockquote><p><strong>安装jupyter notebook</strong><br/>
jupyter notebook目前已经包含在Anaconda安装包中，随Anaconda将一同安装，不需要额外的安装操作，如果你想了解更多jupyter notebook安装细节，可以参考文章<sup id="fnref:6"><a class="footnote-ref" href="#fn:6" role="doc-noteref">6</a></sup>和文章<sup id="fnref:7"><a class="footnote-ref" href="#fn:7" role="doc-noteref">7</a></sup>。</p><p><strong>安装jupyter lab</strong><br/>
jupyter lab可以通过pip，conda命令(Anaconda环境)作为jupyter notebook的扩展进行选装。
安装命令如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">pip install jupyterlab<span class="c1">#或者</span>
conda install -c conda-forge jupyterlab</code></pre></td></tr></table></div></div><p>使用过程中，jupyterlab的作用更像一个功能强大的webshell，除支持文件上传，命令行等操作外，能够更直观地管理jupyter notebook的其他扩展。</p><p><strong>安装jupyterhub</strong><br/>
jupyterhub的docker化安装步骤如下：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1">#step1.创建共享目录</span><span class="nv">$mkdir</span> -p<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/jupyterhub<span class="nv">$mkdir</span> -p<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/home<span class="c1">#step2.启动镜像</span><span class="c1">#docker run -p 8000:8000 -d --name jupyterhub -v /opt/jupyterhub/jupyterhub:/srv/jupyterhub -v /opt/jupyterhub/home:/home --restart=always jupyterhub/jupyterhub jupyterhub</span>
docker run -p 8000:8000 -d --name jupyterhub -v<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/jupyterhub:/srv/jupyterhub -v<span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/jupyterhub/home:/home jupyterhub/jupyterhub jupyterhub<span class="c1">#step3.进入到容器内操作</span>
docker<span class="nb">exec</span> -it jupyterhub bash
chmod -R<span class="m">777</span> /home<span class="c1">#step4.添加用户和设置密码</span>
useradd jupyterhub
passwd jupyterhub<span class="c1">#step5.浏览器访问测试</span>
http://<span class="o">{</span>yourip<span class="o">}</span>:8000
!替换yourip为本机ip地址</code></pre></td></tr></table></div></div><h3 id="使用">使用</h3><p><strong>启动jupyter</strong></p><ol><li>启动jupyter notebook<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">jupyter notebook<span class="c1"># 更多命令可额外输入--help进行查看</span></code></pre></td></tr></table></div></div></li><li>启动jupyter lab<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">jupyter lab<span class="c1"># 更多命令可额外输入--help进行查看</span></code></pre></td></tr></table></div></div></li></ol><p><strong>excel表格处理</strong><br/>
jupyternotebook中使用pandas可以方便的处理excel文件，简单的差集、并集、交集运算使用几句简单的代码即可完成。<br/><strong>数据可视化分析</strong><br/>
结合pandas工具包可以非常方便的进行数据的基础分析，使用plot工具包可以完成交互性比较友好的动态数据分析图表。</p><h2 id="jupyter扩展">jupyter扩展</h2><p>为了提升jupyter的使用体验，目前已经有非常多的jupyter扩展可供使用，其范围除了优化其本身可视化交互体验之外，还涵盖了排版、多语言支持等功能。<br/>
文章8<sup id="fnref:8"><a class="footnote-ref" href="#fn:8" role="doc-noteref">8</a></sup>介绍了常用的99种jupyter扩展，
文章9<sup id="fnref:9"><a class="footnote-ref" href="#fn:9" role="doc-noteref">9</a></sup>中所介绍的扩展主要围绕人工智能（AI）进行展开，
文章10<sup id="fnref:10"><a class="footnote-ref" href="#fn:10" role="doc-noteref">10</a></sup>介绍了提升jupyter使用环境体验的相关实践，
文章11<sup id="fnref:11"><a class="footnote-ref" href="#fn:11" role="doc-noteref">11</a></sup>介绍了扩展jupyter的99种方法，
文章12<sup id="fnref:12"><a class="footnote-ref" href="#fn:12" role="doc-noteref">12</a></sup>介绍了生成pages的方法，
文章13<sup id="fnref:13"><a class="footnote-ref" href="#fn:13" role="doc-noteref">13</a></sup>中通过低代码方式使用jupyter notebook，进一步降低了jupyter的难度、提高了jupyter的交互友好度。
文章14<sup id="fnref:14"><a class="footnote-ref" href="#fn:14" role="doc-noteref">14</a></sup>主要介绍了jupyter notebook的基础架构，如果需要进行进一步应用开发集成，对其基础架构了解是必须的。</p><p><strong>pyspark集成</strong><br/>
大数据相关技术的发展，jupyter支持与spark进行相关集成</p><h3 id="技术架构分析">技术架构分析</h3><p>jupyter 使用了较新的web技术（Websocket等）来保证用户交互的友好性，提供了一种混合的编辑方式, 将程序
代码运行、文字图表编辑等功能糅合在同一电子笔记中, 打破了两者之间的隔离界限.fastpage<sup id="fnref:12"><a class="footnote-ref" href="#fn:12" role="doc-noteref">12</a></sup>介绍了将jupyternotebook内容导出为page，可以直接应用于博客或者出版，进一步提高了jupyter的可扩展性。为了集成和二次开发jupyter，通过文章<code>技术架构分析</code><sup id="fnref:14"><a class="footnote-ref" href="#fn:14" role="doc-noteref">14</a></sup>中对jupyter的技术架构进行简单的了解，得出如下jupyter架构图，<br/><img alt="架构图" class="lazyload" data-sizes="auto" data-src="" data-srcset="/images/posts/jupyter-arch.jpg,  1.5x,  2x" src="/svg/loading.small.min.svg" title="架构图"/></p><h2 id="jupyter竞品分析">jupyter竞品分析</h2><p>通过搜索，Netflix发布的Polynote<sup id="fnref:15"><a class="footnote-ref" href="#fn:15" role="doc-noteref">15</a></sup>有可能成为jupyter的竞品，除此之外，阿里巴巴、kaggle以及大多数据竞赛平台也开始提供类似jupyter的数据分析平台以方便开发者快速使用。</p><p>如果你有更好的想法和建议，欢迎留言。</p><hr/><p><strong>参考</strong></p><section class="footnotes" role="doc-endnotes"><hr/><ol><li id="fn:1" role="doc-endnote"><p><a href="https://www.imooc.com/article/300868" rel="noopener noreffer" target="_blank">jupyter notebook、jupyterlab与jupyterhub的区别与联系</a><a class="footnote-backref" href="#fnref:1" role="doc-backlink">↩︎</a></p></li><li id="fn:2" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/O3vXXaqG9-E7mRT-_wARWw" rel="noopener noreffer" target="_blank">数据科学和机器学习，jupyternotebook入门指南</a><a class="footnote-backref" href="#fnref:2" role="doc-backlink">↩︎</a></p></li><li id="fn:3" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/aJRVh7BWOMq4KCoBMtLGGw" rel="noopener noreffer" target="_blank">快速学习jupyternotebook</a><a class="footnote-backref" href="#fnref:3" role="doc-backlink">↩︎</a></p></li><li id="fn:4" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/24B1TSmMPYphXI-0ij3fJQ" rel="noopener noreffer" target="_blank">jupyter notebook数据格式解析</a><a class="footnote-backref" href="#fnref:4" role="doc-backlink">↩︎</a></p></li><li id="fn:5" role="doc-endnote"><p><a href="https://justpic.org/post/latex-math-symbol/" rel="noopener noreffer" target="_blank">latex数学符号</a><a class="footnote-backref" href="#fnref:5" role="doc-backlink">↩︎</a></p></li><li id="fn:6" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/PJmVJ-pESb6bkLf9Nq-A1Q" rel="noopener noreffer" target="_blank">十分钟搭建你的jupyternotebook服务器</a><a class="footnote-backref" href="#fnref:6" role="doc-backlink">↩︎</a></p></li><li id="fn:7" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/1nTP7uLAJuOYW-WXVE_-cg" rel="noopener noreffer" target="_blank">使用jupyternotebook进行远程炼丹</a><a class="footnote-backref" href="#fnref:7" role="doc-backlink">↩︎</a></p></li><li id="fn:8" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/BSim0lMo0T0JiunnKqHzNg" rel="noopener noreffer" target="_blank">让jupyter更强大的99中武器</a><a class="footnote-backref" href="#fnref:8" role="doc-backlink">↩︎</a></p></li><li id="fn:9" role="doc-endnote"><p><a href="https://github.com/elyra-ai/elyra" rel="noopener noreffer" target="_blank">Elyra：基于AI技术的JupyterLab实用扩展集</a><a class="footnote-backref" href="#fnref:9" role="doc-backlink">↩︎</a></p></li><li id="fn:10" role="doc-endnote"><p><a href="https://medium.com/m/global-identity?redirectUrl=https%3A%2F%2Ftowardsdatascience.com%2Felevate-your-jupyter-notebook-environment-experience-9bdd1101aa54" rel="noopener noreffer" target="_blank">Elevate Your Jupyter Notebook Environment Experience</a><a class="footnote-backref" href="#fnref:10" role="doc-backlink">↩︎</a></p></li><li id="fn:11" role="doc-endnote"><p><a href="https://python.freelycode.com/contribution/detail/1632" rel="noopener noreffer" target="_blank">扩展Jupyter生态系统的99种方法</a><a class="footnote-backref" href="#fnref:11" role="doc-backlink">↩︎</a></p></li><li id="fn:12" role="doc-endnote"><p><a href="https://fastpages.fast.ai/fastpages/jupyter/2020/02/21/introducing-fastpages.html" rel="noopener noreffer" target="_blank">jupyter生成pages</a><a class="footnote-backref" href="#fnref:12" role="doc-backlink">↩︎</a></p></li><li id="fn:13" role="doc-endnote"><p><a href="https://github.com/herqooly/herqooly" rel="noopener noreffer" target="_blank">低代码方式使用jupyter</a><a class="footnote-backref" href="#fnref:13" role="doc-backlink">↩︎</a></p></li><li id="fn:14" role="doc-endnote"><p><a href="https://blog.just4fun.site/post/%E6%9E%B6%E6%9E%84/jupyter-notebook-architecture/" rel="noopener noreffer" target="_blank">jupyter notebook架构分析</a><a class="footnote-backref" href="#fnref:14" role="doc-backlink">↩︎</a></p></li><li id="fn:15" role="doc-endnote"><p><a href="https://mp.weixin.qq.com/s/bwtENwhO7EFQqW5XJduJ-A" rel="noopener noreffer" target="_blank">还有比 Jupyter 更好用的工具</a><a class="footnote-backref" href="#fnref:15" role="doc-backlink">↩︎</a></p></li></ol></section></description></item><item><title>tornado异步网络编程实践</title><link/>https://justpic.org/post/2016/09/08/tornado-async-web/<pubdate>Thu, 08 Sep 2016 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2016/09/08/tornado-async-web/</guid><description><p>tornado异步网络编程实践</p><p><strong>异步tornado请求</strong><br/>
底层建立socket通讯，服务器采用epoll方案，即时返回请求，轮询到后台任务结束时，通过socket发送数据到客户端。<br/>
理解异步过程：
http请求断了，tcp层面上的socket连接还在保持，客户端通过再次发送http请求，可以得到后台处理的结果，long pooling技术，socket套接字主要由ip地址、tcp/ip协议和端口号决定，利用epoll的套接字复用技术，能够保证任务请求能够发送到正确的客户端上，</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">server {
listen 80;
server_name yourdomain.tld;
location / {
try_files $uri @tornado;
}
location @tornado {
proxy_pass http://localhost:8888;
}
}
user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">user nginx;
worker_processes 1;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;
events {
worker_connections 1024;
use epoll;
}
http {
# 在upstream中列出所有的tornado server,当然如果你要做不同的路由跳转的时候可以定义多个upstream
upstream frontends {
server 127.0.0.1:8000;
server 127.0.0.1:8001;
server 127.0.0.1:8002;
server 127.0.0.1:8003;
}
include /etc/nginx/mime.types;
default_type application/octet-stream;
access_log /var/log/nginx/access.log;
keepalive_timeout 65;
proxy_read_timeout 200;
sendfile on;
tcp_nopush on;
tcp_nodelay on;
gzip on;
gzip_min_length 1000;
gzip_proxied any;
gzip_types text/plain text/html text/css text/xml
application/x-javascript application/xml
application/atom+xml text/javascript;
# Only retry if there was a communication error, not a timeout
# on the Tornado server (to avoid propagating "queries of death"
# to all frontends)
proxy_next_upstream error;
server {
listen 80;
# Allow file uploads
client_max_body_size 50M;
location ^~ /static/ {
root /var/www;
if ($query_string) {
expires max;
}
}
location = /favicon.ico {
rewrite (.*) /static/favicon.ico;
}
location = /robots.txt {
rewrite (.*) /static/robots.txt;
}
location / {
proxy_pass_header Server;
proxy_set_header Host $http_host;
proxy_redirect off;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Scheme $scheme;
proxy_pass http://frontends;
}
}
}</code></pre></td></tr></table></div></div><hr/><p>参考</p><ul><li><a href="http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html" rel="noopener noreffer" target="_blank">http://golubenco.org/understanding-the-code-inside-tornado-the-asynchronous-web-server-powering-friendfeed.html</a></li><li><a href="http://zqdevres.qiniucdn.com/data/20100927213110/index.html" rel="noopener noreffer" target="_blank">http://zqdevres.qiniucdn.com/data/20100927213110/index.html</a></li><li><a href="http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/" rel="noopener noreffer" target="_blank">http://xiaorui.cc/2016/06/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8E%8B%E6%B5%8B%E5%BC%95%E8%B5%B7%E7%9A%84nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</a></li><li><a href="http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado" rel="noopener noreffer" target="_blank">http://stackoverflow.com/questions/32261494/should-we-do-database-calls-async-with-tornado</a></li><li><a href="http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/" rel="noopener noreffer" target="_blank">http://www.dongwm.com/archives/shi-yong-tornadorang-ni-de-qing-qiu-yi-bu-fei-zu-sai/</a></li><li><a href="http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/" rel="noopener noreffer" target="_blank">http://qinxuye.me/article/ways-to-continual-sync-browser-and-server/</a></li></ul></description></item><item><title>windows系统使用python环境</title><link/>https://justpic.org/post/2015/03/14/windows%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8python%E7%8E%AF%E5%A2%83/<pubdate>Sat, 14 Mar 2015 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2015/03/14/windows%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8python%E7%8E%AF%E5%A2%83/</guid><description><p>windows系统使用python环境</p><h3 id="windows-64安装libxml2dom小记">windows 64安装libxml2dom小记</h3><h4 id="用于解决no-module-named-libxmlmods等错误">用于解决no module named libxmlmods等错误</h4><blockquote><p>此<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noopener noreffer" target="_blank">网站</a>
上面有编译好了的各种python windows包.</p></blockquote><p>我们首先下载<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/z94jfosk/libxml2_python-2.9.2-cp27-none-win_amd64.whl" rel="noopener noreffer" target="_blank">libxml2-python</a><br/>
然后使用pip wheel安装：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">pip wheeel libxml2_python-2.9.2-cp27-none-win_amd64.whl
pip install --use-wheel --no-index --find-links=wheelhouse libxml2-python
easy_install libxml2dom</code></pre></td></tr></table></div></div><p>至此安装libxml2dom完毕</p><h3 id="windows-64安装pycurl小记">windows 64安装pycurl小记</h3><p>首先下载<a href="http://curl.haxx.se/gknw.net/7.40.0/dist-w64/curl-7.40.0-devel-mingw64.7z" rel="noopener noreffer" target="_blank">curl 64bit mingw</a><br/>
然后git clone<a href="https://github.com/pycurl/pycurl.git">https://github.com/pycurl/pycurl.git</a>，进入到pycurl目录，修改setup.py<br/>
CURL_DIR=$CURL_PATH
编译，安装，完毕。
以上方法还是没有安装成功，还是使用上面网站里的编译好的安装包进行安装，下载<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/z94jfosk/pycurl-7.19.5.1-cp27-none-win_amd64.whl" rel="noopener noreffer" target="_blank">pycurl-7.19.5.1-cp27-none-win_amd64.whl</a><br/>
使用以下命令进行安装：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> pip wheel pycurl-7.19.5.1-cp27-none-win_amd64.whl
pip install --</code></pre></td></tr></table></div></div><h3 id="windows上的python环境搭建">windows上的python环境搭建：</h3><p>安装Anaconda。</p></description></item><item><title>tornado 国际化实践</title><link/>https://justpic.org/post/2014/04/27/tornado-%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E8%B7%B5/<pubdate>Sun, 27 Apr 2014 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2014/04/27/tornado-%E5%9B%BD%E9%99%85%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid><description><p>tornado i18n国际化</p><blockquote><p>i18n是国际化的简称（Internationalization,去掉开始的I和最后的N，中间一共18个字符）。
tornado中使用i18n,需要下面两个工具(pygettext,msgfmt)和两个相关文件（po文件和mo文件）</p></blockquote><h3 id="pygetext和msgfmt的使用方法">pygetext和msgfmt的使用方法</h3><ol><li><p>编写python代码文件 test.py</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span><span class="nn">gettext</span><span class="kn">import</span><span class="n">gettext</span><span class="k">as</span><span class="n">_</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"well down"</span><span class="p">)</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"good"</span><span class="p">)</span></code></pre></td></tr></table></div></div></li><li><p>运行以下命令</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">pygetext test.py</code></pre></td></tr></table></div></div></li><li><p>生成messages.pot文件,更改文件后缀</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">mv messages.pot messages.po</code></pre></td></tr></table></div></div></li><li><p>配置msgstr值<br/>
生成一个名为messages.mo文件：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell">msgfmt messages.po<span class="c1">#建立目录locale/cn/LC_MESSAGES/</span>
mv messages.po locale/cn/LC_MESSAGES</code></pre></td></tr></table></div></div><p>cn目录是所对应的语言，LC_MESSAGES是gettext.py文件里要求的
mo文件必须和所定义的域同名
gettext.py中有
modfile=os.path.join(localedir,lang,‘LC_MESSAGES’,'%s.mo’ %domain)</p><p>测试：</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$python</span>
&gt;&gt;&gt;gettext.install<span class="o">(</span><span class="s1">'messages'</span>,<span class="s1">'./locale'</span>,unicode<span class="o">=</span>True<span class="o">)</span></code></pre></td></tr></table></div></div><p>三个参数：</p><ul><li>作用域名:用于限定翻译文件的主名</li><li>路径:存放翻译文件的路径</li><li>unicode:是否使用unicode（如果应用程序是unicode的，此处应设为True)</li></ul><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span><span class="n">gettext</span><span class="o">.</span><span class="n">translation</span><span class="p">(</span><span class="s1">'messages'</span><span class="p">,</span><span class="s1">'./locale'</span><span class="p">,</span><span class="n">languages</span><span class="o">=</span><span class="p">[</span><span class="s1">'cn'</span><span class="p">])</span><span class="o">.</span><span class="n">install</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span><span class="o">&gt;&gt;&gt;</span><span class="k">print</span><span class="n">_</span><span class="p">(</span><span class="s2">"good"</span><span class="p">)</span></code></pre></td></tr></table></div></div></li></ol><h3 id="tornado中的应用">tornado中的应用</h3><ol><li>运行以下命令<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$xgettext</span> -L python -k<span class="o">=</span>_ -o openquant.po<span class="k">$(</span>find . -name<span class="se">\*</span>.py<span class="k">)</span><span class="k">$(</span>find template/ -name<span class="se">\*</span>.html<span class="k">)</span></code></pre></td></tr></table></div></div></li><li>查找所有需要翻译的相关项生成 po 文件<div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">$msgfmt</span> openquant.po -o locale/zh_CN/LC_MESSAGES/openquant.mo</code></pre></td></tr></table></div></div></li></ol><p>完成mo文件的生成<br/>
4. 完成相关文件的生成后，需要在代码中加载:<code>tornado.locale.load_gettext_translations(options.I18N_PATH,"openquant")</code>
5. handler中自定义get_user_locale函数：
```
def get_user_locale(self):
#zh_CN or en_US
user_locale = self.get_cookie(“user_locale”)</p><pre><code> if user_locale:
return tornado.locale.get(user_locale)
return None
```</code></pre><hr/><p><em>参考</em></p><ul><li><a href="http://www.ylinux.org/imind/167" rel="noopener noreffer" target="_blank">iMind</a></li><li><a href="http://justbm.blogspot.com/2014/01/django.html" rel="noopener noreffer" target="_blank">django多国语言</a></li></ul></description></item><item><title>ubuntu系统安装numpy和scipy</title><link/>https://justpic.org/post/2013/10/18/ubuntu-install-numpy-scipy/<pubdate>Fri, 18 Oct 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/10/18/ubuntu-install-numpy-scipy/</guid><description><p>ubuntu系统安装numpy和scipy</p><h2 id="linux上安装numpy-scipy">linux上安装numpy scipy</h2><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt">1</span><span class="lnt">2</span><span class="lnt">3</span><span class="lnt">4</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">sudo pip install numpy
sudo apt-get install libatlas-base-dev gfortran
sudo pip install scipy
sudo pip install matplotlib # recommended</code></pre></td></tr></table></div></div></description></item><item><title>sqlalchemy动态映射</title><link/>https://justpic.org/post/2013/07/26/django-sqlalchemy-mapping/<pubdate>Fri, 26 Jul 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/26/django-sqlalchemy-mapping/</guid><description><p>django中使用sqlalchemy进行动态映射</p><h1 id="sqlalchemy动态映射">sqlalchemy动态映射</h1><p>代码如下:</p><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback"> from sqlalchemy import *
from sqlalchemy.orm import *
metadata=MetaData(create_engine("sqlite://",echo=True)
t1=Table("t1",metadata,Column('id',Integer,primary_key=True))
t2=Table("t2",metadata,Column("id",Integer,primary_key=True))
metadata.create_all()
def map_class_to_some_table(cls,table,entity_name,**kw):
newcls=type(entity_name,(cls,),{})
mapper(newcls,table,**kw)
return newcls
class Foo(object):
pass
T1Foo=map_class_to_some_table(Foo,t1,"T1Foo")
T2Foo=map_class_to_some_table(Foo,t2,"T2Foo")
sess=sessionmaker()()
sess.add_all([T1Foo(),T1Foo(),T2Foo(),T1Foo()])
print sess.query(T1Foo).all()
print sess.query(T2Foo).all()</code></pre></td></tr></table></div></div></description></item><item><title>使用python进行异步网络编程</title><link/>https://justpic.org/post/2013/07/15/python-async-programming/<pubdate>Mon, 15 Jul 2013 00:00:00 +0000</pubdate><author>matrix.orz@gmail.com (justpic)</author><guid>https://justpic.org/post/2013/07/15/python-async-programming/</guid><description><p>python异步网络编程初探</p><h2 id="使用python进行selectpollepoll-测试">使用python进行select,poll,epoll 测试</h2><h3 id="select测试">select测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># selecttest.py</span><span class="kn">import</span><span class="nn">select</span><span class="kn">import</span><span class="nn">socket</span><span class="kn">import</span><span class="nn">Queue</span><span class="c1">#create a socket</span><span class="n">server</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span><span class="c1">#set option reused</span><span class="n">server</span><span class="o">.</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">SOL_SOCKET</span><span class="p">,</span><span class="n">socket</span><span class="o">.</span><span class="n">SO_REUSEADDR</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="n">server_address</span><span class="o">=</span><span class="p">(</span><span class="s1">'localhost'</span><span class="p">,</span><span class="mi">10001</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">server_address</span><span class="p">)</span><span class="n">server</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="c1">#sockets from which we except to read</span><span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="n">server</span><span class="p">]</span><span class="c1">#sockets from which we expect to write</span><span class="n">outputs</span><span class="o">=</span><span class="p">[]</span><span class="c1">#Outgoing message queues (socket:Queue)</span><span class="n">message_queues</span><span class="o">=</span><span class="p">{}</span><span class="c1">#A optional parameter for select is TIMEOUT</span><span class="n">timeout</span><span class="o">=</span><span class="mi">20</span><span class="k">while</span><span class="n">inputs</span><span class="p">:</span><span class="k">print</span><span class="s2">"waiting for next event"</span><span class="c1">#first parameter--read list,second parameter--write list,third parameter--error list</span><span class="n">readable</span><span class="p">,</span><span class="n">writable</span><span class="p">,</span><span class="n">exceptional</span><span class="o">=</span><span class="n">select</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="n">inputs</span><span class="p">,</span><span class="n">outputs</span><span class="p">,</span><span class="n">inputs</span><span class="p">,</span><span class="n">timeout</span><span class="p">)</span><span class="c1">#when timeout reached,select return three empty list</span><span class="k">if</span><span class="ow">not</span><span class="p">(</span><span class="n">readable</span><span class="ow">or</span><span class="n">writable</span><span class="ow">or</span><span class="n">exceptional</span><span class="p">):</span><span class="k">print</span><span class="s2">"Time out!"</span><span class="k">break</span><span class="p">;</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">readable</span><span class="p">:</span><span class="k">if</span><span class="n">s</span><span class="ow">is</span><span class="n">server</span><span class="p">:</span><span class="c1">#A "readable" socket is ready to accept a connection</span><span class="n">connection</span><span class="p">,</span><span class="n">client_address</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span><span class="k">print</span><span class="s2">" connection from"</span><span class="p">,</span><span class="n">client_address</span><span class="n">connection</span><span class="o">.</span><span class="n">setblocking</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="n">inputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">connection</span><span class="p">)</span><span class="n">message_queues</span><span class="p">[</span><span class="n">connection</span><span class="p">]</span><span class="o">=</span><span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span><span class="k">else</span><span class="p">:</span><span class="n">data</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span><span class="k">if</span><span class="n">data</span><span class="p">:</span><span class="k">print</span><span class="s2">"received "</span><span class="p">,</span><span class="n">data</span><span class="p">,</span><span class="s2">"from "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="c1">#Add output channel for response</span><span class="k">if</span><span class="n">s</span><span class="ow">not</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="c1">#Interpret empty result as closed connection</span><span class="k">print</span><span class="s2">" closing"</span><span class="p">,</span><span class="n">client_address</span><span class="k">if</span><span class="n">s</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">inputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="c1">#remove message queue</span><span class="k">del</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">writable</span><span class="p">:</span><span class="k">try</span><span class="p">:</span><span class="n">next_msg</span><span class="o">=</span><span class="n">message_queues</span><span class="p">[</span><span class="n">s</span><span class="p">]</span><span class="o">.</span><span class="n">get_nowait</span><span class="p">()</span><span class="k">except</span><span class="n">Queue</span><span class="o">.</span><span class="n">Empty</span><span class="p">:</span><span class="k">print</span><span class="s2">" "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">,</span><span class="s2">" queue empty"</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">else</span><span class="p">:</span><span class="k">print</span><span class="s2">"sending "</span><span class="p">,</span><span class="n">next_msg</span><span class="p">,</span><span class="s2">" to"</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">next_msg</span><span class="p">)</span><span class="k">for</span><span class="n">s</span><span class="ow">in</span><span class="n">exceptional</span><span class="p">:</span><span class="k">print</span><span class="s2">" exception condition on "</span><span class="p">,</span><span class="n">s</span><span class="o">.</span><span class="n">getpeername</span><span class="p">()</span><span class="c1">#stop listening for input on the connection</span><span class="n">inputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="k">if</span><span class="n">s</span><span class="ow">in</span><span class="n">outputs</span><span class="p">:</span><span class="n">outputs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span><span class="c1">#Remove message queue</span></code></pre></td></tr></table></div></div><h3 id="poll测试">poll测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket
import select
import Queue
server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
server.setblocking(False)
server.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
server_address=("localhost",10001)
print "Starting up on %s port %s" % server_address
server.bind(server_address)
server.listen(5)
message_queues={}
#The timeout value is represente in milliseconds,instead of seconds
timeout=100
#Create a limit for the next
READ_ONLY=(select.POLLIN | select.POLLPRI | select.POLLHUP | select.POLLERR)
READ_WRITE=(READ_ONLY|select.POLLOUT)
#set up the poller
poller=select.poll()
poller.register(server,READ_ONLY)
#map file descriptors to socket objects
fd_to_socket={server.fileno():server,}
while True:
print "Waiting for the next event"
events=poller.poll(timeout)
print "*"*20
print len(events)
print events
print "*"*20
for fd,flag in events:
s=fd_to_socket[fd]
if flag &amp; (select.POLLIN|select.POLLPRI):
if s is server:
#A readable socket is ready to accept a connection
connection,client_address=s.accept()
print "Connection ",client_address
connection.setblocking(False)
fd_to_socket[connection.fileno()]=connection
poller.register(connection,READ_ONLY)
#Give the connection a queue to send data
message_queues[connection]=Queue.Queue
else:
data=s.recv(1024)
if data:
# A readable client socket has data
print " received %s from %s " % (data,s.getpeername())
message_queues[s].put(data)
poller.modify(s,READ_WRITE)
else:
#Close the connection
print " closing ",s.getpeername()
#Stop listening for input on the connection
poller.unregister(s)
s.close()
del message_queues[s]
elif flag &amp; select.POLLHUP:
#A client that "Hang up",to be closed.
print "closing ",s.getpeername,"(HUP)"
poller.unregister(s)
s.close()
elif flag &amp; select.POLLOUT:
#SOCKET is ready to send DATA,if there is any to send
try:
next_msg=message_queues[s].get_nowait()
except Queue.Empty:
#No messages waiting so stop checking
print s.getpeername," queue empty"
poller.modify(s,READ_ONLY)
else:
print " sending %s to %s" %(next_msg,s.getpeername())
s.send(next_msg)
elif flag &amp; select.POLLERR:
#Any events with POLLER cause the server to close the sockets
print " exception on",s.getpeername()
poller.unregister(s)
s.close()
del message_queues[s]</code></pre></td></tr></table></div></div><h3 id="epoll测试">epoll测试</h3><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span><span class="lnt">25</span><span class="lnt">26</span><span class="lnt">27</span><span class="lnt">28</span><span class="lnt">29</span><span class="lnt">30</span><span class="lnt">31</span><span class="lnt">32</span><span class="lnt">33</span><span class="lnt">34</span><span class="lnt">35</span><span class="lnt">36</span><span class="lnt">37</span><span class="lnt">38</span><span class="lnt">39</span><span class="lnt">40</span><span class="lnt">41</span><span class="lnt">42</span><span class="lnt">43</span><span class="lnt">44</span><span class="lnt">45</span><span class="lnt">46</span><span class="lnt">47</span><span class="lnt">48</span><span class="lnt">49</span><span class="lnt">50</span><span class="lnt">51</span><span class="lnt">52</span><span class="lnt">53</span><span class="lnt">54</span><span class="lnt">55</span><span class="lnt">56</span><span class="lnt">57</span><span class="lnt">58</span><span class="lnt">59</span><span class="lnt">60</span><span class="lnt">61</span><span class="lnt">62</span><span class="lnt">63</span><span class="lnt">64</span><span class="lnt">65</span><span class="lnt">66</span><span class="lnt">67</span><span class="lnt">68</span><span class="lnt">69</span><span class="lnt">70</span><span class="lnt">71</span><span class="lnt">72</span><span class="lnt">73</span><span class="lnt">74</span><span class="lnt">75</span><span class="lnt">76</span><span class="lnt">77</span><span class="lnt">78</span><span class="lnt">79</span><span class="lnt">80</span><span class="lnt">81</span><span class="lnt">82</span><span class="lnt">83</span><span class="lnt">84</span><span class="lnt">85</span><span class="lnt">86</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket,logging
import select,errno
logger=logging.getLogger("network-server")
def InitLog():
logger.setLevel(logging.DEBUG)
fh=logging.FileHandler("network-server.log")
fh.setLevel(logging.DEBUG)
ch=logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter=logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -%(message)s")
ch.setFormatter(formatter)
fh.setFormatter(formatter)
logger.addHandler(fh)
logger.addHandler(ch)
if __name__=="__main__":
InitLog()
try:
listen_fd=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
except socket.error,msg:
logger.error("create a socket failed")
try:
listen_fd.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
except socket.error,msg:
logger.error("setsocketopt error")
try:
listen_fd.bind(('',10001))
except socket.error,msg:
logger.error("listen file id bind ip error")
try:
listen_fd.listen(10)
except socket.error,msg:
logger.error(msg)
try:
epoll_fd=select.epoll()
epoll_fd.register(listen_fd.fileno(),select.EPOLLIN)
except select.error,msg:
logger.error(msg)
connections={}
addresses={}
datalist={}
while True:
epoll_list = epoll_fd.poll()
for fd,events in epoll_list:
if fd==listen_fd.fileno():
conn,addr=listen_fd.accept()
logger.debug("accept connction from %s,%d,fd = %d" %(addr[0],addr[1],conn.fileno()))
conn.setblocking(0)
epoll_fd.register(conn.fileno(),select.EPOLLIN|select.EPOLLET)
connections[conn.fileno()]=conn
addresses[conn.fileno()]=addr
elif select.EPOLLIN &amp; events:
datas=''
while True:
try:
data=connections[fd].recv(10)
if not data and not datas:
epoll_fd.unregister(fd)
connections[fd].close()
logger.debug("%s,%d closed" % (addresses[fd][0],addresses[fd][1]))
break
else:
datas+=data
except socket.error,msg:
if msg.errno==errno.EAGAIN:
logger.debug("%s receive %s" % (fd,datas))
datalist[fd]=datas
epoll_fd.modify(fd,select.EPOLLET|select.EPOLLOUT)
break
else:
epoll_fd.unregister(fd)
connections[fd].close()
logger.error(msg)
break
elif select.EPOLLHUP &amp; events:
epoll_fd.unregister(fd)
connections[fd].close()
logger.debug("%s ,%d closed" % (addresses[fd][0],addresses[fd][1]))
elif select.EPOLLOUT &amp; events:
sendLen=0
while True:
sendLen += connections[fd].send(datalist[fd][sendLen:])
if sendLen == len(datalist[fd]):
break
epoll_fd.modify(fd,select.EPOLLIN|select.EPOLLET)
else:
continue</code></pre></td></tr></table></div></div><h1 id="commontestpyclient-code">commontest.py(client code)</h1><div class="highlight"><div class="chroma"><table class="lntable"><tr><td class="lntd"><pre class="chroma"><code><span class="lnt"> 1</span><span class="lnt"> 2</span><span class="lnt"> 3</span><span class="lnt"> 4</span><span class="lnt"> 5</span><span class="lnt"> 6</span><span class="lnt"> 7</span><span class="lnt"> 8</span><span class="lnt"> 9</span><span class="lnt">10</span><span class="lnt">11</span><span class="lnt">12</span><span class="lnt">13</span><span class="lnt">14</span><span class="lnt">15</span><span class="lnt">16</span><span class="lnt">17</span><span class="lnt">18</span><span class="lnt">19</span><span class="lnt">20</span><span class="lnt">21</span><span class="lnt">22</span><span class="lnt">23</span><span class="lnt">24</span></code></pre></td><td class="lntd"><pre class="chroma"><code class="language-fallback" data-lang="fallback">import socket
messages = ["This is the message",
"It will be send",
"in parts"]
print "Connect to the server"
server_address=("localhost",10001)
#Create a TCP/IP sock
socks=[]
for i in range(10):
socks.append(socket.socket(socket.AF_INET,socket.SOCK_STREAM))
for s in socks:
s.connect(server_address)
counter=0
for message in messages:
for s in socks:
counter+=1
print " %s sending %s "%(s.getpeername(),message+" version "+str(counter))
s.send(message+" version "+str(counter))
for s in socks:
data=s.recv(1024)
print " %s received %s " % (s.getpeername(),data)
if not data:
print "closing socket",s.getpeername()
s.close()</code></pre></td></tr></table></div></div><hr/><p>参考<br/><a href="scotdoyle.com/python-epoll-howto.html" rel="noopener noreffer">epoll的使用</a><br/><a href="blog.csdn.net/livefun/article/details/8721772" rel="noopener noreffer">asyncore的介绍和使用-blog1</a><br/><a href="http://www.nightmare.com/medusa/async_sockets.html" rel="noopener noreffer" target="_blank">asyncore的介绍和使用-blog2</a><br/><a href="https://mp.weixin.qq.com/s/dbZE-zml38WRgiUwGfEoEw" rel="noopener noreffer" target="_blank">unix网络编程io模型</a></p></description></item></channel></rss><script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script><script>
const _do_decrypt = function(encrypted, password) {
  let key = CryptoJS.enc.Utf8.parse(password);
  let iv = CryptoJS.enc.Utf8.parse(password.substr(16));
  let decrypted_data = CryptoJS.AES.decrypt(encrypted, key, {
    iv: iv,
    mode: CryptoJS.mode.CBC,
    padding: CryptoJS.pad.Pkcs7
  });
  return decrypted_data.toString(CryptoJS.enc.Utf8);
};
const _click_handler = function(element) {
  let parent = element.parentNode.parentNode;
  let encrypted = parent.querySelector(
    ".hugo-encryptor-cipher-text").innerText;
  let password = parent.querySelector(
    ".hugo-encryptor-input").value;
  password = CryptoJS.MD5(password).toString();
  let index = -1;
  let elements = document.querySelectorAll(
    ".hugo-encryptor-container");
  for (index = 0; index < elements.length; ++index) {
    if (elements[index].isSameNode(parent)) {
      break;
    }
  }
  let decrypted = "";
  try {
    decrypted = _do_decrypt(encrypted, password);
  } catch (err) {
    console.error(err);
    alert("Failed to decrypt.");
    return;
  }
  if (!decrypted.includes("--- DON'T MODIFY THIS LINE ---")) {
    alert("Incorrect password.");
    return;
  }
  let storage = localStorage;
  let key = location.pathname + ".password." + index;
  storage.setItem(key, password);
  parent.innerHTML = decrypted;
}
window.onload = () => {
  let index = -1;
  let elements = document.querySelectorAll(
    ".hugo-encryptor-container");
  while (1) {
    ++index;
    let key = location.pathname + ".password." + index;
    let password = localStorage.getItem(key);
    if (!password) {
      break;
    } else {
      console.log("Found password for part " + index);
      let parent = elements[index];
      let encrypted = parent.querySelector(".hugo-encryptor-cipher-text").innerText;
      let decrypted = _do_decrypt(encrypted, password);
      elements[index].innerHTML = decrypted;
    }
  }
};</script></body></html>